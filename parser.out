Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    ENUM
    INTERFACE
    NEW

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> PACKAGE QualifiedIdentifier SEMICOLON importDeclaration typeDeclaration
Rule 2     CompilationUnit -> importDeclaration typeDeclaration
Rule 3     importDeclaration -> ImportDeclaration importDeclaration
Rule 4     importDeclaration -> <empty>
Rule 5     typeDeclaration -> TypeDeclaration typeDeclaration
Rule 6     typeDeclaration -> <empty>
Rule 7     QualifiedIdentifier -> IDENTIFIER
Rule 8     QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier
Rule 9     QualifiedIdentifierList -> QualifiedIdentifier
Rule 10    QualifiedIdentifierList -> QualifiedIdentifier COMMA QualifiedIdentifierList
Rule 11    ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON
Rule 12    ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON
Rule 13    ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON
Rule 14    ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON
Rule 15    TypeDeclaration -> ClassOrInterfaceDeclaration
Rule 16    TypeDeclaration -> SEMICOLON
Rule 17    ClassOrInterfaceDeclaration -> modifier ClassDeclaration
Rule 18    ClassDeclaration -> NormalClassDeclaration
Rule 19    NormalClassDeclaration -> CLASS IDENTIFIER ClassBody
Rule 20    NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody
Rule 21    NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody
Rule 22    NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody
Rule 23    square_brace -> <empty>
Rule 24    square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace
Rule 25    modifier -> Modifier modifier
Rule 26    modifier -> <empty>
Rule 27    Type -> BasicType square_brace
Rule 28    Type -> QualifiedIdentifier square_brace
Rule 29    BasicType -> BYTE
Rule 30    BasicType -> SHORT
Rule 31    BasicType -> CHAR
Rule 32    BasicType -> INT
Rule 33    BasicType -> LONG
Rule 34    BasicType -> FLOAT
Rule 35    BasicType -> DOUBLE
Rule 36    BasicType -> BOOLEAN
Rule 37    TypeList -> QualifiedIdentifier
Rule 38    TypeList -> QualifiedIdentifier COMMA TypeList
Rule 39    Modifier -> PUBLIC
Rule 40    Modifier -> PROTECTED
Rule 41    Modifier -> PRIVATE
Rule 42    Modifier -> STATIC
Rule 43    Modifier -> ABSTRACT
Rule 44    Modifier -> FINAL
Rule 45    Modifier -> NATIVE
Rule 46    Modifier -> SYNCHRONIZED
Rule 47    Modifier -> TRANSIENT
Rule 48    Modifier -> VOLATILE
Rule 49    Modifier -> STRICTFP
Rule 50    ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE
Rule 51    classBodyDeclaration -> ClassBodyDeclaration classBodyDeclaration
Rule 52    classBodyDeclaration -> <empty>
Rule 53    ClassBodyDeclaration -> SEMICOLON
Rule 54    ClassBodyDeclaration -> modifier MemberDecl
Rule 55    ClassBodyDeclaration -> STATIC Block
Rule 56    ClassBodyDeclaration -> Block
Rule 57    MemberDecl -> MethodOrFieldDecl
Rule 58    MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest
Rule 59    MemberDecl -> ClassDeclaration
Rule 60    MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest
Rule 61    MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON
Rule 62    MethodOrFieldRest -> MethodDeclaratorRest
Rule 63    variableDeclarator -> COMMA VariableDeclarator variableDeclarator
Rule 64    variableDeclarator -> <empty>
Rule 65    FieldDeclaratorsRest -> VariableDeclaratorRest variableDeclarator
Rule 66    MethodDeclaratorRest -> FormalParameters Block
Rule 67    MethodDeclaratorRest -> FormalParameters SEMICOLON
Rule 68    MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block
Rule 69    MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON
Rule 70    VoidMethodDeclaratorRest -> FormalParameters Block
Rule 71    VoidMethodDeclaratorRest -> FormalParameters SEMICOLON
Rule 72    VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block
Rule 73    VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON
Rule 74    FormalParameters -> L_BRACE R_BRACE
Rule 75    FormalParameters -> L_BRACE FormalParameterDecls R_BRACE
Rule 76    variableModifier -> <empty>
Rule 77    variableModifier -> FINAL variableModifier
Rule 78    FormalParameterDecls -> Type FormalParameterDeclsRest
Rule 79    FormalParameterDecls -> variableModifier Type FormalParameterDeclsRest
Rule 80    FormalParameterDeclsRest -> VariableDeclaratorId
Rule 81    FormalParameterDeclsRest -> VariableDeclaratorId COMMA FormalParameterDecls
Rule 82    FormalParameterDeclsRest -> DOT DOT DOT VariableDeclaratorId
Rule 83    VariableDeclaratorId -> IDENTIFIER square_brace
Rule 84    VariableDeclarators -> VariableDeclarator
Rule 85    VariableDeclarators -> VariableDeclarator COMMA VariableDeclarators
Rule 86    VariableDeclarator -> IDENTIFIER VariableDeclaratorRest
Rule 87    VariableDeclaratorRest -> square_brace
Rule 88    VariableDeclaratorRest -> square_brace ASSIGNMENT VariableInitializer
Rule 89    VariableInitializer -> ArrayInitializer
Rule 90    VariableInitializer -> Expression
Rule 91    variableInitializer -> VariableInitializer
Rule 92    variableInitializer -> VariableInitializer COMMA variableInitializer
Rule 93    ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE
Rule 94    ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA
Rule 95    Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE
Rule 96    BlockStatements -> BlockStatement BlockStatements
Rule 97    BlockStatements -> <empty>
Rule 98    BlockStatement -> LocalVariableDeclarationStatement
Rule 99    BlockStatement -> ClassOrInterfaceDeclaration
Rule 100   BlockStatement -> Statement
Rule 101   BlockStatement -> IDENTIFIER COLON Statement
Rule 102   LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON
Rule 103   LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON
Rule 104   Statement -> Block
Rule 105   Statement -> SEMICOLON
Rule 106   Statement -> StatementExpression SEMICOLON
Rule 107   Statement -> IF ParExpression Statement
Rule 108   Statement -> IF ParExpression Statement ELSE Statement
Rule 109   Statement -> ASSERT Expression SEMICOLON
Rule 110   Statement -> ASSERT Expression COLON Expression SEMICOLON
Rule 111   Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
Rule 112   Statement -> WHILE ParExpression Statement
Rule 113   Statement -> DO Statement WHILE ParExpression SEMICOLON
Rule 114   Statement -> FOR L_BRACE ForControl R_BRACE Statement
Rule 115   Statement -> BREAK SEMICOLON
Rule 116   Statement -> BREAK IDENTIFIER SEMICOLON
Rule 117   Statement -> CONTINUE SEMICOLON
Rule 118   Statement -> CONTINUE IDENTIFIER SEMICOLON
Rule 119   Statement -> RETURN SEMICOLON
Rule 120   Statement -> RETURN Expression SEMICOLON
Rule 121   Statement -> THROW Expression SEMICOLON
Rule 122   Statement -> SYNCHRONIZED ParExpression Block
Rule 123   StatementExpression -> Expression
Rule 124   SwitchBlockStatementGroups -> SwitchBlockStatementGroup SwitchBlockStatementGroups
Rule 125   SwitchBlockStatementGroups -> <empty>
Rule 126   SwitchBlockStatementGroup -> SwitchLabels BlockStatements
Rule 127   SwitchLabels -> SwitchLabel
Rule 128   SwitchLabels -> SwitchLabel SwitchLabels
Rule 129   SwitchLabel -> CASE Expression COLON
Rule 130   SwitchLabel -> DEFAULT COLON
Rule 131   ForControl -> ForVarControl
Rule 132   ForControl -> ForUpdate SEMICOLON SEMICOLON
Rule 133   ForControl -> ForUpdate SEMICOLON Expression SEMICOLON
Rule 134   ForControl -> ForUpdate SEMICOLON SEMICOLON ForUpdate
Rule 135   ForControl -> ForUpdate SEMICOLON Expression SEMICOLON ForUpdate
Rule 136   ForVarControl -> Type VariableDeclaratorId ForVarControlRest
Rule 137   ForVarControl -> variableModifier Type VariableDeclaratorId ForVarControlRest
Rule 138   ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON SEMICOLON
Rule 139   ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON
Rule 140   ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON SEMICOLON ForUpdate
Rule 141   ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON ForUpdate
Rule 142   ForVarControlRest -> COLON Expression
Rule 143   ForVariableDeclaratorsRest -> ASSIGNMENT VariableInitializer variableDeclarator
Rule 144   ForUpdate -> StatementExpression
Rule 145   ForUpdate -> StatementExpression COMMA ForUpdate
Rule 146   Expression -> Expression1
Rule 147   Expression -> Expression1 AssignmentOperator Expression1
Rule 148   AssignmentOperator -> ASSIGNMENT
Rule 149   AssignmentOperator -> PLUS_ASSIGNMENT
Rule 150   AssignmentOperator -> MINUS_ASSIGNMENT
Rule 151   AssignmentOperator -> TIMES_ASSIGNMENT
Rule 152   AssignmentOperator -> DIVIDE_ASSIGNMENT
Rule 153   AssignmentOperator -> AND_ASSIGNMENT
Rule 154   AssignmentOperator -> OR_ASSIGNMENT
Rule 155   AssignmentOperator -> POWER_ASSIGNMENT
Rule 156   AssignmentOperator -> MOD_ASSIGNMENT
Rule 157   AssignmentOperator -> L_SHIFT_ASSIGNMENT
Rule 158   AssignmentOperator -> R_SHIFT_ASSIGNMENT
Rule 159   AssignmentOperator -> RR_SHIFT_ASSIGNMENT
Rule 160   Expression1 -> Expression2
Rule 161   Expression1 -> Expression2 Expression1Rest
Rule 162   Expression1Rest -> EXPLAMETARY Expression COLON Expression1
Rule 163   Expression2 -> Expression3
Rule 164   Expression2 -> Expression3 Expression2Rest
Rule 165   infixOp_expression3 -> InfixOp Expression3 infixOp_expression3
Rule 166   infixOp_expression3 -> <empty>
Rule 167   Expression2Rest -> InfixOp Expression3 infixOp_expression3
Rule 168   Expression2Rest -> INSTANCEOF Type
Rule 169   InfixOp -> OR
Rule 170   InfixOp -> AND
Rule 171   InfixOp -> POWER
Rule 172   InfixOp -> EQUAL
Rule 173   InfixOp -> NOT_EQUAL
Rule 174   InfixOp -> LT
Rule 175   InfixOp -> GT
Rule 176   InfixOp -> LE
Rule 177   InfixOp -> GE
Rule 178   InfixOp -> L_SHIFT
Rule 179   InfixOp -> R_SHIFT
Rule 180   InfixOp -> RR_SHIFT
Rule 181   InfixOp -> PLUS
Rule 182   InfixOp -> MINUS
Rule 183   InfixOp -> TIMES
Rule 184   InfixOp -> DIVIDE
Rule 185   InfixOp -> MOD
Rule 186   postfixOp -> PostfixOp postfixOp
Rule 187   postfixOp -> <empty>
Rule 188   Expression3 -> PrefixOp Expression3
Rule 189   Expression3 -> L_BRACE Expression R_BRACE Expression3
Rule 190   Expression3 -> L_BRACE Type R_BRACE Expression3
Rule 191   Expression3 -> Primary DOT QualifiedIdentifier postfixOp
Rule 192   Expression3 -> Primary postfixOp
Rule 193   PrefixOp -> PLUS_PLUS
Rule 194   PrefixOp -> MINUS_MINUS
Rule 195   PrefixOp -> NOT
Rule 196   PrefixOp -> CURL_DASH
Rule 197   PrefixOp -> PLUS
Rule 198   PrefixOp -> MINUS
Rule 199   PostfixOp -> PLUS_PLUS
Rule 200   PostfixOp -> MINUS_MINUS
Rule 201   Primary -> Literal
Rule 202   Primary -> ParExpression
Rule 203   Primary -> THIS
Rule 204   Primary -> THIS Arguments
Rule 205   Primary -> SUPER SuperSuffix
Rule 206   Primary -> QualifiedIdentifier
Rule 207   Primary -> QualifiedIdentifier IdentifierSuffix
Rule 208   Primary -> BasicType square_brace DOT CLASS
Rule 209   Primary -> VOID DOT CLASS
Rule 210   Literal -> LITERAL
Rule 211   Literal -> NUMBER
Rule 212   ParExpression -> L_BRACE Expression R_BRACE
Rule 213   ExpressionList -> Expression
Rule 214   ExpressionList -> Expression COMMA ExpressionList
Rule 215   Arguments -> L_BRACE ExpressionList L_BRACE
Rule 216   SuperSuffix -> Arguments
Rule 217   SuperSuffix -> DOT IDENTIFIER Arguments
Rule 218   IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE
Rule 219   IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE
Rule 220   IdentifierSuffix -> Arguments
Rule 221   IdentifierSuffix -> DOT CLASS
Rule 222   IdentifierSuffix -> DOT THIS
Rule 223   IdentifierSuffix -> DOT SUPER Arguments

Terminals, with rules where they appear

ABSTRACT             : 43
AND                  : 170
AND_ASSIGNMENT       : 153
ASSERT               : 109 110
ASSIGNMENT           : 88 143 148
BOOLEAN              : 36
BREAK                : 115 116
BYTE                 : 29
CASE                 : 129
CHAR                 : 31
CLASS                : 19 20 21 22 208 209 218 221
COLON                : 101 110 129 130 142 162
COMMA                : 10 38 63 81 85 92 94 145 214
CONTINUE             : 117 118
CURL_DASH            : 196
DEFAULT              : 130
DIVIDE               : 184
DIVIDE_ASSIGNMENT    : 152
DO                   : 113
DOT                  : 8 82 82 82 191 208 209 217 218 219 221 222 223
DOT_STAR             : 11 14
DOUBLE               : 35
ELSE                 : 108
ENUM                 : 
EQUAL                : 172
EXPLAMETARY          : 162
EXTENDS              : 20 22
FINAL                : 44 77
FLOAT                : 34
FOR                  : 114
GE                   : 177
GT                   : 175
IDENTIFIER           : 7 8 19 20 21 22 58 60 83 86 101 116 118 217
IF                   : 107 108
IMPLEMENTS           : 21 22
IMPORT               : 11 12 13 14
INSTANCEOF           : 168
INT                  : 32
INTERFACE            : 
LE                   : 176
LITERAL              : 210
LONG                 : 33
LT                   : 174
L_BRACE              : 74 75 114 189 190 212 215 215 218 219
L_CURL_BRACE         : 50 95 111
L_SHIFT              : 178
L_SHIFT_ASSIGNMENT   : 157
L_SQUARE_BRACE       : 24 93 94
MINUS                : 182 198
MINUS_ASSIGNMENT     : 150
MINUS_MINUS          : 194 200
MOD                  : 185
MOD_ASSIGNMENT       : 156
NATIVE               : 45
NEW                  : 
NOT                  : 195
NOT_EQUAL            : 173
NUMBER               : 211
OR                   : 169
OR_ASSIGNMENT        : 154
PACKAGE              : 1
PLUS                 : 181 197
PLUS_ASSIGNMENT      : 149
PLUS_PLUS            : 193 199
POWER                : 171
POWER_ASSIGNMENT     : 155
PRIVATE              : 41
PROTECTED            : 40
PUBLIC               : 39
RETURN               : 119 120
RR_SHIFT             : 180
RR_SHIFT_ASSIGNMENT  : 159
R_BRACE              : 74 75 114 189 190 212 218 219
R_CURL_BRACE         : 50 95 111
R_SHIFT              : 179
R_SHIFT_ASSIGNMENT   : 158
R_SQUARE_BRACE       : 24 93 94
SEMICOLON            : 1 11 12 13 14 16 53 61 67 69 71 73 102 103 105 106 109 110 113 115 116 117 118 119 120 121 132 132 133 133 134 134 135 135 138 138 139 139 140 140 141 141
SHORT                : 30
STATIC               : 13 14 42 55
STRICTFP             : 49
SUPER                : 205 223
SWITCH               : 111
SYNCHRONIZED         : 46 122
THIS                 : 203 204 222
THROW                : 121
THROWS               : 68 69 72 73
TIMES                : 183
TIMES_ASSIGNMENT     : 151
TRANSIENT            : 47
VOID                 : 58 209
VOLATILE             : 48
WHILE                : 112 113
error                : 

Nonterminals, with rules where they appear

Arguments            : 204 216 217 220 223
ArrayInitializer     : 89
AssignmentOperator   : 147
BasicType            : 27 208
Block                : 55 56 66 68 70 72 104 122
BlockStatement       : 96
BlockStatements      : 95 96 126
ClassBody            : 19 20 21 22
ClassBodyDeclaration : 51
ClassDeclaration     : 17 59
ClassOrInterfaceDeclaration : 15 99
CompilationUnit      : 0
Expression           : 90 109 110 110 120 121 123 129 133 135 139 141 142 162 189 212 213 214 219
Expression1          : 146 147 147 162
Expression1Rest      : 161
Expression2          : 160 161
Expression2Rest      : 164
Expression3          : 163 164 165 167 188 189 190
ExpressionList       : 214 215
FieldDeclaratorsRest : 61
ForControl           : 114
ForUpdate            : 132 133 134 134 135 135 140 141 145
ForVarControl        : 131
ForVarControlRest    : 136 137
ForVariableDeclaratorsRest : 138 139 140 141
FormalParameterDecls : 75 81
FormalParameterDeclsRest : 78 79
FormalParameters     : 66 67 68 69 70 71 72 73
IdentifierSuffix     : 207
ImportDeclaration    : 3
InfixOp              : 165 167
Literal              : 201
LocalVariableDeclarationStatement : 98
MemberDecl           : 54
MethodDeclaratorRest : 62
MethodOrFieldDecl    : 57
MethodOrFieldRest    : 60
Modifier             : 25
NormalClassDeclaration : 18
ParExpression        : 107 108 111 112 113 122 202
PostfixOp            : 186
PrefixOp             : 188
Primary              : 191 192
QualifiedIdentifier  : 1 8 9 10 11 12 13 14 28 37 38 191 206 207
QualifiedIdentifierList : 10 68 69 72 73
Statement            : 100 101 107 108 108 112 113 114
StatementExpression  : 106 144 145
SuperSuffix          : 205
SwitchBlockStatementGroup : 124
SwitchBlockStatementGroups : 111 124
SwitchLabel          : 127 128
SwitchLabels         : 126 128
Type                 : 20 22 60 78 79 102 103 136 137 168 190
TypeDeclaration      : 5
TypeList             : 21 22 38
VariableDeclarator   : 63 84 85
VariableDeclaratorId : 80 81 82 136 137
VariableDeclaratorRest : 65 86
VariableDeclarators  : 85 102 103
VariableInitializer  : 88 91 92 143
VoidMethodDeclaratorRest : 58
classBodyDeclaration : 50 51
importDeclaration    : 1 2 3
infixOp_expression3  : 165 167
modifier             : 17 25 54
postfixOp            : 186 191 192
square_brace         : 24 27 28 83 87 88 208 218 219
typeDeclaration      : 1 2 5
variableDeclarator   : 63 65 143
variableInitializer  : 92 93 94
variableModifier     : 77 79 103 137

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . PACKAGE QualifiedIdentifier SEMICOLON importDeclaration typeDeclaration
    (2) CompilationUnit -> . importDeclaration typeDeclaration
    (3) importDeclaration -> . ImportDeclaration importDeclaration
    (4) importDeclaration -> .
    (11) ImportDeclaration -> . IMPORT QualifiedIdentifier DOT_STAR SEMICOLON
    (12) ImportDeclaration -> . IMPORT QualifiedIdentifier SEMICOLON
    (13) ImportDeclaration -> . IMPORT STATIC QualifiedIdentifier SEMICOLON
    (14) ImportDeclaration -> . IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON

    PACKAGE         shift and go to state 1
    SEMICOLON       reduce using rule 4 (importDeclaration -> .)
    PUBLIC          reduce using rule 4 (importDeclaration -> .)
    PROTECTED       reduce using rule 4 (importDeclaration -> .)
    PRIVATE         reduce using rule 4 (importDeclaration -> .)
    STATIC          reduce using rule 4 (importDeclaration -> .)
    ABSTRACT        reduce using rule 4 (importDeclaration -> .)
    FINAL           reduce using rule 4 (importDeclaration -> .)
    NATIVE          reduce using rule 4 (importDeclaration -> .)
    SYNCHRONIZED    reduce using rule 4 (importDeclaration -> .)
    TRANSIENT       reduce using rule 4 (importDeclaration -> .)
    VOLATILE        reduce using rule 4 (importDeclaration -> .)
    STRICTFP        reduce using rule 4 (importDeclaration -> .)
    CLASS           reduce using rule 4 (importDeclaration -> .)
    $end            reduce using rule 4 (importDeclaration -> .)
    IMPORT          shift and go to state 4

    importDeclaration              shift and go to state 2
    CompilationUnit                shift and go to state 5
    ImportDeclaration              shift and go to state 3

state 1

    (1) CompilationUnit -> PACKAGE . QualifiedIdentifier SEMICOLON importDeclaration typeDeclaration
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 6

state 2

    (2) CompilationUnit -> importDeclaration . typeDeclaration
    (5) typeDeclaration -> . TypeDeclaration typeDeclaration
    (6) typeDeclaration -> .
    (15) TypeDeclaration -> . ClassOrInterfaceDeclaration
    (16) TypeDeclaration -> . SEMICOLON
    (17) ClassOrInterfaceDeclaration -> . modifier ClassDeclaration
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP

    $end            reduce using rule 6 (typeDeclaration -> .)
    SEMICOLON       shift and go to state 11
    CLASS           reduce using rule 26 (modifier -> .)
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 21
    ABSTRACT        shift and go to state 19
    FINAL           shift and go to state 18
    NATIVE          shift and go to state 24
    SYNCHRONIZED    shift and go to state 10
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16

    TypeDeclaration                shift and go to state 9
    Modifier                       shift and go to state 14
    ClassOrInterfaceDeclaration    shift and go to state 12
    typeDeclaration                shift and go to state 15
    modifier                       shift and go to state 22

state 3

    (3) importDeclaration -> ImportDeclaration . importDeclaration
    (3) importDeclaration -> . ImportDeclaration importDeclaration
    (4) importDeclaration -> .
    (11) ImportDeclaration -> . IMPORT QualifiedIdentifier DOT_STAR SEMICOLON
    (12) ImportDeclaration -> . IMPORT QualifiedIdentifier SEMICOLON
    (13) ImportDeclaration -> . IMPORT STATIC QualifiedIdentifier SEMICOLON
    (14) ImportDeclaration -> . IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON

    SEMICOLON       reduce using rule 4 (importDeclaration -> .)
    PUBLIC          reduce using rule 4 (importDeclaration -> .)
    PROTECTED       reduce using rule 4 (importDeclaration -> .)
    PRIVATE         reduce using rule 4 (importDeclaration -> .)
    STATIC          reduce using rule 4 (importDeclaration -> .)
    ABSTRACT        reduce using rule 4 (importDeclaration -> .)
    FINAL           reduce using rule 4 (importDeclaration -> .)
    NATIVE          reduce using rule 4 (importDeclaration -> .)
    SYNCHRONIZED    reduce using rule 4 (importDeclaration -> .)
    TRANSIENT       reduce using rule 4 (importDeclaration -> .)
    VOLATILE        reduce using rule 4 (importDeclaration -> .)
    STRICTFP        reduce using rule 4 (importDeclaration -> .)
    CLASS           reduce using rule 4 (importDeclaration -> .)
    $end            reduce using rule 4 (importDeclaration -> .)
    IMPORT          shift and go to state 4

    ImportDeclaration              shift and go to state 3
    importDeclaration              shift and go to state 25

state 4

    (11) ImportDeclaration -> IMPORT . QualifiedIdentifier DOT_STAR SEMICOLON
    (12) ImportDeclaration -> IMPORT . QualifiedIdentifier SEMICOLON
    (13) ImportDeclaration -> IMPORT . STATIC QualifiedIdentifier SEMICOLON
    (14) ImportDeclaration -> IMPORT . STATIC QualifiedIdentifier DOT_STAR SEMICOLON
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    STATIC          shift and go to state 27
    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 26

state 5

    (0) S' -> CompilationUnit .



state 6

    (1) CompilationUnit -> PACKAGE QualifiedIdentifier . SEMICOLON importDeclaration typeDeclaration

    SEMICOLON       shift and go to state 28


state 7

    (7) QualifiedIdentifier -> IDENTIFIER .
    (8) QualifiedIdentifier -> IDENTIFIER . DOT QualifiedIdentifier

  ! shift/reduce conflict for DOT resolved as shift
    L_BRACE         reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    OR              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    AND             reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    POWER           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    EQUAL           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    LT              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    GT              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    LE              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    GE              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    L_SHIFT         reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    R_SHIFT         reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    RR_SHIFT        reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    PLUS            reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MINUS           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    TIMES           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MOD             reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    EXPLAMETARY     reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    PLUS_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MINUS_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    TIMES_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    AND_ASSIGNMENT  reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    OR_ASSIGNMENT   reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    POWER_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MOD_ASSIGNMENT  reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    L_SHIFT_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    R_SHIFT_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    RR_SHIFT_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    L_SQUARE_BRACE  reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    R_BRACE         reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    COMMA           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    COLON           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    R_SQUARE_BRACE  reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    DOT_STAR        reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    L_CURL_BRACE    reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    IMPLEMENTS      reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    DOT             shift and go to state 29

  ! DOT             [ reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .) ]


state 8

    (47) Modifier -> TRANSIENT .

    PUBLIC          reduce using rule 47 (Modifier -> TRANSIENT .)
    PROTECTED       reduce using rule 47 (Modifier -> TRANSIENT .)
    PRIVATE         reduce using rule 47 (Modifier -> TRANSIENT .)
    STATIC          reduce using rule 47 (Modifier -> TRANSIENT .)
    ABSTRACT        reduce using rule 47 (Modifier -> TRANSIENT .)
    FINAL           reduce using rule 47 (Modifier -> TRANSIENT .)
    NATIVE          reduce using rule 47 (Modifier -> TRANSIENT .)
    SYNCHRONIZED    reduce using rule 47 (Modifier -> TRANSIENT .)
    TRANSIENT       reduce using rule 47 (Modifier -> TRANSIENT .)
    VOLATILE        reduce using rule 47 (Modifier -> TRANSIENT .)
    STRICTFP        reduce using rule 47 (Modifier -> TRANSIENT .)
    CLASS           reduce using rule 47 (Modifier -> TRANSIENT .)
    VOID            reduce using rule 47 (Modifier -> TRANSIENT .)
    BYTE            reduce using rule 47 (Modifier -> TRANSIENT .)
    SHORT           reduce using rule 47 (Modifier -> TRANSIENT .)
    CHAR            reduce using rule 47 (Modifier -> TRANSIENT .)
    INT             reduce using rule 47 (Modifier -> TRANSIENT .)
    LONG            reduce using rule 47 (Modifier -> TRANSIENT .)
    FLOAT           reduce using rule 47 (Modifier -> TRANSIENT .)
    DOUBLE          reduce using rule 47 (Modifier -> TRANSIENT .)
    BOOLEAN         reduce using rule 47 (Modifier -> TRANSIENT .)
    IDENTIFIER      reduce using rule 47 (Modifier -> TRANSIENT .)


state 9

    (5) typeDeclaration -> TypeDeclaration . typeDeclaration
    (5) typeDeclaration -> . TypeDeclaration typeDeclaration
    (6) typeDeclaration -> .
    (15) TypeDeclaration -> . ClassOrInterfaceDeclaration
    (16) TypeDeclaration -> . SEMICOLON
    (17) ClassOrInterfaceDeclaration -> . modifier ClassDeclaration
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP

    $end            reduce using rule 6 (typeDeclaration -> .)
    SEMICOLON       shift and go to state 11
    CLASS           reduce using rule 26 (modifier -> .)
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 21
    ABSTRACT        shift and go to state 19
    FINAL           shift and go to state 18
    NATIVE          shift and go to state 24
    SYNCHRONIZED    shift and go to state 10
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16

    Modifier                       shift and go to state 14
    ClassOrInterfaceDeclaration    shift and go to state 12
    TypeDeclaration                shift and go to state 9
    typeDeclaration                shift and go to state 30
    modifier                       shift and go to state 22

state 10

    (46) Modifier -> SYNCHRONIZED .

    PUBLIC          reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    INT             reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    IDENTIFIER      reduce using rule 46 (Modifier -> SYNCHRONIZED .)


state 11

    (16) TypeDeclaration -> SEMICOLON .

    SEMICOLON       reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    PUBLIC          reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    PROTECTED       reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    PRIVATE         reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    STATIC          reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    ABSTRACT        reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    FINAL           reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    NATIVE          reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    TRANSIENT       reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    VOLATILE        reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    STRICTFP        reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    CLASS           reduce using rule 16 (TypeDeclaration -> SEMICOLON .)
    $end            reduce using rule 16 (TypeDeclaration -> SEMICOLON .)


state 12

    (15) TypeDeclaration -> ClassOrInterfaceDeclaration .

    SEMICOLON       reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    STATIC          reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    FINAL           reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    NATIVE          reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    TRANSIENT       reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    VOLATILE        reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    CLASS           reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)
    $end            reduce using rule 15 (TypeDeclaration -> ClassOrInterfaceDeclaration .)


state 13

    (48) Modifier -> VOLATILE .

    PUBLIC          reduce using rule 48 (Modifier -> VOLATILE .)
    PROTECTED       reduce using rule 48 (Modifier -> VOLATILE .)
    PRIVATE         reduce using rule 48 (Modifier -> VOLATILE .)
    STATIC          reduce using rule 48 (Modifier -> VOLATILE .)
    ABSTRACT        reduce using rule 48 (Modifier -> VOLATILE .)
    FINAL           reduce using rule 48 (Modifier -> VOLATILE .)
    NATIVE          reduce using rule 48 (Modifier -> VOLATILE .)
    SYNCHRONIZED    reduce using rule 48 (Modifier -> VOLATILE .)
    TRANSIENT       reduce using rule 48 (Modifier -> VOLATILE .)
    VOLATILE        reduce using rule 48 (Modifier -> VOLATILE .)
    STRICTFP        reduce using rule 48 (Modifier -> VOLATILE .)
    CLASS           reduce using rule 48 (Modifier -> VOLATILE .)
    VOID            reduce using rule 48 (Modifier -> VOLATILE .)
    BYTE            reduce using rule 48 (Modifier -> VOLATILE .)
    SHORT           reduce using rule 48 (Modifier -> VOLATILE .)
    CHAR            reduce using rule 48 (Modifier -> VOLATILE .)
    INT             reduce using rule 48 (Modifier -> VOLATILE .)
    LONG            reduce using rule 48 (Modifier -> VOLATILE .)
    FLOAT           reduce using rule 48 (Modifier -> VOLATILE .)
    DOUBLE          reduce using rule 48 (Modifier -> VOLATILE .)
    BOOLEAN         reduce using rule 48 (Modifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 48 (Modifier -> VOLATILE .)


state 14

    (25) modifier -> Modifier . modifier
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP

    CLASS           reduce using rule 26 (modifier -> .)
    VOID            reduce using rule 26 (modifier -> .)
    BYTE            reduce using rule 26 (modifier -> .)
    SHORT           reduce using rule 26 (modifier -> .)
    CHAR            reduce using rule 26 (modifier -> .)
    INT             reduce using rule 26 (modifier -> .)
    LONG            reduce using rule 26 (modifier -> .)
    FLOAT           reduce using rule 26 (modifier -> .)
    DOUBLE          reduce using rule 26 (modifier -> .)
    BOOLEAN         reduce using rule 26 (modifier -> .)
    IDENTIFIER      reduce using rule 26 (modifier -> .)
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 21
    ABSTRACT        shift and go to state 19
    FINAL           shift and go to state 18
    NATIVE          shift and go to state 24
    SYNCHRONIZED    shift and go to state 10
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16

    modifier                       shift and go to state 31
    Modifier                       shift and go to state 14

state 15

    (2) CompilationUnit -> importDeclaration typeDeclaration .

    $end            reduce using rule 2 (CompilationUnit -> importDeclaration typeDeclaration .)


state 16

    (49) Modifier -> STRICTFP .

    PUBLIC          reduce using rule 49 (Modifier -> STRICTFP .)
    PROTECTED       reduce using rule 49 (Modifier -> STRICTFP .)
    PRIVATE         reduce using rule 49 (Modifier -> STRICTFP .)
    STATIC          reduce using rule 49 (Modifier -> STRICTFP .)
    ABSTRACT        reduce using rule 49 (Modifier -> STRICTFP .)
    FINAL           reduce using rule 49 (Modifier -> STRICTFP .)
    NATIVE          reduce using rule 49 (Modifier -> STRICTFP .)
    SYNCHRONIZED    reduce using rule 49 (Modifier -> STRICTFP .)
    TRANSIENT       reduce using rule 49 (Modifier -> STRICTFP .)
    VOLATILE        reduce using rule 49 (Modifier -> STRICTFP .)
    STRICTFP        reduce using rule 49 (Modifier -> STRICTFP .)
    CLASS           reduce using rule 49 (Modifier -> STRICTFP .)
    VOID            reduce using rule 49 (Modifier -> STRICTFP .)
    BYTE            reduce using rule 49 (Modifier -> STRICTFP .)
    SHORT           reduce using rule 49 (Modifier -> STRICTFP .)
    CHAR            reduce using rule 49 (Modifier -> STRICTFP .)
    INT             reduce using rule 49 (Modifier -> STRICTFP .)
    LONG            reduce using rule 49 (Modifier -> STRICTFP .)
    FLOAT           reduce using rule 49 (Modifier -> STRICTFP .)
    DOUBLE          reduce using rule 49 (Modifier -> STRICTFP .)
    BOOLEAN         reduce using rule 49 (Modifier -> STRICTFP .)
    IDENTIFIER      reduce using rule 49 (Modifier -> STRICTFP .)


state 17

    (41) Modifier -> PRIVATE .

    PUBLIC          reduce using rule 41 (Modifier -> PRIVATE .)
    PROTECTED       reduce using rule 41 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 41 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 41 (Modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 41 (Modifier -> PRIVATE .)
    FINAL           reduce using rule 41 (Modifier -> PRIVATE .)
    NATIVE          reduce using rule 41 (Modifier -> PRIVATE .)
    SYNCHRONIZED    reduce using rule 41 (Modifier -> PRIVATE .)
    TRANSIENT       reduce using rule 41 (Modifier -> PRIVATE .)
    VOLATILE        reduce using rule 41 (Modifier -> PRIVATE .)
    STRICTFP        reduce using rule 41 (Modifier -> PRIVATE .)
    CLASS           reduce using rule 41 (Modifier -> PRIVATE .)
    VOID            reduce using rule 41 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 41 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 41 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 41 (Modifier -> PRIVATE .)
    INT             reduce using rule 41 (Modifier -> PRIVATE .)
    LONG            reduce using rule 41 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 41 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 41 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 41 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 41 (Modifier -> PRIVATE .)


state 18

    (44) Modifier -> FINAL .

    PUBLIC          reduce using rule 44 (Modifier -> FINAL .)
    PROTECTED       reduce using rule 44 (Modifier -> FINAL .)
    PRIVATE         reduce using rule 44 (Modifier -> FINAL .)
    STATIC          reduce using rule 44 (Modifier -> FINAL .)
    ABSTRACT        reduce using rule 44 (Modifier -> FINAL .)
    FINAL           reduce using rule 44 (Modifier -> FINAL .)
    NATIVE          reduce using rule 44 (Modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 44 (Modifier -> FINAL .)
    TRANSIENT       reduce using rule 44 (Modifier -> FINAL .)
    VOLATILE        reduce using rule 44 (Modifier -> FINAL .)
    STRICTFP        reduce using rule 44 (Modifier -> FINAL .)
    CLASS           reduce using rule 44 (Modifier -> FINAL .)
    VOID            reduce using rule 44 (Modifier -> FINAL .)
    BYTE            reduce using rule 44 (Modifier -> FINAL .)
    SHORT           reduce using rule 44 (Modifier -> FINAL .)
    CHAR            reduce using rule 44 (Modifier -> FINAL .)
    INT             reduce using rule 44 (Modifier -> FINAL .)
    LONG            reduce using rule 44 (Modifier -> FINAL .)
    FLOAT           reduce using rule 44 (Modifier -> FINAL .)
    DOUBLE          reduce using rule 44 (Modifier -> FINAL .)
    BOOLEAN         reduce using rule 44 (Modifier -> FINAL .)
    IDENTIFIER      reduce using rule 44 (Modifier -> FINAL .)


state 19

    (43) Modifier -> ABSTRACT .

    PUBLIC          reduce using rule 43 (Modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 43 (Modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 43 (Modifier -> ABSTRACT .)
    STATIC          reduce using rule 43 (Modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 43 (Modifier -> ABSTRACT .)
    FINAL           reduce using rule 43 (Modifier -> ABSTRACT .)
    NATIVE          reduce using rule 43 (Modifier -> ABSTRACT .)
    SYNCHRONIZED    reduce using rule 43 (Modifier -> ABSTRACT .)
    TRANSIENT       reduce using rule 43 (Modifier -> ABSTRACT .)
    VOLATILE        reduce using rule 43 (Modifier -> ABSTRACT .)
    STRICTFP        reduce using rule 43 (Modifier -> ABSTRACT .)
    CLASS           reduce using rule 43 (Modifier -> ABSTRACT .)
    VOID            reduce using rule 43 (Modifier -> ABSTRACT .)
    BYTE            reduce using rule 43 (Modifier -> ABSTRACT .)
    SHORT           reduce using rule 43 (Modifier -> ABSTRACT .)
    CHAR            reduce using rule 43 (Modifier -> ABSTRACT .)
    INT             reduce using rule 43 (Modifier -> ABSTRACT .)
    LONG            reduce using rule 43 (Modifier -> ABSTRACT .)
    FLOAT           reduce using rule 43 (Modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 43 (Modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 43 (Modifier -> ABSTRACT .)
    IDENTIFIER      reduce using rule 43 (Modifier -> ABSTRACT .)


state 20

    (40) Modifier -> PROTECTED .

    PUBLIC          reduce using rule 40 (Modifier -> PROTECTED .)
    PROTECTED       reduce using rule 40 (Modifier -> PROTECTED .)
    PRIVATE         reduce using rule 40 (Modifier -> PROTECTED .)
    STATIC          reduce using rule 40 (Modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 40 (Modifier -> PROTECTED .)
    FINAL           reduce using rule 40 (Modifier -> PROTECTED .)
    NATIVE          reduce using rule 40 (Modifier -> PROTECTED .)
    SYNCHRONIZED    reduce using rule 40 (Modifier -> PROTECTED .)
    TRANSIENT       reduce using rule 40 (Modifier -> PROTECTED .)
    VOLATILE        reduce using rule 40 (Modifier -> PROTECTED .)
    STRICTFP        reduce using rule 40 (Modifier -> PROTECTED .)
    CLASS           reduce using rule 40 (Modifier -> PROTECTED .)
    VOID            reduce using rule 40 (Modifier -> PROTECTED .)
    BYTE            reduce using rule 40 (Modifier -> PROTECTED .)
    SHORT           reduce using rule 40 (Modifier -> PROTECTED .)
    CHAR            reduce using rule 40 (Modifier -> PROTECTED .)
    INT             reduce using rule 40 (Modifier -> PROTECTED .)
    LONG            reduce using rule 40 (Modifier -> PROTECTED .)
    FLOAT           reduce using rule 40 (Modifier -> PROTECTED .)
    DOUBLE          reduce using rule 40 (Modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 40 (Modifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 40 (Modifier -> PROTECTED .)


state 21

    (42) Modifier -> STATIC .

    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    ABSTRACT        reduce using rule 42 (Modifier -> STATIC .)
    FINAL           reduce using rule 42 (Modifier -> STATIC .)
    NATIVE          reduce using rule 42 (Modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 42 (Modifier -> STATIC .)
    TRANSIENT       reduce using rule 42 (Modifier -> STATIC .)
    VOLATILE        reduce using rule 42 (Modifier -> STATIC .)
    STRICTFP        reduce using rule 42 (Modifier -> STATIC .)
    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)


state 22

    (17) ClassOrInterfaceDeclaration -> modifier . ClassDeclaration
    (18) ClassDeclaration -> . NormalClassDeclaration
    (19) NormalClassDeclaration -> . CLASS IDENTIFIER ClassBody
    (20) NormalClassDeclaration -> . CLASS IDENTIFIER EXTENDS Type ClassBody
    (21) NormalClassDeclaration -> . CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody
    (22) NormalClassDeclaration -> . CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody

    CLASS           shift and go to state 34

    NormalClassDeclaration         shift and go to state 32
    ClassDeclaration               shift and go to state 33

state 23

    (39) Modifier -> PUBLIC .

    PUBLIC          reduce using rule 39 (Modifier -> PUBLIC .)
    PROTECTED       reduce using rule 39 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 39 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 39 (Modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 39 (Modifier -> PUBLIC .)
    FINAL           reduce using rule 39 (Modifier -> PUBLIC .)
    NATIVE          reduce using rule 39 (Modifier -> PUBLIC .)
    SYNCHRONIZED    reduce using rule 39 (Modifier -> PUBLIC .)
    TRANSIENT       reduce using rule 39 (Modifier -> PUBLIC .)
    VOLATILE        reduce using rule 39 (Modifier -> PUBLIC .)
    STRICTFP        reduce using rule 39 (Modifier -> PUBLIC .)
    CLASS           reduce using rule 39 (Modifier -> PUBLIC .)
    VOID            reduce using rule 39 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 39 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 39 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 39 (Modifier -> PUBLIC .)
    INT             reduce using rule 39 (Modifier -> PUBLIC .)
    LONG            reduce using rule 39 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 39 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 39 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 39 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 39 (Modifier -> PUBLIC .)


state 24

    (45) Modifier -> NATIVE .

    PUBLIC          reduce using rule 45 (Modifier -> NATIVE .)
    PROTECTED       reduce using rule 45 (Modifier -> NATIVE .)
    PRIVATE         reduce using rule 45 (Modifier -> NATIVE .)
    STATIC          reduce using rule 45 (Modifier -> NATIVE .)
    ABSTRACT        reduce using rule 45 (Modifier -> NATIVE .)
    FINAL           reduce using rule 45 (Modifier -> NATIVE .)
    NATIVE          reduce using rule 45 (Modifier -> NATIVE .)
    SYNCHRONIZED    reduce using rule 45 (Modifier -> NATIVE .)
    TRANSIENT       reduce using rule 45 (Modifier -> NATIVE .)
    VOLATILE        reduce using rule 45 (Modifier -> NATIVE .)
    STRICTFP        reduce using rule 45 (Modifier -> NATIVE .)
    CLASS           reduce using rule 45 (Modifier -> NATIVE .)
    VOID            reduce using rule 45 (Modifier -> NATIVE .)
    BYTE            reduce using rule 45 (Modifier -> NATIVE .)
    SHORT           reduce using rule 45 (Modifier -> NATIVE .)
    CHAR            reduce using rule 45 (Modifier -> NATIVE .)
    INT             reduce using rule 45 (Modifier -> NATIVE .)
    LONG            reduce using rule 45 (Modifier -> NATIVE .)
    FLOAT           reduce using rule 45 (Modifier -> NATIVE .)
    DOUBLE          reduce using rule 45 (Modifier -> NATIVE .)
    BOOLEAN         reduce using rule 45 (Modifier -> NATIVE .)
    IDENTIFIER      reduce using rule 45 (Modifier -> NATIVE .)


state 25

    (3) importDeclaration -> ImportDeclaration importDeclaration .

    SEMICOLON       reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    PUBLIC          reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    PROTECTED       reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    PRIVATE         reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    STATIC          reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    ABSTRACT        reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    FINAL           reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    NATIVE          reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    SYNCHRONIZED    reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    TRANSIENT       reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    VOLATILE        reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    STRICTFP        reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    CLASS           reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)
    $end            reduce using rule 3 (importDeclaration -> ImportDeclaration importDeclaration .)


state 26

    (11) ImportDeclaration -> IMPORT QualifiedIdentifier . DOT_STAR SEMICOLON
    (12) ImportDeclaration -> IMPORT QualifiedIdentifier . SEMICOLON

    DOT_STAR        shift and go to state 35
    SEMICOLON       shift and go to state 36


state 27

    (13) ImportDeclaration -> IMPORT STATIC . QualifiedIdentifier SEMICOLON
    (14) ImportDeclaration -> IMPORT STATIC . QualifiedIdentifier DOT_STAR SEMICOLON
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 37

state 28

    (1) CompilationUnit -> PACKAGE QualifiedIdentifier SEMICOLON . importDeclaration typeDeclaration
    (3) importDeclaration -> . ImportDeclaration importDeclaration
    (4) importDeclaration -> .
    (11) ImportDeclaration -> . IMPORT QualifiedIdentifier DOT_STAR SEMICOLON
    (12) ImportDeclaration -> . IMPORT QualifiedIdentifier SEMICOLON
    (13) ImportDeclaration -> . IMPORT STATIC QualifiedIdentifier SEMICOLON
    (14) ImportDeclaration -> . IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON

    SEMICOLON       reduce using rule 4 (importDeclaration -> .)
    PUBLIC          reduce using rule 4 (importDeclaration -> .)
    PROTECTED       reduce using rule 4 (importDeclaration -> .)
    PRIVATE         reduce using rule 4 (importDeclaration -> .)
    STATIC          reduce using rule 4 (importDeclaration -> .)
    ABSTRACT        reduce using rule 4 (importDeclaration -> .)
    FINAL           reduce using rule 4 (importDeclaration -> .)
    NATIVE          reduce using rule 4 (importDeclaration -> .)
    SYNCHRONIZED    reduce using rule 4 (importDeclaration -> .)
    TRANSIENT       reduce using rule 4 (importDeclaration -> .)
    VOLATILE        reduce using rule 4 (importDeclaration -> .)
    STRICTFP        reduce using rule 4 (importDeclaration -> .)
    CLASS           reduce using rule 4 (importDeclaration -> .)
    $end            reduce using rule 4 (importDeclaration -> .)
    IMPORT          shift and go to state 4

    importDeclaration              shift and go to state 38
    ImportDeclaration              shift and go to state 3

state 29

    (8) QualifiedIdentifier -> IDENTIFIER DOT . QualifiedIdentifier
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 39

state 30

    (5) typeDeclaration -> TypeDeclaration typeDeclaration .

    $end            reduce using rule 5 (typeDeclaration -> TypeDeclaration typeDeclaration .)


state 31

    (25) modifier -> Modifier modifier .

    CLASS           reduce using rule 25 (modifier -> Modifier modifier .)
    VOID            reduce using rule 25 (modifier -> Modifier modifier .)
    BYTE            reduce using rule 25 (modifier -> Modifier modifier .)
    SHORT           reduce using rule 25 (modifier -> Modifier modifier .)
    CHAR            reduce using rule 25 (modifier -> Modifier modifier .)
    INT             reduce using rule 25 (modifier -> Modifier modifier .)
    LONG            reduce using rule 25 (modifier -> Modifier modifier .)
    FLOAT           reduce using rule 25 (modifier -> Modifier modifier .)
    DOUBLE          reduce using rule 25 (modifier -> Modifier modifier .)
    BOOLEAN         reduce using rule 25 (modifier -> Modifier modifier .)
    IDENTIFIER      reduce using rule 25 (modifier -> Modifier modifier .)


state 32

    (18) ClassDeclaration -> NormalClassDeclaration .

    SEMICOLON       reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    STATIC          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    L_CURL_BRACE    reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    PUBLIC          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    PROTECTED       reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    PRIVATE         reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    ABSTRACT        reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    FINAL           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    NATIVE          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    SYNCHRONIZED    reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    TRANSIENT       reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    VOLATILE        reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    STRICTFP        reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    VOID            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    CLASS           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    BYTE            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    SHORT           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    CHAR            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    INT             reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    LONG            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    FLOAT           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    DOUBLE          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    BOOLEAN         reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    IDENTIFIER      reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    R_CURL_BRACE    reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    $end            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    IF              reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    ASSERT          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    SWITCH          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    WHILE           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    DO              reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    FOR             reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    BREAK           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    CONTINUE        reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    RETURN          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    THROW           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    L_BRACE         reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    PLUS_PLUS       reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    MINUS_MINUS     reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    NOT             reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    CURL_DASH       reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    PLUS            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    MINUS           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    THIS            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    SUPER           reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    LITERAL         reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    NUMBER          reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    CASE            reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)
    DEFAULT         reduce using rule 18 (ClassDeclaration -> NormalClassDeclaration .)


state 33

    (17) ClassOrInterfaceDeclaration -> modifier ClassDeclaration .

    IDENTIFIER      reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    SEMICOLON       reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    IF              reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    ASSERT          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    SWITCH          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    WHILE           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    DO              reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    FOR             reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    BREAK           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    CONTINUE        reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    RETURN          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    THROW           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    SYNCHRONIZED    reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    FINAL           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    L_CURL_BRACE    reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    BYTE            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    SHORT           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    CHAR            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    INT             reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    LONG            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    FLOAT           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    DOUBLE          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    BOOLEAN         reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    PUBLIC          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    PROTECTED       reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    PRIVATE         reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    STATIC          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    ABSTRACT        reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    NATIVE          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    TRANSIENT       reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    VOLATILE        reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    STRICTFP        reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    L_BRACE         reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    PLUS_PLUS       reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    MINUS_MINUS     reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    NOT             reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    CURL_DASH       reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    PLUS            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    MINUS           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    THIS            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    SUPER           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    VOID            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    LITERAL         reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    NUMBER          reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    CLASS           reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    CASE            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    DEFAULT         reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    R_CURL_BRACE    reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)
    $end            reduce using rule 17 (ClassOrInterfaceDeclaration -> modifier ClassDeclaration .)


state 34

    (19) NormalClassDeclaration -> CLASS . IDENTIFIER ClassBody
    (20) NormalClassDeclaration -> CLASS . IDENTIFIER EXTENDS Type ClassBody
    (21) NormalClassDeclaration -> CLASS . IDENTIFIER IMPLEMENTS TypeList ClassBody
    (22) NormalClassDeclaration -> CLASS . IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody

    IDENTIFIER      shift and go to state 40


state 35

    (11) ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR . SEMICOLON

    SEMICOLON       shift and go to state 41


state 36

    (12) ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .

    IMPORT          reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    SEMICOLON       reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    PUBLIC          reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    PROTECTED       reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    PRIVATE         reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    STATIC          reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    ABSTRACT        reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    FINAL           reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    NATIVE          reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    SYNCHRONIZED    reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    TRANSIENT       reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    VOLATILE        reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    STRICTFP        reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    CLASS           reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)
    $end            reduce using rule 12 (ImportDeclaration -> IMPORT QualifiedIdentifier SEMICOLON .)


state 37

    (13) ImportDeclaration -> IMPORT STATIC QualifiedIdentifier . SEMICOLON
    (14) ImportDeclaration -> IMPORT STATIC QualifiedIdentifier . DOT_STAR SEMICOLON

    SEMICOLON       shift and go to state 43
    DOT_STAR        shift and go to state 42


state 38

    (1) CompilationUnit -> PACKAGE QualifiedIdentifier SEMICOLON importDeclaration . typeDeclaration
    (5) typeDeclaration -> . TypeDeclaration typeDeclaration
    (6) typeDeclaration -> .
    (15) TypeDeclaration -> . ClassOrInterfaceDeclaration
    (16) TypeDeclaration -> . SEMICOLON
    (17) ClassOrInterfaceDeclaration -> . modifier ClassDeclaration
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP

    $end            reduce using rule 6 (typeDeclaration -> .)
    SEMICOLON       shift and go to state 11
    CLASS           reduce using rule 26 (modifier -> .)
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 21
    ABSTRACT        shift and go to state 19
    FINAL           shift and go to state 18
    NATIVE          shift and go to state 24
    SYNCHRONIZED    shift and go to state 10
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16

    typeDeclaration                shift and go to state 44
    Modifier                       shift and go to state 14
    ClassOrInterfaceDeclaration    shift and go to state 12
    TypeDeclaration                shift and go to state 9
    modifier                       shift and go to state 22

state 39

    (8) QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .

    L_BRACE         reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    DOT             reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    PLUS_PLUS       reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    MINUS_MINUS     reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    INSTANCEOF      reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    OR              reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    AND             reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    POWER           reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    EQUAL           reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    NOT_EQUAL       reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    LT              reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    GT              reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    LE              reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    GE              reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    L_SHIFT         reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    R_SHIFT         reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    RR_SHIFT        reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    PLUS            reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    MINUS           reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    TIMES           reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    DIVIDE          reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    MOD             reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    EXPLAMETARY     reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    ASSIGNMENT      reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    PLUS_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    MINUS_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    TIMES_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    DIVIDE_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    AND_ASSIGNMENT  reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    OR_ASSIGNMENT   reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    POWER_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    MOD_ASSIGNMENT  reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    L_SHIFT_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    R_SHIFT_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    RR_SHIFT_ASSIGNMENT reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    SEMICOLON       reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    L_SQUARE_BRACE  reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    IDENTIFIER      reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    R_BRACE         reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    COMMA           reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    COLON           reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    R_SQUARE_BRACE  reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    DOT_STAR        reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    L_CURL_BRACE    reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)
    IMPLEMENTS      reduce using rule 8 (QualifiedIdentifier -> IDENTIFIER DOT QualifiedIdentifier .)


state 40

    (19) NormalClassDeclaration -> CLASS IDENTIFIER . ClassBody
    (20) NormalClassDeclaration -> CLASS IDENTIFIER . EXTENDS Type ClassBody
    (21) NormalClassDeclaration -> CLASS IDENTIFIER . IMPLEMENTS TypeList ClassBody
    (22) NormalClassDeclaration -> CLASS IDENTIFIER . EXTENDS Type IMPLEMENTS TypeList ClassBody
    (50) ClassBody -> . L_CURL_BRACE classBodyDeclaration R_CURL_BRACE

    EXTENDS         shift and go to state 47
    IMPLEMENTS      shift and go to state 45
    L_CURL_BRACE    shift and go to state 46

    ClassBody                      shift and go to state 48

state 41

    (11) ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .

    IMPORT          reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    SEMICOLON       reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    PUBLIC          reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    PROTECTED       reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    PRIVATE         reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    STATIC          reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    ABSTRACT        reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    FINAL           reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    NATIVE          reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    SYNCHRONIZED    reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    TRANSIENT       reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    VOLATILE        reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    STRICTFP        reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    CLASS           reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)
    $end            reduce using rule 11 (ImportDeclaration -> IMPORT QualifiedIdentifier DOT_STAR SEMICOLON .)


state 42

    (14) ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR . SEMICOLON

    SEMICOLON       shift and go to state 49


state 43

    (13) ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .

    IMPORT          reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    SEMICOLON       reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    PUBLIC          reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    PROTECTED       reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    PRIVATE         reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    STATIC          reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    ABSTRACT        reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    FINAL           reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    NATIVE          reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    SYNCHRONIZED    reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    TRANSIENT       reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    VOLATILE        reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    STRICTFP        reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    CLASS           reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)
    $end            reduce using rule 13 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier SEMICOLON .)


state 44

    (1) CompilationUnit -> PACKAGE QualifiedIdentifier SEMICOLON importDeclaration typeDeclaration .

    $end            reduce using rule 1 (CompilationUnit -> PACKAGE QualifiedIdentifier SEMICOLON importDeclaration typeDeclaration .)


state 45

    (21) NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS . TypeList ClassBody
    (37) TypeList -> . QualifiedIdentifier
    (38) TypeList -> . QualifiedIdentifier COMMA TypeList
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    TypeList                       shift and go to state 50
    QualifiedIdentifier            shift and go to state 51

state 46

    (50) ClassBody -> L_CURL_BRACE . classBodyDeclaration R_CURL_BRACE
    (51) classBodyDeclaration -> . ClassBodyDeclaration classBodyDeclaration
    (52) classBodyDeclaration -> .
    (53) ClassBodyDeclaration -> . SEMICOLON
    (54) ClassBodyDeclaration -> . modifier MemberDecl
    (55) ClassBodyDeclaration -> . STATIC Block
    (56) ClassBodyDeclaration -> . Block
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP

    R_CURL_BRACE    reduce using rule 52 (classBodyDeclaration -> .)
    SEMICOLON       shift and go to state 53
    STATIC          shift and go to state 52
    VOID            reduce using rule 26 (modifier -> .)
    CLASS           reduce using rule 26 (modifier -> .)
    BYTE            reduce using rule 26 (modifier -> .)
    SHORT           reduce using rule 26 (modifier -> .)
    CHAR            reduce using rule 26 (modifier -> .)
    INT             reduce using rule 26 (modifier -> .)
    LONG            reduce using rule 26 (modifier -> .)
    FLOAT           reduce using rule 26 (modifier -> .)
    DOUBLE          reduce using rule 26 (modifier -> .)
    BOOLEAN         reduce using rule 26 (modifier -> .)
    IDENTIFIER      reduce using rule 26 (modifier -> .)
    L_CURL_BRACE    shift and go to state 57
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    ABSTRACT        shift and go to state 19
    FINAL           shift and go to state 18
    NATIVE          shift and go to state 24
    SYNCHRONIZED    shift and go to state 10
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16

    modifier                       shift and go to state 56
    ClassBodyDeclaration           shift and go to state 54
    classBodyDeclaration           shift and go to state 55
    Modifier                       shift and go to state 14
    Block                          shift and go to state 58

state 47

    (20) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS . Type ClassBody
    (22) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS . Type IMPLEMENTS TypeList ClassBody
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

    BasicType                      shift and go to state 61
    QualifiedIdentifier            shift and go to state 62
    Type                           shift and go to state 69

state 48

    (19) NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .

    SEMICOLON       reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    PUBLIC          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    PROTECTED       reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    PRIVATE         reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    STATIC          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    ABSTRACT        reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    FINAL           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    NATIVE          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    SYNCHRONIZED    reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    TRANSIENT       reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    VOLATILE        reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    STRICTFP        reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    CLASS           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    $end            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    IDENTIFIER      reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    IF              reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    ASSERT          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    SWITCH          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    WHILE           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    DO              reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    FOR             reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    BREAK           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    CONTINUE        reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    RETURN          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    THROW           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    L_CURL_BRACE    reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    BYTE            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    SHORT           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    CHAR            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    INT             reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    LONG            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    FLOAT           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    DOUBLE          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    BOOLEAN         reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    L_BRACE         reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    PLUS_PLUS       reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    MINUS_MINUS     reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    NOT             reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    CURL_DASH       reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    PLUS            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    MINUS           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    THIS            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    SUPER           reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    VOID            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    LITERAL         reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    NUMBER          reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    R_CURL_BRACE    reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    CASE            reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)
    DEFAULT         reduce using rule 19 (NormalClassDeclaration -> CLASS IDENTIFIER ClassBody .)


state 49

    (14) ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .

    IMPORT          reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    SEMICOLON       reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    PUBLIC          reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    PROTECTED       reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    PRIVATE         reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    STATIC          reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    ABSTRACT        reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    FINAL           reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    NATIVE          reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    SYNCHRONIZED    reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    TRANSIENT       reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    VOLATILE        reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    STRICTFP        reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    CLASS           reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)
    $end            reduce using rule 14 (ImportDeclaration -> IMPORT STATIC QualifiedIdentifier DOT_STAR SEMICOLON .)


state 50

    (21) NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList . ClassBody
    (50) ClassBody -> . L_CURL_BRACE classBodyDeclaration R_CURL_BRACE

    L_CURL_BRACE    shift and go to state 46

    ClassBody                      shift and go to state 70

state 51

    (37) TypeList -> QualifiedIdentifier .
    (38) TypeList -> QualifiedIdentifier . COMMA TypeList

    L_CURL_BRACE    reduce using rule 37 (TypeList -> QualifiedIdentifier .)
    COMMA           shift and go to state 71


state 52

    (55) ClassBodyDeclaration -> STATIC . Block
    (42) Modifier -> STATIC .
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE

    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    ABSTRACT        reduce using rule 42 (Modifier -> STATIC .)
    FINAL           reduce using rule 42 (Modifier -> STATIC .)
    NATIVE          reduce using rule 42 (Modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 42 (Modifier -> STATIC .)
    TRANSIENT       reduce using rule 42 (Modifier -> STATIC .)
    VOLATILE        reduce using rule 42 (Modifier -> STATIC .)
    STRICTFP        reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)
    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    L_CURL_BRACE    shift and go to state 57

    Block                          shift and go to state 72

state 53

    (53) ClassBodyDeclaration -> SEMICOLON .

    SEMICOLON       reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    STATIC          reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    L_CURL_BRACE    reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    PUBLIC          reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    PROTECTED       reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    PRIVATE         reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    ABSTRACT        reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    FINAL           reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    NATIVE          reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    TRANSIENT       reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    VOLATILE        reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    STRICTFP        reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    VOID            reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    CLASS           reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    BYTE            reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    SHORT           reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    CHAR            reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    INT             reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    LONG            reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    FLOAT           reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    DOUBLE          reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    BOOLEAN         reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)
    R_CURL_BRACE    reduce using rule 53 (ClassBodyDeclaration -> SEMICOLON .)


state 54

    (51) classBodyDeclaration -> ClassBodyDeclaration . classBodyDeclaration
    (51) classBodyDeclaration -> . ClassBodyDeclaration classBodyDeclaration
    (52) classBodyDeclaration -> .
    (53) ClassBodyDeclaration -> . SEMICOLON
    (54) ClassBodyDeclaration -> . modifier MemberDecl
    (55) ClassBodyDeclaration -> . STATIC Block
    (56) ClassBodyDeclaration -> . Block
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP

    R_CURL_BRACE    reduce using rule 52 (classBodyDeclaration -> .)
    SEMICOLON       shift and go to state 53
    STATIC          shift and go to state 52
    VOID            reduce using rule 26 (modifier -> .)
    CLASS           reduce using rule 26 (modifier -> .)
    BYTE            reduce using rule 26 (modifier -> .)
    SHORT           reduce using rule 26 (modifier -> .)
    CHAR            reduce using rule 26 (modifier -> .)
    INT             reduce using rule 26 (modifier -> .)
    LONG            reduce using rule 26 (modifier -> .)
    FLOAT           reduce using rule 26 (modifier -> .)
    DOUBLE          reduce using rule 26 (modifier -> .)
    BOOLEAN         reduce using rule 26 (modifier -> .)
    IDENTIFIER      reduce using rule 26 (modifier -> .)
    L_CURL_BRACE    shift and go to state 57
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    ABSTRACT        shift and go to state 19
    FINAL           shift and go to state 18
    NATIVE          shift and go to state 24
    SYNCHRONIZED    shift and go to state 10
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16

    modifier                       shift and go to state 56
    classBodyDeclaration           shift and go to state 73
    ClassBodyDeclaration           shift and go to state 54
    Modifier                       shift and go to state 14
    Block                          shift and go to state 58

state 55

    (50) ClassBody -> L_CURL_BRACE classBodyDeclaration . R_CURL_BRACE

    R_CURL_BRACE    shift and go to state 74


state 56

    (54) ClassBodyDeclaration -> modifier . MemberDecl
    (57) MemberDecl -> . MethodOrFieldDecl
    (58) MemberDecl -> . VOID IDENTIFIER VoidMethodDeclaratorRest
    (59) MemberDecl -> . ClassDeclaration
    (60) MethodOrFieldDecl -> . Type IDENTIFIER MethodOrFieldRest
    (18) ClassDeclaration -> . NormalClassDeclaration
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (19) NormalClassDeclaration -> . CLASS IDENTIFIER ClassBody
    (20) NormalClassDeclaration -> . CLASS IDENTIFIER EXTENDS Type ClassBody
    (21) NormalClassDeclaration -> . CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody
    (22) NormalClassDeclaration -> . CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    VOID            shift and go to state 75
    CLASS           shift and go to state 34
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

    NormalClassDeclaration         shift and go to state 32
    BasicType                      shift and go to state 61
    QualifiedIdentifier            shift and go to state 62
    ClassDeclaration               shift and go to state 78
    MemberDecl                     shift and go to state 77
    MethodOrFieldDecl              shift and go to state 79
    Type                           shift and go to state 76

state 57

    (95) Block -> L_CURL_BRACE . BlockStatements R_CURL_BRACE
    (96) BlockStatements -> . BlockStatement BlockStatements
    (97) BlockStatements -> .
    (98) BlockStatement -> . LocalVariableDeclarationStatement
    (99) BlockStatement -> . ClassOrInterfaceDeclaration
    (100) BlockStatement -> . Statement
    (101) BlockStatement -> . IDENTIFIER COLON Statement
    (102) LocalVariableDeclarationStatement -> . Type VariableDeclarators SEMICOLON
    (103) LocalVariableDeclarationStatement -> . variableModifier Type VariableDeclarators SEMICOLON
    (17) ClassOrInterfaceDeclaration -> . modifier ClassDeclaration
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    R_CURL_BRACE    reduce using rule 97 (BlockStatements -> .)
    IDENTIFIER      shift and go to state 103
    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 83
    FINAL           shift and go to state 92
    CLASS           reduce using rule 26 (modifier -> .)
    L_CURL_BRACE    shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 21
    ABSTRACT        shift and go to state 19
    NATIVE          shift and go to state 24
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85

  ! BYTE            [ reduce using rule 76 (variableModifier -> .) ]
  ! SHORT           [ reduce using rule 76 (variableModifier -> .) ]
  ! CHAR            [ reduce using rule 76 (variableModifier -> .) ]
  ! INT             [ reduce using rule 76 (variableModifier -> .) ]
  ! LONG            [ reduce using rule 76 (variableModifier -> .) ]
  ! FLOAT           [ reduce using rule 76 (variableModifier -> .) ]
  ! DOUBLE          [ reduce using rule 76 (variableModifier -> .) ]
  ! BOOLEAN         [ reduce using rule 76 (variableModifier -> .) ]
  ! IDENTIFIER      [ reduce using rule 76 (variableModifier -> .) ]

    PrefixOp                       shift and go to state 84
    StatementExpression            shift and go to state 88
    Statement                      shift and go to state 89
    Type                           shift and go to state 91
    BasicType                      shift and go to state 96
    BlockStatements                shift and go to state 99
    LocalVariableDeclarationStatement shift and go to state 100
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 106
    BlockStatement                 shift and go to state 101
    variableModifier               shift and go to state 109
    Literal                        shift and go to state 94
    Modifier                       shift and go to state 14
    Expression                     shift and go to state 111
    Block                          shift and go to state 112
    ClassOrInterfaceDeclaration    shift and go to state 115
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86
    modifier                       shift and go to state 22

state 58

    (56) ClassBodyDeclaration -> Block .

    SEMICOLON       reduce using rule 56 (ClassBodyDeclaration -> Block .)
    STATIC          reduce using rule 56 (ClassBodyDeclaration -> Block .)
    L_CURL_BRACE    reduce using rule 56 (ClassBodyDeclaration -> Block .)
    PUBLIC          reduce using rule 56 (ClassBodyDeclaration -> Block .)
    PROTECTED       reduce using rule 56 (ClassBodyDeclaration -> Block .)
    PRIVATE         reduce using rule 56 (ClassBodyDeclaration -> Block .)
    ABSTRACT        reduce using rule 56 (ClassBodyDeclaration -> Block .)
    FINAL           reduce using rule 56 (ClassBodyDeclaration -> Block .)
    NATIVE          reduce using rule 56 (ClassBodyDeclaration -> Block .)
    SYNCHRONIZED    reduce using rule 56 (ClassBodyDeclaration -> Block .)
    TRANSIENT       reduce using rule 56 (ClassBodyDeclaration -> Block .)
    VOLATILE        reduce using rule 56 (ClassBodyDeclaration -> Block .)
    STRICTFP        reduce using rule 56 (ClassBodyDeclaration -> Block .)
    VOID            reduce using rule 56 (ClassBodyDeclaration -> Block .)
    CLASS           reduce using rule 56 (ClassBodyDeclaration -> Block .)
    BYTE            reduce using rule 56 (ClassBodyDeclaration -> Block .)
    SHORT           reduce using rule 56 (ClassBodyDeclaration -> Block .)
    CHAR            reduce using rule 56 (ClassBodyDeclaration -> Block .)
    INT             reduce using rule 56 (ClassBodyDeclaration -> Block .)
    LONG            reduce using rule 56 (ClassBodyDeclaration -> Block .)
    FLOAT           reduce using rule 56 (ClassBodyDeclaration -> Block .)
    DOUBLE          reduce using rule 56 (ClassBodyDeclaration -> Block .)
    BOOLEAN         reduce using rule 56 (ClassBodyDeclaration -> Block .)
    IDENTIFIER      reduce using rule 56 (ClassBodyDeclaration -> Block .)
    R_CURL_BRACE    reduce using rule 56 (ClassBodyDeclaration -> Block .)


state 59

    (30) BasicType -> SHORT .

    L_SQUARE_BRACE  reduce using rule 30 (BasicType -> SHORT .)
    DOT             reduce using rule 30 (BasicType -> SHORT .)
    IDENTIFIER      reduce using rule 30 (BasicType -> SHORT .)
    R_BRACE         reduce using rule 30 (BasicType -> SHORT .)
    EXPLAMETARY     reduce using rule 30 (BasicType -> SHORT .)
    ASSIGNMENT      reduce using rule 30 (BasicType -> SHORT .)
    PLUS_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    MINUS_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    TIMES_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    DIVIDE_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    AND_ASSIGNMENT  reduce using rule 30 (BasicType -> SHORT .)
    OR_ASSIGNMENT   reduce using rule 30 (BasicType -> SHORT .)
    POWER_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    MOD_ASSIGNMENT  reduce using rule 30 (BasicType -> SHORT .)
    L_SHIFT_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    R_SHIFT_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    RR_SHIFT_ASSIGNMENT reduce using rule 30 (BasicType -> SHORT .)
    SEMICOLON       reduce using rule 30 (BasicType -> SHORT .)
    COLON           reduce using rule 30 (BasicType -> SHORT .)
    COMMA           reduce using rule 30 (BasicType -> SHORT .)
    L_BRACE         reduce using rule 30 (BasicType -> SHORT .)
    R_SQUARE_BRACE  reduce using rule 30 (BasicType -> SHORT .)
    IMPLEMENTS      reduce using rule 30 (BasicType -> SHORT .)
    L_CURL_BRACE    reduce using rule 30 (BasicType -> SHORT .)


state 60

    (35) BasicType -> DOUBLE .

    L_SQUARE_BRACE  reduce using rule 35 (BasicType -> DOUBLE .)
    DOT             reduce using rule 35 (BasicType -> DOUBLE .)
    IDENTIFIER      reduce using rule 35 (BasicType -> DOUBLE .)
    R_BRACE         reduce using rule 35 (BasicType -> DOUBLE .)
    EXPLAMETARY     reduce using rule 35 (BasicType -> DOUBLE .)
    ASSIGNMENT      reduce using rule 35 (BasicType -> DOUBLE .)
    PLUS_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    MINUS_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    TIMES_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    DIVIDE_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    AND_ASSIGNMENT  reduce using rule 35 (BasicType -> DOUBLE .)
    OR_ASSIGNMENT   reduce using rule 35 (BasicType -> DOUBLE .)
    POWER_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    MOD_ASSIGNMENT  reduce using rule 35 (BasicType -> DOUBLE .)
    L_SHIFT_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    R_SHIFT_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    RR_SHIFT_ASSIGNMENT reduce using rule 35 (BasicType -> DOUBLE .)
    SEMICOLON       reduce using rule 35 (BasicType -> DOUBLE .)
    COLON           reduce using rule 35 (BasicType -> DOUBLE .)
    COMMA           reduce using rule 35 (BasicType -> DOUBLE .)
    L_BRACE         reduce using rule 35 (BasicType -> DOUBLE .)
    R_SQUARE_BRACE  reduce using rule 35 (BasicType -> DOUBLE .)
    IMPLEMENTS      reduce using rule 35 (BasicType -> DOUBLE .)
    L_CURL_BRACE    reduce using rule 35 (BasicType -> DOUBLE .)


state 61

    (27) Type -> BasicType . square_brace
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    IMPLEMENTS      reduce using rule 23 (square_brace -> .)
    L_CURL_BRACE    reduce using rule 23 (square_brace -> .)
    IDENTIFIER      reduce using rule 23 (square_brace -> .)
    EXPLAMETARY     reduce using rule 23 (square_brace -> .)
    ASSIGNMENT      reduce using rule 23 (square_brace -> .)
    PLUS_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    MINUS_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    TIMES_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    DIVIDE_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    AND_ASSIGNMENT  reduce using rule 23 (square_brace -> .)
    OR_ASSIGNMENT   reduce using rule 23 (square_brace -> .)
    POWER_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    MOD_ASSIGNMENT  reduce using rule 23 (square_brace -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    SEMICOLON       reduce using rule 23 (square_brace -> .)
    R_BRACE         reduce using rule 23 (square_brace -> .)
    COLON           reduce using rule 23 (square_brace -> .)
    COMMA           reduce using rule 23 (square_brace -> .)
    L_BRACE         reduce using rule 23 (square_brace -> .)
    R_SQUARE_BRACE  reduce using rule 23 (square_brace -> .)
    DOT             reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    square_brace                   shift and go to state 126

state 62

    (28) Type -> QualifiedIdentifier . square_brace
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    IMPLEMENTS      reduce using rule 23 (square_brace -> .)
    L_CURL_BRACE    reduce using rule 23 (square_brace -> .)
    IDENTIFIER      reduce using rule 23 (square_brace -> .)
    EXPLAMETARY     reduce using rule 23 (square_brace -> .)
    ASSIGNMENT      reduce using rule 23 (square_brace -> .)
    PLUS_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    MINUS_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    TIMES_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    DIVIDE_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    AND_ASSIGNMENT  reduce using rule 23 (square_brace -> .)
    OR_ASSIGNMENT   reduce using rule 23 (square_brace -> .)
    POWER_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    MOD_ASSIGNMENT  reduce using rule 23 (square_brace -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    SEMICOLON       reduce using rule 23 (square_brace -> .)
    R_BRACE         reduce using rule 23 (square_brace -> .)
    COLON           reduce using rule 23 (square_brace -> .)
    COMMA           reduce using rule 23 (square_brace -> .)
    L_BRACE         reduce using rule 23 (square_brace -> .)
    R_SQUARE_BRACE  reduce using rule 23 (square_brace -> .)
    DOT             reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    square_brace                   shift and go to state 127

state 63

    (33) BasicType -> LONG .

    L_SQUARE_BRACE  reduce using rule 33 (BasicType -> LONG .)
    DOT             reduce using rule 33 (BasicType -> LONG .)
    IDENTIFIER      reduce using rule 33 (BasicType -> LONG .)
    R_BRACE         reduce using rule 33 (BasicType -> LONG .)
    EXPLAMETARY     reduce using rule 33 (BasicType -> LONG .)
    ASSIGNMENT      reduce using rule 33 (BasicType -> LONG .)
    PLUS_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    MINUS_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    TIMES_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    DIVIDE_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    AND_ASSIGNMENT  reduce using rule 33 (BasicType -> LONG .)
    OR_ASSIGNMENT   reduce using rule 33 (BasicType -> LONG .)
    POWER_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    MOD_ASSIGNMENT  reduce using rule 33 (BasicType -> LONG .)
    L_SHIFT_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    R_SHIFT_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    RR_SHIFT_ASSIGNMENT reduce using rule 33 (BasicType -> LONG .)
    SEMICOLON       reduce using rule 33 (BasicType -> LONG .)
    COLON           reduce using rule 33 (BasicType -> LONG .)
    COMMA           reduce using rule 33 (BasicType -> LONG .)
    L_BRACE         reduce using rule 33 (BasicType -> LONG .)
    R_SQUARE_BRACE  reduce using rule 33 (BasicType -> LONG .)
    IMPLEMENTS      reduce using rule 33 (BasicType -> LONG .)
    L_CURL_BRACE    reduce using rule 33 (BasicType -> LONG .)


state 64

    (34) BasicType -> FLOAT .

    L_SQUARE_BRACE  reduce using rule 34 (BasicType -> FLOAT .)
    DOT             reduce using rule 34 (BasicType -> FLOAT .)
    IDENTIFIER      reduce using rule 34 (BasicType -> FLOAT .)
    R_BRACE         reduce using rule 34 (BasicType -> FLOAT .)
    EXPLAMETARY     reduce using rule 34 (BasicType -> FLOAT .)
    ASSIGNMENT      reduce using rule 34 (BasicType -> FLOAT .)
    PLUS_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    MINUS_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    TIMES_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    DIVIDE_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    AND_ASSIGNMENT  reduce using rule 34 (BasicType -> FLOAT .)
    OR_ASSIGNMENT   reduce using rule 34 (BasicType -> FLOAT .)
    POWER_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    MOD_ASSIGNMENT  reduce using rule 34 (BasicType -> FLOAT .)
    L_SHIFT_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    R_SHIFT_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    RR_SHIFT_ASSIGNMENT reduce using rule 34 (BasicType -> FLOAT .)
    SEMICOLON       reduce using rule 34 (BasicType -> FLOAT .)
    COLON           reduce using rule 34 (BasicType -> FLOAT .)
    COMMA           reduce using rule 34 (BasicType -> FLOAT .)
    L_BRACE         reduce using rule 34 (BasicType -> FLOAT .)
    R_SQUARE_BRACE  reduce using rule 34 (BasicType -> FLOAT .)
    IMPLEMENTS      reduce using rule 34 (BasicType -> FLOAT .)
    L_CURL_BRACE    reduce using rule 34 (BasicType -> FLOAT .)


state 65

    (31) BasicType -> CHAR .

    L_SQUARE_BRACE  reduce using rule 31 (BasicType -> CHAR .)
    DOT             reduce using rule 31 (BasicType -> CHAR .)
    IDENTIFIER      reduce using rule 31 (BasicType -> CHAR .)
    R_BRACE         reduce using rule 31 (BasicType -> CHAR .)
    EXPLAMETARY     reduce using rule 31 (BasicType -> CHAR .)
    ASSIGNMENT      reduce using rule 31 (BasicType -> CHAR .)
    PLUS_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    MINUS_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    TIMES_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    DIVIDE_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    AND_ASSIGNMENT  reduce using rule 31 (BasicType -> CHAR .)
    OR_ASSIGNMENT   reduce using rule 31 (BasicType -> CHAR .)
    POWER_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    MOD_ASSIGNMENT  reduce using rule 31 (BasicType -> CHAR .)
    L_SHIFT_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    R_SHIFT_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    RR_SHIFT_ASSIGNMENT reduce using rule 31 (BasicType -> CHAR .)
    SEMICOLON       reduce using rule 31 (BasicType -> CHAR .)
    COLON           reduce using rule 31 (BasicType -> CHAR .)
    COMMA           reduce using rule 31 (BasicType -> CHAR .)
    L_BRACE         reduce using rule 31 (BasicType -> CHAR .)
    R_SQUARE_BRACE  reduce using rule 31 (BasicType -> CHAR .)
    IMPLEMENTS      reduce using rule 31 (BasicType -> CHAR .)
    L_CURL_BRACE    reduce using rule 31 (BasicType -> CHAR .)


state 66

    (32) BasicType -> INT .

    L_SQUARE_BRACE  reduce using rule 32 (BasicType -> INT .)
    DOT             reduce using rule 32 (BasicType -> INT .)
    IDENTIFIER      reduce using rule 32 (BasicType -> INT .)
    R_BRACE         reduce using rule 32 (BasicType -> INT .)
    EXPLAMETARY     reduce using rule 32 (BasicType -> INT .)
    ASSIGNMENT      reduce using rule 32 (BasicType -> INT .)
    PLUS_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    MINUS_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    TIMES_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    DIVIDE_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    AND_ASSIGNMENT  reduce using rule 32 (BasicType -> INT .)
    OR_ASSIGNMENT   reduce using rule 32 (BasicType -> INT .)
    POWER_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    MOD_ASSIGNMENT  reduce using rule 32 (BasicType -> INT .)
    L_SHIFT_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    R_SHIFT_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    RR_SHIFT_ASSIGNMENT reduce using rule 32 (BasicType -> INT .)
    SEMICOLON       reduce using rule 32 (BasicType -> INT .)
    COLON           reduce using rule 32 (BasicType -> INT .)
    COMMA           reduce using rule 32 (BasicType -> INT .)
    L_BRACE         reduce using rule 32 (BasicType -> INT .)
    R_SQUARE_BRACE  reduce using rule 32 (BasicType -> INT .)
    IMPLEMENTS      reduce using rule 32 (BasicType -> INT .)
    L_CURL_BRACE    reduce using rule 32 (BasicType -> INT .)


state 67

    (36) BasicType -> BOOLEAN .

    L_SQUARE_BRACE  reduce using rule 36 (BasicType -> BOOLEAN .)
    DOT             reduce using rule 36 (BasicType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 36 (BasicType -> BOOLEAN .)
    R_BRACE         reduce using rule 36 (BasicType -> BOOLEAN .)
    EXPLAMETARY     reduce using rule 36 (BasicType -> BOOLEAN .)
    ASSIGNMENT      reduce using rule 36 (BasicType -> BOOLEAN .)
    PLUS_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    MINUS_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    TIMES_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    DIVIDE_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    AND_ASSIGNMENT  reduce using rule 36 (BasicType -> BOOLEAN .)
    OR_ASSIGNMENT   reduce using rule 36 (BasicType -> BOOLEAN .)
    POWER_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    MOD_ASSIGNMENT  reduce using rule 36 (BasicType -> BOOLEAN .)
    L_SHIFT_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    R_SHIFT_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    RR_SHIFT_ASSIGNMENT reduce using rule 36 (BasicType -> BOOLEAN .)
    SEMICOLON       reduce using rule 36 (BasicType -> BOOLEAN .)
    COLON           reduce using rule 36 (BasicType -> BOOLEAN .)
    COMMA           reduce using rule 36 (BasicType -> BOOLEAN .)
    L_BRACE         reduce using rule 36 (BasicType -> BOOLEAN .)
    R_SQUARE_BRACE  reduce using rule 36 (BasicType -> BOOLEAN .)
    IMPLEMENTS      reduce using rule 36 (BasicType -> BOOLEAN .)
    L_CURL_BRACE    reduce using rule 36 (BasicType -> BOOLEAN .)


state 68

    (29) BasicType -> BYTE .

    L_SQUARE_BRACE  reduce using rule 29 (BasicType -> BYTE .)
    DOT             reduce using rule 29 (BasicType -> BYTE .)
    IDENTIFIER      reduce using rule 29 (BasicType -> BYTE .)
    R_BRACE         reduce using rule 29 (BasicType -> BYTE .)
    EXPLAMETARY     reduce using rule 29 (BasicType -> BYTE .)
    ASSIGNMENT      reduce using rule 29 (BasicType -> BYTE .)
    PLUS_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    MINUS_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    TIMES_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    DIVIDE_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    AND_ASSIGNMENT  reduce using rule 29 (BasicType -> BYTE .)
    OR_ASSIGNMENT   reduce using rule 29 (BasicType -> BYTE .)
    POWER_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    MOD_ASSIGNMENT  reduce using rule 29 (BasicType -> BYTE .)
    L_SHIFT_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    R_SHIFT_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    RR_SHIFT_ASSIGNMENT reduce using rule 29 (BasicType -> BYTE .)
    SEMICOLON       reduce using rule 29 (BasicType -> BYTE .)
    COLON           reduce using rule 29 (BasicType -> BYTE .)
    COMMA           reduce using rule 29 (BasicType -> BYTE .)
    L_BRACE         reduce using rule 29 (BasicType -> BYTE .)
    R_SQUARE_BRACE  reduce using rule 29 (BasicType -> BYTE .)
    IMPLEMENTS      reduce using rule 29 (BasicType -> BYTE .)
    L_CURL_BRACE    reduce using rule 29 (BasicType -> BYTE .)


state 69

    (20) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type . ClassBody
    (22) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type . IMPLEMENTS TypeList ClassBody
    (50) ClassBody -> . L_CURL_BRACE classBodyDeclaration R_CURL_BRACE

    IMPLEMENTS      shift and go to state 128
    L_CURL_BRACE    shift and go to state 46

    ClassBody                      shift and go to state 129

state 70

    (21) NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .

    SEMICOLON       reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    PUBLIC          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    PROTECTED       reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    PRIVATE         reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    STATIC          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    ABSTRACT        reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    FINAL           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    NATIVE          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    SYNCHRONIZED    reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    TRANSIENT       reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    VOLATILE        reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    STRICTFP        reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    CLASS           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    $end            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    IDENTIFIER      reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    IF              reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    ASSERT          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    SWITCH          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    WHILE           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    DO              reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    FOR             reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    BREAK           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    CONTINUE        reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    RETURN          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    THROW           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    L_CURL_BRACE    reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    BYTE            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    SHORT           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    CHAR            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    INT             reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    LONG            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    FLOAT           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    DOUBLE          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    BOOLEAN         reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    L_BRACE         reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    PLUS_PLUS       reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    MINUS_MINUS     reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    NOT             reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    CURL_DASH       reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    PLUS            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    MINUS           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    THIS            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    SUPER           reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    VOID            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    LITERAL         reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    NUMBER          reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    R_CURL_BRACE    reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    CASE            reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)
    DEFAULT         reduce using rule 21 (NormalClassDeclaration -> CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody .)


state 71

    (38) TypeList -> QualifiedIdentifier COMMA . TypeList
    (37) TypeList -> . QualifiedIdentifier
    (38) TypeList -> . QualifiedIdentifier COMMA TypeList
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    TypeList                       shift and go to state 130
    QualifiedIdentifier            shift and go to state 51

state 72

    (55) ClassBodyDeclaration -> STATIC Block .

    SEMICOLON       reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    STATIC          reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    L_CURL_BRACE    reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    PUBLIC          reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    PROTECTED       reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    PRIVATE         reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    ABSTRACT        reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    FINAL           reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    NATIVE          reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    SYNCHRONIZED    reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    TRANSIENT       reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    VOLATILE        reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    STRICTFP        reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    VOID            reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    CLASS           reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    BYTE            reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    SHORT           reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    CHAR            reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    INT             reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    LONG            reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    FLOAT           reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    DOUBLE          reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    BOOLEAN         reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    IDENTIFIER      reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)
    R_CURL_BRACE    reduce using rule 55 (ClassBodyDeclaration -> STATIC Block .)


state 73

    (51) classBodyDeclaration -> ClassBodyDeclaration classBodyDeclaration .

    R_CURL_BRACE    reduce using rule 51 (classBodyDeclaration -> ClassBodyDeclaration classBodyDeclaration .)


state 74

    (50) ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .

    SEMICOLON       reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    PUBLIC          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    PROTECTED       reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    PRIVATE         reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    STATIC          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    ABSTRACT        reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    FINAL           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    NATIVE          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    SYNCHRONIZED    reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    TRANSIENT       reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    VOLATILE        reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    STRICTFP        reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    CLASS           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    $end            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    IDENTIFIER      reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    IF              reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    ASSERT          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    SWITCH          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    WHILE           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    DO              reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    FOR             reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    BREAK           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    CONTINUE        reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    RETURN          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    THROW           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    L_CURL_BRACE    reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    BYTE            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    SHORT           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    CHAR            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    INT             reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    LONG            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    FLOAT           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    DOUBLE          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    BOOLEAN         reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    L_BRACE         reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    PLUS_PLUS       reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    MINUS_MINUS     reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    NOT             reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    CURL_DASH       reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    PLUS            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    MINUS           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    THIS            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    SUPER           reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    VOID            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    LITERAL         reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    NUMBER          reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    R_CURL_BRACE    reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    CASE            reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)
    DEFAULT         reduce using rule 50 (ClassBody -> L_CURL_BRACE classBodyDeclaration R_CURL_BRACE .)


state 75

    (58) MemberDecl -> VOID . IDENTIFIER VoidMethodDeclaratorRest

    IDENTIFIER      shift and go to state 131


state 76

    (60) MethodOrFieldDecl -> Type . IDENTIFIER MethodOrFieldRest

    IDENTIFIER      shift and go to state 132


state 77

    (54) ClassBodyDeclaration -> modifier MemberDecl .

    SEMICOLON       reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    STATIC          reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    L_CURL_BRACE    reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    PUBLIC          reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    PROTECTED       reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    PRIVATE         reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    ABSTRACT        reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    FINAL           reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    NATIVE          reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    SYNCHRONIZED    reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    TRANSIENT       reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    VOLATILE        reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    STRICTFP        reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    VOID            reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    CLASS           reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    BYTE            reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    SHORT           reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    CHAR            reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    INT             reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    LONG            reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    FLOAT           reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    DOUBLE          reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    BOOLEAN         reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    IDENTIFIER      reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)
    R_CURL_BRACE    reduce using rule 54 (ClassBodyDeclaration -> modifier MemberDecl .)


state 78

    (59) MemberDecl -> ClassDeclaration .

    SEMICOLON       reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    STATIC          reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    L_CURL_BRACE    reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    PUBLIC          reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    PROTECTED       reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    PRIVATE         reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    ABSTRACT        reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    FINAL           reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    NATIVE          reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    SYNCHRONIZED    reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    TRANSIENT       reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    VOLATILE        reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    STRICTFP        reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    VOID            reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    CLASS           reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    BYTE            reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    SHORT           reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    CHAR            reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    INT             reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    LONG            reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    FLOAT           reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    DOUBLE          reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    BOOLEAN         reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    IDENTIFIER      reduce using rule 59 (MemberDecl -> ClassDeclaration .)
    R_CURL_BRACE    reduce using rule 59 (MemberDecl -> ClassDeclaration .)


state 79

    (57) MemberDecl -> MethodOrFieldDecl .

    SEMICOLON       reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    STATIC          reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    L_CURL_BRACE    reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    PUBLIC          reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    PROTECTED       reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    PRIVATE         reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    ABSTRACT        reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    FINAL           reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    NATIVE          reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    SYNCHRONIZED    reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    TRANSIENT       reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    VOLATILE        reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    STRICTFP        reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    VOID            reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    CLASS           reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    BYTE            reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    SHORT           reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    CHAR            reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    INT             reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    LONG            reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    FLOAT           reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    DOUBLE          reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    BOOLEAN         reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    IDENTIFIER      reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)
    R_CURL_BRACE    reduce using rule 57 (MemberDecl -> MethodOrFieldDecl .)


state 80

    (113) Statement -> DO . Statement WHILE ParExpression SEMICOLON
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 134
    L_CURL_BRACE    shift and go to state 57
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    Statement                      shift and go to state 135
    BasicType                      shift and go to state 133
    Block                          shift and go to state 112
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 88
    Expression                     shift and go to state 111
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 81

    (189) Expression3 -> L_BRACE . Expression R_BRACE Expression3
    (190) Expression3 -> L_BRACE . Type R_BRACE Expression3
    (212) ParExpression -> L_BRACE . Expression R_BRACE
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE

    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85

    PrefixOp                       shift and go to state 84
    Expression                     shift and go to state 138
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 96
    QualifiedIdentifier            shift and go to state 106
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Type                           shift and go to state 137

state 82

    (119) Statement -> RETURN . SEMICOLON
    (120) Statement -> RETURN . Expression SEMICOLON
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 139
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 140

state 83

    (122) Statement -> SYNCHRONIZED . ParExpression Block
    (46) Modifier -> SYNCHRONIZED .
    (212) ParExpression -> . L_BRACE Expression R_BRACE

    PUBLIC          reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 46 (Modifier -> SYNCHRONIZED .)
    L_BRACE         shift and go to state 142

    ParExpression                  shift and go to state 141

state 84

    (188) Expression3 -> PrefixOp . Expression3
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression3                    shift and go to state 143

state 85

    (211) Literal -> NUMBER .

    DOT             reduce using rule 211 (Literal -> NUMBER .)
    PLUS_PLUS       reduce using rule 211 (Literal -> NUMBER .)
    MINUS_MINUS     reduce using rule 211 (Literal -> NUMBER .)
    INSTANCEOF      reduce using rule 211 (Literal -> NUMBER .)
    OR              reduce using rule 211 (Literal -> NUMBER .)
    AND             reduce using rule 211 (Literal -> NUMBER .)
    POWER           reduce using rule 211 (Literal -> NUMBER .)
    EQUAL           reduce using rule 211 (Literal -> NUMBER .)
    NOT_EQUAL       reduce using rule 211 (Literal -> NUMBER .)
    LT              reduce using rule 211 (Literal -> NUMBER .)
    GT              reduce using rule 211 (Literal -> NUMBER .)
    LE              reduce using rule 211 (Literal -> NUMBER .)
    GE              reduce using rule 211 (Literal -> NUMBER .)
    L_SHIFT         reduce using rule 211 (Literal -> NUMBER .)
    R_SHIFT         reduce using rule 211 (Literal -> NUMBER .)
    RR_SHIFT        reduce using rule 211 (Literal -> NUMBER .)
    PLUS            reduce using rule 211 (Literal -> NUMBER .)
    MINUS           reduce using rule 211 (Literal -> NUMBER .)
    TIMES           reduce using rule 211 (Literal -> NUMBER .)
    DIVIDE          reduce using rule 211 (Literal -> NUMBER .)
    MOD             reduce using rule 211 (Literal -> NUMBER .)
    EXPLAMETARY     reduce using rule 211 (Literal -> NUMBER .)
    ASSIGNMENT      reduce using rule 211 (Literal -> NUMBER .)
    PLUS_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    MINUS_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    TIMES_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    DIVIDE_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    AND_ASSIGNMENT  reduce using rule 211 (Literal -> NUMBER .)
    OR_ASSIGNMENT   reduce using rule 211 (Literal -> NUMBER .)
    POWER_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    MOD_ASSIGNMENT  reduce using rule 211 (Literal -> NUMBER .)
    L_SHIFT_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    R_SHIFT_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    RR_SHIFT_ASSIGNMENT reduce using rule 211 (Literal -> NUMBER .)
    COMMA           reduce using rule 211 (Literal -> NUMBER .)
    SEMICOLON       reduce using rule 211 (Literal -> NUMBER .)
    R_BRACE         reduce using rule 211 (Literal -> NUMBER .)
    COLON           reduce using rule 211 (Literal -> NUMBER .)
    L_BRACE         reduce using rule 211 (Literal -> NUMBER .)
    R_SQUARE_BRACE  reduce using rule 211 (Literal -> NUMBER .)


state 86

    (191) Expression3 -> Primary . DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> Primary . postfixOp
    (186) postfixOp -> . PostfixOp postfixOp
    (187) postfixOp -> .
    (199) PostfixOp -> . PLUS_PLUS
    (200) PostfixOp -> . MINUS_MINUS

    DOT             shift and go to state 147
    INSTANCEOF      reduce using rule 187 (postfixOp -> .)
    OR              reduce using rule 187 (postfixOp -> .)
    AND             reduce using rule 187 (postfixOp -> .)
    POWER           reduce using rule 187 (postfixOp -> .)
    EQUAL           reduce using rule 187 (postfixOp -> .)
    NOT_EQUAL       reduce using rule 187 (postfixOp -> .)
    LT              reduce using rule 187 (postfixOp -> .)
    GT              reduce using rule 187 (postfixOp -> .)
    LE              reduce using rule 187 (postfixOp -> .)
    GE              reduce using rule 187 (postfixOp -> .)
    L_SHIFT         reduce using rule 187 (postfixOp -> .)
    R_SHIFT         reduce using rule 187 (postfixOp -> .)
    RR_SHIFT        reduce using rule 187 (postfixOp -> .)
    PLUS            reduce using rule 187 (postfixOp -> .)
    MINUS           reduce using rule 187 (postfixOp -> .)
    TIMES           reduce using rule 187 (postfixOp -> .)
    DIVIDE          reduce using rule 187 (postfixOp -> .)
    MOD             reduce using rule 187 (postfixOp -> .)
    EXPLAMETARY     reduce using rule 187 (postfixOp -> .)
    ASSIGNMENT      reduce using rule 187 (postfixOp -> .)
    PLUS_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    MINUS_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    TIMES_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    DIVIDE_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    AND_ASSIGNMENT  reduce using rule 187 (postfixOp -> .)
    OR_ASSIGNMENT   reduce using rule 187 (postfixOp -> .)
    POWER_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    MOD_ASSIGNMENT  reduce using rule 187 (postfixOp -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    SEMICOLON       reduce using rule 187 (postfixOp -> .)
    R_BRACE         reduce using rule 187 (postfixOp -> .)
    COLON           reduce using rule 187 (postfixOp -> .)
    COMMA           reduce using rule 187 (postfixOp -> .)
    L_BRACE         reduce using rule 187 (postfixOp -> .)
    R_SQUARE_BRACE  reduce using rule 187 (postfixOp -> .)
    PLUS_PLUS       shift and go to state 145
    MINUS_MINUS     shift and go to state 144

    PostfixOp                      shift and go to state 148
    postfixOp                      shift and go to state 146

state 87

    (109) Statement -> ASSERT . Expression SEMICOLON
    (110) Statement -> ASSERT . Expression COLON Expression SEMICOLON
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 149

state 88

    (106) Statement -> StatementExpression . SEMICOLON

    SEMICOLON       shift and go to state 150


state 89

    (100) BlockStatement -> Statement .

    IDENTIFIER      reduce using rule 100 (BlockStatement -> Statement .)
    SEMICOLON       reduce using rule 100 (BlockStatement -> Statement .)
    IF              reduce using rule 100 (BlockStatement -> Statement .)
    ASSERT          reduce using rule 100 (BlockStatement -> Statement .)
    SWITCH          reduce using rule 100 (BlockStatement -> Statement .)
    WHILE           reduce using rule 100 (BlockStatement -> Statement .)
    DO              reduce using rule 100 (BlockStatement -> Statement .)
    FOR             reduce using rule 100 (BlockStatement -> Statement .)
    BREAK           reduce using rule 100 (BlockStatement -> Statement .)
    CONTINUE        reduce using rule 100 (BlockStatement -> Statement .)
    RETURN          reduce using rule 100 (BlockStatement -> Statement .)
    THROW           reduce using rule 100 (BlockStatement -> Statement .)
    SYNCHRONIZED    reduce using rule 100 (BlockStatement -> Statement .)
    FINAL           reduce using rule 100 (BlockStatement -> Statement .)
    L_CURL_BRACE    reduce using rule 100 (BlockStatement -> Statement .)
    BYTE            reduce using rule 100 (BlockStatement -> Statement .)
    SHORT           reduce using rule 100 (BlockStatement -> Statement .)
    CHAR            reduce using rule 100 (BlockStatement -> Statement .)
    INT             reduce using rule 100 (BlockStatement -> Statement .)
    LONG            reduce using rule 100 (BlockStatement -> Statement .)
    FLOAT           reduce using rule 100 (BlockStatement -> Statement .)
    DOUBLE          reduce using rule 100 (BlockStatement -> Statement .)
    BOOLEAN         reduce using rule 100 (BlockStatement -> Statement .)
    PUBLIC          reduce using rule 100 (BlockStatement -> Statement .)
    PROTECTED       reduce using rule 100 (BlockStatement -> Statement .)
    PRIVATE         reduce using rule 100 (BlockStatement -> Statement .)
    STATIC          reduce using rule 100 (BlockStatement -> Statement .)
    ABSTRACT        reduce using rule 100 (BlockStatement -> Statement .)
    NATIVE          reduce using rule 100 (BlockStatement -> Statement .)
    TRANSIENT       reduce using rule 100 (BlockStatement -> Statement .)
    VOLATILE        reduce using rule 100 (BlockStatement -> Statement .)
    STRICTFP        reduce using rule 100 (BlockStatement -> Statement .)
    L_BRACE         reduce using rule 100 (BlockStatement -> Statement .)
    PLUS_PLUS       reduce using rule 100 (BlockStatement -> Statement .)
    MINUS_MINUS     reduce using rule 100 (BlockStatement -> Statement .)
    NOT             reduce using rule 100 (BlockStatement -> Statement .)
    CURL_DASH       reduce using rule 100 (BlockStatement -> Statement .)
    PLUS            reduce using rule 100 (BlockStatement -> Statement .)
    MINUS           reduce using rule 100 (BlockStatement -> Statement .)
    THIS            reduce using rule 100 (BlockStatement -> Statement .)
    SUPER           reduce using rule 100 (BlockStatement -> Statement .)
    VOID            reduce using rule 100 (BlockStatement -> Statement .)
    LITERAL         reduce using rule 100 (BlockStatement -> Statement .)
    NUMBER          reduce using rule 100 (BlockStatement -> Statement .)
    CLASS           reduce using rule 100 (BlockStatement -> Statement .)
    R_CURL_BRACE    reduce using rule 100 (BlockStatement -> Statement .)
    CASE            reduce using rule 100 (BlockStatement -> Statement .)
    DEFAULT         reduce using rule 100 (BlockStatement -> Statement .)


state 90

    (196) PrefixOp -> CURL_DASH .

    L_BRACE         reduce using rule 196 (PrefixOp -> CURL_DASH .)
    PLUS_PLUS       reduce using rule 196 (PrefixOp -> CURL_DASH .)
    MINUS_MINUS     reduce using rule 196 (PrefixOp -> CURL_DASH .)
    NOT             reduce using rule 196 (PrefixOp -> CURL_DASH .)
    CURL_DASH       reduce using rule 196 (PrefixOp -> CURL_DASH .)
    PLUS            reduce using rule 196 (PrefixOp -> CURL_DASH .)
    MINUS           reduce using rule 196 (PrefixOp -> CURL_DASH .)
    THIS            reduce using rule 196 (PrefixOp -> CURL_DASH .)
    SUPER           reduce using rule 196 (PrefixOp -> CURL_DASH .)
    VOID            reduce using rule 196 (PrefixOp -> CURL_DASH .)
    LITERAL         reduce using rule 196 (PrefixOp -> CURL_DASH .)
    NUMBER          reduce using rule 196 (PrefixOp -> CURL_DASH .)
    IDENTIFIER      reduce using rule 196 (PrefixOp -> CURL_DASH .)
    BYTE            reduce using rule 196 (PrefixOp -> CURL_DASH .)
    SHORT           reduce using rule 196 (PrefixOp -> CURL_DASH .)
    CHAR            reduce using rule 196 (PrefixOp -> CURL_DASH .)
    INT             reduce using rule 196 (PrefixOp -> CURL_DASH .)
    LONG            reduce using rule 196 (PrefixOp -> CURL_DASH .)
    FLOAT           reduce using rule 196 (PrefixOp -> CURL_DASH .)
    DOUBLE          reduce using rule 196 (PrefixOp -> CURL_DASH .)
    BOOLEAN         reduce using rule 196 (PrefixOp -> CURL_DASH .)


state 91

    (102) LocalVariableDeclarationStatement -> Type . VariableDeclarators SEMICOLON
    (84) VariableDeclarators -> . VariableDeclarator
    (85) VariableDeclarators -> . VariableDeclarator COMMA VariableDeclarators
    (86) VariableDeclarator -> . IDENTIFIER VariableDeclaratorRest

    IDENTIFIER      shift and go to state 152

    VariableDeclarator             shift and go to state 153
    VariableDeclarators            shift and go to state 151

state 92

    (77) variableModifier -> FINAL . variableModifier
    (44) Modifier -> FINAL .
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier

  ! shift/reduce conflict for FINAL resolved as shift
    PUBLIC          reduce using rule 44 (Modifier -> FINAL .)
    PROTECTED       reduce using rule 44 (Modifier -> FINAL .)
    PRIVATE         reduce using rule 44 (Modifier -> FINAL .)
    STATIC          reduce using rule 44 (Modifier -> FINAL .)
    ABSTRACT        reduce using rule 44 (Modifier -> FINAL .)
    NATIVE          reduce using rule 44 (Modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 44 (Modifier -> FINAL .)
    TRANSIENT       reduce using rule 44 (Modifier -> FINAL .)
    VOLATILE        reduce using rule 44 (Modifier -> FINAL .)
    STRICTFP        reduce using rule 44 (Modifier -> FINAL .)
    CLASS           reduce using rule 44 (Modifier -> FINAL .)
    BYTE            reduce using rule 76 (variableModifier -> .)
    SHORT           reduce using rule 76 (variableModifier -> .)
    CHAR            reduce using rule 76 (variableModifier -> .)
    INT             reduce using rule 76 (variableModifier -> .)
    LONG            reduce using rule 76 (variableModifier -> .)
    FLOAT           reduce using rule 76 (variableModifier -> .)
    DOUBLE          reduce using rule 76 (variableModifier -> .)
    BOOLEAN         reduce using rule 76 (variableModifier -> .)
    IDENTIFIER      reduce using rule 76 (variableModifier -> .)
    FINAL           shift and go to state 155

  ! FINAL           [ reduce using rule 44 (Modifier -> FINAL .) ]

    variableModifier               shift and go to state 154

state 93

    (105) Statement -> SEMICOLON .

    ELSE            reduce using rule 105 (Statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 105 (Statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 105 (Statement -> SEMICOLON .)
    IF              reduce using rule 105 (Statement -> SEMICOLON .)
    ASSERT          reduce using rule 105 (Statement -> SEMICOLON .)
    SWITCH          reduce using rule 105 (Statement -> SEMICOLON .)
    WHILE           reduce using rule 105 (Statement -> SEMICOLON .)
    DO              reduce using rule 105 (Statement -> SEMICOLON .)
    FOR             reduce using rule 105 (Statement -> SEMICOLON .)
    BREAK           reduce using rule 105 (Statement -> SEMICOLON .)
    CONTINUE        reduce using rule 105 (Statement -> SEMICOLON .)
    RETURN          reduce using rule 105 (Statement -> SEMICOLON .)
    THROW           reduce using rule 105 (Statement -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 105 (Statement -> SEMICOLON .)
    FINAL           reduce using rule 105 (Statement -> SEMICOLON .)
    L_CURL_BRACE    reduce using rule 105 (Statement -> SEMICOLON .)
    BYTE            reduce using rule 105 (Statement -> SEMICOLON .)
    SHORT           reduce using rule 105 (Statement -> SEMICOLON .)
    CHAR            reduce using rule 105 (Statement -> SEMICOLON .)
    INT             reduce using rule 105 (Statement -> SEMICOLON .)
    LONG            reduce using rule 105 (Statement -> SEMICOLON .)
    FLOAT           reduce using rule 105 (Statement -> SEMICOLON .)
    DOUBLE          reduce using rule 105 (Statement -> SEMICOLON .)
    BOOLEAN         reduce using rule 105 (Statement -> SEMICOLON .)
    PUBLIC          reduce using rule 105 (Statement -> SEMICOLON .)
    PROTECTED       reduce using rule 105 (Statement -> SEMICOLON .)
    PRIVATE         reduce using rule 105 (Statement -> SEMICOLON .)
    STATIC          reduce using rule 105 (Statement -> SEMICOLON .)
    ABSTRACT        reduce using rule 105 (Statement -> SEMICOLON .)
    NATIVE          reduce using rule 105 (Statement -> SEMICOLON .)
    TRANSIENT       reduce using rule 105 (Statement -> SEMICOLON .)
    VOLATILE        reduce using rule 105 (Statement -> SEMICOLON .)
    STRICTFP        reduce using rule 105 (Statement -> SEMICOLON .)
    L_BRACE         reduce using rule 105 (Statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 105 (Statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 105 (Statement -> SEMICOLON .)
    NOT             reduce using rule 105 (Statement -> SEMICOLON .)
    CURL_DASH       reduce using rule 105 (Statement -> SEMICOLON .)
    PLUS            reduce using rule 105 (Statement -> SEMICOLON .)
    MINUS           reduce using rule 105 (Statement -> SEMICOLON .)
    THIS            reduce using rule 105 (Statement -> SEMICOLON .)
    SUPER           reduce using rule 105 (Statement -> SEMICOLON .)
    VOID            reduce using rule 105 (Statement -> SEMICOLON .)
    LITERAL         reduce using rule 105 (Statement -> SEMICOLON .)
    NUMBER          reduce using rule 105 (Statement -> SEMICOLON .)
    CLASS           reduce using rule 105 (Statement -> SEMICOLON .)
    R_CURL_BRACE    reduce using rule 105 (Statement -> SEMICOLON .)
    CASE            reduce using rule 105 (Statement -> SEMICOLON .)
    DEFAULT         reduce using rule 105 (Statement -> SEMICOLON .)


state 94

    (201) Primary -> Literal .

    DOT             reduce using rule 201 (Primary -> Literal .)
    PLUS_PLUS       reduce using rule 201 (Primary -> Literal .)
    MINUS_MINUS     reduce using rule 201 (Primary -> Literal .)
    INSTANCEOF      reduce using rule 201 (Primary -> Literal .)
    OR              reduce using rule 201 (Primary -> Literal .)
    AND             reduce using rule 201 (Primary -> Literal .)
    POWER           reduce using rule 201 (Primary -> Literal .)
    EQUAL           reduce using rule 201 (Primary -> Literal .)
    NOT_EQUAL       reduce using rule 201 (Primary -> Literal .)
    LT              reduce using rule 201 (Primary -> Literal .)
    GT              reduce using rule 201 (Primary -> Literal .)
    LE              reduce using rule 201 (Primary -> Literal .)
    GE              reduce using rule 201 (Primary -> Literal .)
    L_SHIFT         reduce using rule 201 (Primary -> Literal .)
    R_SHIFT         reduce using rule 201 (Primary -> Literal .)
    RR_SHIFT        reduce using rule 201 (Primary -> Literal .)
    PLUS            reduce using rule 201 (Primary -> Literal .)
    MINUS           reduce using rule 201 (Primary -> Literal .)
    TIMES           reduce using rule 201 (Primary -> Literal .)
    DIVIDE          reduce using rule 201 (Primary -> Literal .)
    MOD             reduce using rule 201 (Primary -> Literal .)
    EXPLAMETARY     reduce using rule 201 (Primary -> Literal .)
    ASSIGNMENT      reduce using rule 201 (Primary -> Literal .)
    PLUS_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    MINUS_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    TIMES_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    DIVIDE_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    AND_ASSIGNMENT  reduce using rule 201 (Primary -> Literal .)
    OR_ASSIGNMENT   reduce using rule 201 (Primary -> Literal .)
    POWER_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    MOD_ASSIGNMENT  reduce using rule 201 (Primary -> Literal .)
    L_SHIFT_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    R_SHIFT_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    RR_SHIFT_ASSIGNMENT reduce using rule 201 (Primary -> Literal .)
    SEMICOLON       reduce using rule 201 (Primary -> Literal .)
    COMMA           reduce using rule 201 (Primary -> Literal .)
    R_BRACE         reduce using rule 201 (Primary -> Literal .)
    L_BRACE         reduce using rule 201 (Primary -> Literal .)
    COLON           reduce using rule 201 (Primary -> Literal .)
    R_SQUARE_BRACE  reduce using rule 201 (Primary -> Literal .)


state 95

    (210) Literal -> LITERAL .

    DOT             reduce using rule 210 (Literal -> LITERAL .)
    PLUS_PLUS       reduce using rule 210 (Literal -> LITERAL .)
    MINUS_MINUS     reduce using rule 210 (Literal -> LITERAL .)
    INSTANCEOF      reduce using rule 210 (Literal -> LITERAL .)
    OR              reduce using rule 210 (Literal -> LITERAL .)
    AND             reduce using rule 210 (Literal -> LITERAL .)
    POWER           reduce using rule 210 (Literal -> LITERAL .)
    EQUAL           reduce using rule 210 (Literal -> LITERAL .)
    NOT_EQUAL       reduce using rule 210 (Literal -> LITERAL .)
    LT              reduce using rule 210 (Literal -> LITERAL .)
    GT              reduce using rule 210 (Literal -> LITERAL .)
    LE              reduce using rule 210 (Literal -> LITERAL .)
    GE              reduce using rule 210 (Literal -> LITERAL .)
    L_SHIFT         reduce using rule 210 (Literal -> LITERAL .)
    R_SHIFT         reduce using rule 210 (Literal -> LITERAL .)
    RR_SHIFT        reduce using rule 210 (Literal -> LITERAL .)
    PLUS            reduce using rule 210 (Literal -> LITERAL .)
    MINUS           reduce using rule 210 (Literal -> LITERAL .)
    TIMES           reduce using rule 210 (Literal -> LITERAL .)
    DIVIDE          reduce using rule 210 (Literal -> LITERAL .)
    MOD             reduce using rule 210 (Literal -> LITERAL .)
    EXPLAMETARY     reduce using rule 210 (Literal -> LITERAL .)
    ASSIGNMENT      reduce using rule 210 (Literal -> LITERAL .)
    PLUS_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    MINUS_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    TIMES_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    DIVIDE_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    AND_ASSIGNMENT  reduce using rule 210 (Literal -> LITERAL .)
    OR_ASSIGNMENT   reduce using rule 210 (Literal -> LITERAL .)
    POWER_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    MOD_ASSIGNMENT  reduce using rule 210 (Literal -> LITERAL .)
    L_SHIFT_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    R_SHIFT_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    RR_SHIFT_ASSIGNMENT reduce using rule 210 (Literal -> LITERAL .)
    COMMA           reduce using rule 210 (Literal -> LITERAL .)
    SEMICOLON       reduce using rule 210 (Literal -> LITERAL .)
    R_BRACE         reduce using rule 210 (Literal -> LITERAL .)
    COLON           reduce using rule 210 (Literal -> LITERAL .)
    L_BRACE         reduce using rule 210 (Literal -> LITERAL .)
    R_SQUARE_BRACE  reduce using rule 210 (Literal -> LITERAL .)


state 96

    (27) Type -> BasicType . square_brace
    (208) Primary -> BasicType . square_brace DOT CLASS
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    DOT             reduce using rule 23 (square_brace -> .)
    IDENTIFIER      reduce using rule 23 (square_brace -> .)
    R_BRACE         reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    square_brace                   shift and go to state 156

state 97

    (197) PrefixOp -> PLUS .

    L_BRACE         reduce using rule 197 (PrefixOp -> PLUS .)
    PLUS_PLUS       reduce using rule 197 (PrefixOp -> PLUS .)
    MINUS_MINUS     reduce using rule 197 (PrefixOp -> PLUS .)
    NOT             reduce using rule 197 (PrefixOp -> PLUS .)
    CURL_DASH       reduce using rule 197 (PrefixOp -> PLUS .)
    PLUS            reduce using rule 197 (PrefixOp -> PLUS .)
    MINUS           reduce using rule 197 (PrefixOp -> PLUS .)
    THIS            reduce using rule 197 (PrefixOp -> PLUS .)
    SUPER           reduce using rule 197 (PrefixOp -> PLUS .)
    VOID            reduce using rule 197 (PrefixOp -> PLUS .)
    LITERAL         reduce using rule 197 (PrefixOp -> PLUS .)
    NUMBER          reduce using rule 197 (PrefixOp -> PLUS .)
    IDENTIFIER      reduce using rule 197 (PrefixOp -> PLUS .)
    BYTE            reduce using rule 197 (PrefixOp -> PLUS .)
    SHORT           reduce using rule 197 (PrefixOp -> PLUS .)
    CHAR            reduce using rule 197 (PrefixOp -> PLUS .)
    INT             reduce using rule 197 (PrefixOp -> PLUS .)
    LONG            reduce using rule 197 (PrefixOp -> PLUS .)
    FLOAT           reduce using rule 197 (PrefixOp -> PLUS .)
    DOUBLE          reduce using rule 197 (PrefixOp -> PLUS .)
    BOOLEAN         reduce using rule 197 (PrefixOp -> PLUS .)


state 98

    (111) Statement -> SWITCH . ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (212) ParExpression -> . L_BRACE Expression R_BRACE

    L_BRACE         shift and go to state 142

    ParExpression                  shift and go to state 157

state 99

    (95) Block -> L_CURL_BRACE BlockStatements . R_CURL_BRACE

    R_CURL_BRACE    shift and go to state 158


state 100

    (98) BlockStatement -> LocalVariableDeclarationStatement .

    IDENTIFIER      reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    SEMICOLON       reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    ASSERT          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    THROW           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    SYNCHRONIZED    reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    FINAL           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    L_CURL_BRACE    reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    PUBLIC          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    PROTECTED       reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    PRIVATE         reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    STATIC          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    ABSTRACT        reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    NATIVE          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    TRANSIENT       reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    VOLATILE        reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    STRICTFP        reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    L_BRACE         reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    PLUS_PLUS       reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    MINUS_MINUS     reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    NOT             reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    CURL_DASH       reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    PLUS            reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    MINUS           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    LITERAL         reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    NUMBER          reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    CLASS           reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    R_CURL_BRACE    reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 98 (BlockStatement -> LocalVariableDeclarationStatement .)


state 101

    (96) BlockStatements -> BlockStatement . BlockStatements
    (96) BlockStatements -> . BlockStatement BlockStatements
    (97) BlockStatements -> .
    (98) BlockStatement -> . LocalVariableDeclarationStatement
    (99) BlockStatement -> . ClassOrInterfaceDeclaration
    (100) BlockStatement -> . Statement
    (101) BlockStatement -> . IDENTIFIER COLON Statement
    (102) LocalVariableDeclarationStatement -> . Type VariableDeclarators SEMICOLON
    (103) LocalVariableDeclarationStatement -> . variableModifier Type VariableDeclarators SEMICOLON
    (17) ClassOrInterfaceDeclaration -> . modifier ClassDeclaration
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    R_CURL_BRACE    reduce using rule 97 (BlockStatements -> .)
    CASE            reduce using rule 97 (BlockStatements -> .)
    DEFAULT         reduce using rule 97 (BlockStatements -> .)
    IDENTIFIER      shift and go to state 103
    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 83
    FINAL           shift and go to state 92
    CLASS           reduce using rule 26 (modifier -> .)
    L_CURL_BRACE    shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 21
    ABSTRACT        shift and go to state 19
    NATIVE          shift and go to state 24
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85

  ! BYTE            [ reduce using rule 76 (variableModifier -> .) ]
  ! SHORT           [ reduce using rule 76 (variableModifier -> .) ]
  ! CHAR            [ reduce using rule 76 (variableModifier -> .) ]
  ! INT             [ reduce using rule 76 (variableModifier -> .) ]
  ! LONG            [ reduce using rule 76 (variableModifier -> .) ]
  ! FLOAT           [ reduce using rule 76 (variableModifier -> .) ]
  ! DOUBLE          [ reduce using rule 76 (variableModifier -> .) ]
  ! BOOLEAN         [ reduce using rule 76 (variableModifier -> .) ]
  ! IDENTIFIER      [ reduce using rule 76 (variableModifier -> .) ]

    PrefixOp                       shift and go to state 84
    StatementExpression            shift and go to state 88
    Statement                      shift and go to state 89
    Type                           shift and go to state 91
    BasicType                      shift and go to state 96
    BlockStatements                shift and go to state 159
    LocalVariableDeclarationStatement shift and go to state 100
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 106
    BlockStatement                 shift and go to state 101
    variableModifier               shift and go to state 109
    Literal                        shift and go to state 94
    Modifier                       shift and go to state 14
    Expression                     shift and go to state 111
    Block                          shift and go to state 112
    ClassOrInterfaceDeclaration    shift and go to state 115
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86
    modifier                       shift and go to state 22

state 102

    (163) Expression2 -> Expression3 .
    (164) Expression2 -> Expression3 . Expression2Rest
    (167) Expression2Rest -> . InfixOp Expression3 infixOp_expression3
    (168) Expression2Rest -> . INSTANCEOF Type
    (169) InfixOp -> . OR
    (170) InfixOp -> . AND
    (171) InfixOp -> . POWER
    (172) InfixOp -> . EQUAL
    (173) InfixOp -> . NOT_EQUAL
    (174) InfixOp -> . LT
    (175) InfixOp -> . GT
    (176) InfixOp -> . LE
    (177) InfixOp -> . GE
    (178) InfixOp -> . L_SHIFT
    (179) InfixOp -> . R_SHIFT
    (180) InfixOp -> . RR_SHIFT
    (181) InfixOp -> . PLUS
    (182) InfixOp -> . MINUS
    (183) InfixOp -> . TIMES
    (184) InfixOp -> . DIVIDE
    (185) InfixOp -> . MOD

    EXPLAMETARY     reduce using rule 163 (Expression2 -> Expression3 .)
    ASSIGNMENT      reduce using rule 163 (Expression2 -> Expression3 .)
    PLUS_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    MINUS_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    TIMES_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    DIVIDE_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    AND_ASSIGNMENT  reduce using rule 163 (Expression2 -> Expression3 .)
    OR_ASSIGNMENT   reduce using rule 163 (Expression2 -> Expression3 .)
    POWER_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    MOD_ASSIGNMENT  reduce using rule 163 (Expression2 -> Expression3 .)
    L_SHIFT_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    R_SHIFT_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 163 (Expression2 -> Expression3 .)
    COLON           reduce using rule 163 (Expression2 -> Expression3 .)
    COMMA           reduce using rule 163 (Expression2 -> Expression3 .)
    R_SQUARE_BRACE  reduce using rule 163 (Expression2 -> Expression3 .)
    SEMICOLON       reduce using rule 163 (Expression2 -> Expression3 .)
    R_BRACE         reduce using rule 163 (Expression2 -> Expression3 .)
    L_BRACE         reduce using rule 163 (Expression2 -> Expression3 .)
    INSTANCEOF      shift and go to state 173
    OR              shift and go to state 177
    AND             shift and go to state 167
    POWER           shift and go to state 163
    EQUAL           shift and go to state 160
    NOT_EQUAL       shift and go to state 172
    LT              shift and go to state 165
    GT              shift and go to state 168
    LE              shift and go to state 162
    GE              shift and go to state 171
    L_SHIFT         shift and go to state 178
    R_SHIFT         shift and go to state 175
    RR_SHIFT        shift and go to state 164
    PLUS            shift and go to state 166
    MINUS           shift and go to state 161
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 169
    MOD             shift and go to state 179

    InfixOp                        shift and go to state 174
    Expression2Rest                shift and go to state 176

state 103

    (101) BlockStatement -> IDENTIFIER . COLON Statement
    (7) QualifiedIdentifier -> IDENTIFIER .
    (8) QualifiedIdentifier -> IDENTIFIER . DOT QualifiedIdentifier

  ! shift/reduce conflict for DOT resolved as shift
    COLON           shift and go to state 180
    L_SQUARE_BRACE  reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    L_BRACE         reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    OR              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    AND             reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    POWER           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    EQUAL           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    LT              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    GT              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    LE              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    GE              reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    L_SHIFT         reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    R_SHIFT         reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    RR_SHIFT        reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    PLUS            reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MINUS           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    TIMES           reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MOD             reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    EXPLAMETARY     reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    PLUS_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MINUS_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    TIMES_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    AND_ASSIGNMENT  reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    OR_ASSIGNMENT   reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    POWER_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    MOD_ASSIGNMENT  reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    L_SHIFT_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    R_SHIFT_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    RR_SHIFT_ASSIGNMENT reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .)
    DOT             shift and go to state 29

  ! DOT             [ reduce using rule 7 (QualifiedIdentifier -> IDENTIFIER .) ]


state 104

    (194) PrefixOp -> MINUS_MINUS .

    L_BRACE         reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    NOT             reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    CURL_DASH       reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    PLUS            reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    MINUS           reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    THIS            reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    SUPER           reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    VOID            reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    LITERAL         reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    NUMBER          reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    IDENTIFIER      reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    BYTE            reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    SHORT           reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    CHAR            reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    INT             reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    LONG            reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    FLOAT           reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    DOUBLE          reduce using rule 194 (PrefixOp -> MINUS_MINUS .)
    BOOLEAN         reduce using rule 194 (PrefixOp -> MINUS_MINUS .)


state 105

    (114) Statement -> FOR . L_BRACE ForControl R_BRACE Statement

    L_BRACE         shift and go to state 181


state 106

    (28) Type -> QualifiedIdentifier . square_brace
    (206) Primary -> QualifiedIdentifier .
    (207) Primary -> QualifiedIdentifier . IdentifierSuffix
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace
    (218) IdentifierSuffix -> . L_BRACE square_brace DOT CLASS R_BRACE
    (219) IdentifierSuffix -> . L_BRACE square_brace DOT Expression R_BRACE
    (220) IdentifierSuffix -> . Arguments
    (221) IdentifierSuffix -> . DOT CLASS
    (222) IdentifierSuffix -> . DOT THIS
    (223) IdentifierSuffix -> . DOT SUPER Arguments
    (215) Arguments -> . L_BRACE ExpressionList L_BRACE

  ! reduce/reduce conflict for R_BRACE resolved using rule 23 (square_brace -> .)
  ! shift/reduce conflict for DOT resolved as shift
    PLUS_PLUS       reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MINUS_MINUS     reduce using rule 206 (Primary -> QualifiedIdentifier .)
    INSTANCEOF      reduce using rule 206 (Primary -> QualifiedIdentifier .)
    OR              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    AND             reduce using rule 206 (Primary -> QualifiedIdentifier .)
    POWER           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    EQUAL           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    NOT_EQUAL       reduce using rule 206 (Primary -> QualifiedIdentifier .)
    LT              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    GT              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    LE              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    GE              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    L_SHIFT         reduce using rule 206 (Primary -> QualifiedIdentifier .)
    R_SHIFT         reduce using rule 206 (Primary -> QualifiedIdentifier .)
    RR_SHIFT        reduce using rule 206 (Primary -> QualifiedIdentifier .)
    PLUS            reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MINUS           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    TIMES           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    DIVIDE          reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MOD             reduce using rule 206 (Primary -> QualifiedIdentifier .)
    EXPLAMETARY     reduce using rule 206 (Primary -> QualifiedIdentifier .)
    ASSIGNMENT      reduce using rule 206 (Primary -> QualifiedIdentifier .)
    PLUS_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MINUS_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    TIMES_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    DIVIDE_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    AND_ASSIGNMENT  reduce using rule 206 (Primary -> QualifiedIdentifier .)
    OR_ASSIGNMENT   reduce using rule 206 (Primary -> QualifiedIdentifier .)
    POWER_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MOD_ASSIGNMENT  reduce using rule 206 (Primary -> QualifiedIdentifier .)
    L_SHIFT_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    R_SHIFT_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    RR_SHIFT_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    SEMICOLON       reduce using rule 206 (Primary -> QualifiedIdentifier .)
    COMMA           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    IDENTIFIER      reduce using rule 23 (square_brace -> .)
    R_BRACE         reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125
    L_BRACE         shift and go to state 183
    DOT             shift and go to state 184

  ! DOT             [ reduce using rule 206 (Primary -> QualifiedIdentifier .) ]
  ! R_BRACE         [ reduce using rule 206 (Primary -> QualifiedIdentifier .) ]

    IdentifierSuffix               shift and go to state 182
    square_brace                   shift and go to state 127
    Arguments                      shift and go to state 185

state 107

    (146) Expression -> Expression1 .
    (147) Expression -> Expression1 . AssignmentOperator Expression1
    (148) AssignmentOperator -> . ASSIGNMENT
    (149) AssignmentOperator -> . PLUS_ASSIGNMENT
    (150) AssignmentOperator -> . MINUS_ASSIGNMENT
    (151) AssignmentOperator -> . TIMES_ASSIGNMENT
    (152) AssignmentOperator -> . DIVIDE_ASSIGNMENT
    (153) AssignmentOperator -> . AND_ASSIGNMENT
    (154) AssignmentOperator -> . OR_ASSIGNMENT
    (155) AssignmentOperator -> . POWER_ASSIGNMENT
    (156) AssignmentOperator -> . MOD_ASSIGNMENT
    (157) AssignmentOperator -> . L_SHIFT_ASSIGNMENT
    (158) AssignmentOperator -> . R_SHIFT_ASSIGNMENT
    (159) AssignmentOperator -> . RR_SHIFT_ASSIGNMENT

    SEMICOLON       reduce using rule 146 (Expression -> Expression1 .)
    COMMA           reduce using rule 146 (Expression -> Expression1 .)
    L_BRACE         reduce using rule 146 (Expression -> Expression1 .)
    R_BRACE         reduce using rule 146 (Expression -> Expression1 .)
    R_SQUARE_BRACE  reduce using rule 146 (Expression -> Expression1 .)
    COLON           reduce using rule 146 (Expression -> Expression1 .)
    ASSIGNMENT      shift and go to state 188
    PLUS_ASSIGNMENT shift and go to state 194
    MINUS_ASSIGNMENT shift and go to state 192
    TIMES_ASSIGNMENT shift and go to state 198
    DIVIDE_ASSIGNMENT shift and go to state 186
    AND_ASSIGNMENT  shift and go to state 196
    OR_ASSIGNMENT   shift and go to state 191
    POWER_ASSIGNMENT shift and go to state 187
    MOD_ASSIGNMENT  shift and go to state 195
    L_SHIFT_ASSIGNMENT shift and go to state 193
    R_SHIFT_ASSIGNMENT shift and go to state 190
    RR_SHIFT_ASSIGNMENT shift and go to state 197

    AssignmentOperator             shift and go to state 189

state 108

    (209) Primary -> VOID . DOT CLASS

    DOT             shift and go to state 199


state 109

    (103) LocalVariableDeclarationStatement -> variableModifier . Type VariableDeclarators SEMICOLON
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

    BasicType                      shift and go to state 61
    QualifiedIdentifier            shift and go to state 62
    Type                           shift and go to state 200

state 110

    (198) PrefixOp -> MINUS .

    L_BRACE         reduce using rule 198 (PrefixOp -> MINUS .)
    PLUS_PLUS       reduce using rule 198 (PrefixOp -> MINUS .)
    MINUS_MINUS     reduce using rule 198 (PrefixOp -> MINUS .)
    NOT             reduce using rule 198 (PrefixOp -> MINUS .)
    CURL_DASH       reduce using rule 198 (PrefixOp -> MINUS .)
    PLUS            reduce using rule 198 (PrefixOp -> MINUS .)
    MINUS           reduce using rule 198 (PrefixOp -> MINUS .)
    THIS            reduce using rule 198 (PrefixOp -> MINUS .)
    SUPER           reduce using rule 198 (PrefixOp -> MINUS .)
    VOID            reduce using rule 198 (PrefixOp -> MINUS .)
    LITERAL         reduce using rule 198 (PrefixOp -> MINUS .)
    NUMBER          reduce using rule 198 (PrefixOp -> MINUS .)
    IDENTIFIER      reduce using rule 198 (PrefixOp -> MINUS .)
    BYTE            reduce using rule 198 (PrefixOp -> MINUS .)
    SHORT           reduce using rule 198 (PrefixOp -> MINUS .)
    CHAR            reduce using rule 198 (PrefixOp -> MINUS .)
    INT             reduce using rule 198 (PrefixOp -> MINUS .)
    LONG            reduce using rule 198 (PrefixOp -> MINUS .)
    FLOAT           reduce using rule 198 (PrefixOp -> MINUS .)
    DOUBLE          reduce using rule 198 (PrefixOp -> MINUS .)
    BOOLEAN         reduce using rule 198 (PrefixOp -> MINUS .)


state 111

    (123) StatementExpression -> Expression .

    SEMICOLON       reduce using rule 123 (StatementExpression -> Expression .)
    COMMA           reduce using rule 123 (StatementExpression -> Expression .)
    R_BRACE         reduce using rule 123 (StatementExpression -> Expression .)


state 112

    (104) Statement -> Block .

    ELSE            reduce using rule 104 (Statement -> Block .)
    IDENTIFIER      reduce using rule 104 (Statement -> Block .)
    SEMICOLON       reduce using rule 104 (Statement -> Block .)
    IF              reduce using rule 104 (Statement -> Block .)
    ASSERT          reduce using rule 104 (Statement -> Block .)
    SWITCH          reduce using rule 104 (Statement -> Block .)
    WHILE           reduce using rule 104 (Statement -> Block .)
    DO              reduce using rule 104 (Statement -> Block .)
    FOR             reduce using rule 104 (Statement -> Block .)
    BREAK           reduce using rule 104 (Statement -> Block .)
    CONTINUE        reduce using rule 104 (Statement -> Block .)
    RETURN          reduce using rule 104 (Statement -> Block .)
    THROW           reduce using rule 104 (Statement -> Block .)
    SYNCHRONIZED    reduce using rule 104 (Statement -> Block .)
    FINAL           reduce using rule 104 (Statement -> Block .)
    L_CURL_BRACE    reduce using rule 104 (Statement -> Block .)
    BYTE            reduce using rule 104 (Statement -> Block .)
    SHORT           reduce using rule 104 (Statement -> Block .)
    CHAR            reduce using rule 104 (Statement -> Block .)
    INT             reduce using rule 104 (Statement -> Block .)
    LONG            reduce using rule 104 (Statement -> Block .)
    FLOAT           reduce using rule 104 (Statement -> Block .)
    DOUBLE          reduce using rule 104 (Statement -> Block .)
    BOOLEAN         reduce using rule 104 (Statement -> Block .)
    PUBLIC          reduce using rule 104 (Statement -> Block .)
    PROTECTED       reduce using rule 104 (Statement -> Block .)
    PRIVATE         reduce using rule 104 (Statement -> Block .)
    STATIC          reduce using rule 104 (Statement -> Block .)
    ABSTRACT        reduce using rule 104 (Statement -> Block .)
    NATIVE          reduce using rule 104 (Statement -> Block .)
    TRANSIENT       reduce using rule 104 (Statement -> Block .)
    VOLATILE        reduce using rule 104 (Statement -> Block .)
    STRICTFP        reduce using rule 104 (Statement -> Block .)
    L_BRACE         reduce using rule 104 (Statement -> Block .)
    PLUS_PLUS       reduce using rule 104 (Statement -> Block .)
    MINUS_MINUS     reduce using rule 104 (Statement -> Block .)
    NOT             reduce using rule 104 (Statement -> Block .)
    CURL_DASH       reduce using rule 104 (Statement -> Block .)
    PLUS            reduce using rule 104 (Statement -> Block .)
    MINUS           reduce using rule 104 (Statement -> Block .)
    THIS            reduce using rule 104 (Statement -> Block .)
    SUPER           reduce using rule 104 (Statement -> Block .)
    VOID            reduce using rule 104 (Statement -> Block .)
    LITERAL         reduce using rule 104 (Statement -> Block .)
    NUMBER          reduce using rule 104 (Statement -> Block .)
    CLASS           reduce using rule 104 (Statement -> Block .)
    R_CURL_BRACE    reduce using rule 104 (Statement -> Block .)
    CASE            reduce using rule 104 (Statement -> Block .)
    DEFAULT         reduce using rule 104 (Statement -> Block .)


state 113

    (107) Statement -> IF . ParExpression Statement
    (108) Statement -> IF . ParExpression Statement ELSE Statement
    (212) ParExpression -> . L_BRACE Expression R_BRACE

    L_BRACE         shift and go to state 142

    ParExpression                  shift and go to state 201

state 114

    (160) Expression1 -> Expression2 .
    (161) Expression1 -> Expression2 . Expression1Rest
    (162) Expression1Rest -> . EXPLAMETARY Expression COLON Expression1

    ASSIGNMENT      reduce using rule 160 (Expression1 -> Expression2 .)
    PLUS_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    MINUS_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    TIMES_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    DIVIDE_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    AND_ASSIGNMENT  reduce using rule 160 (Expression1 -> Expression2 .)
    OR_ASSIGNMENT   reduce using rule 160 (Expression1 -> Expression2 .)
    POWER_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    MOD_ASSIGNMENT  reduce using rule 160 (Expression1 -> Expression2 .)
    L_SHIFT_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    R_SHIFT_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 160 (Expression1 -> Expression2 .)
    SEMICOLON       reduce using rule 160 (Expression1 -> Expression2 .)
    COMMA           reduce using rule 160 (Expression1 -> Expression2 .)
    R_BRACE         reduce using rule 160 (Expression1 -> Expression2 .)
    L_BRACE         reduce using rule 160 (Expression1 -> Expression2 .)
    R_SQUARE_BRACE  reduce using rule 160 (Expression1 -> Expression2 .)
    COLON           reduce using rule 160 (Expression1 -> Expression2 .)
    EXPLAMETARY     shift and go to state 203

    Expression1Rest                shift and go to state 202

state 115

    (99) BlockStatement -> ClassOrInterfaceDeclaration .

    IDENTIFIER      reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    SEMICOLON       reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    IF              reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    ASSERT          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    SWITCH          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    WHILE           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    DO              reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    FOR             reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    BREAK           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    CONTINUE        reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    RETURN          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    THROW           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    FINAL           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    L_CURL_BRACE    reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    BYTE            reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    SHORT           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    CHAR            reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    INT             reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    LONG            reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    FLOAT           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    DOUBLE          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    BOOLEAN         reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    STATIC          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    NATIVE          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    TRANSIENT       reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    VOLATILE        reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    L_BRACE         reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    PLUS_PLUS       reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    MINUS_MINUS     reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    NOT             reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    CURL_DASH       reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    PLUS            reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    MINUS           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    THIS            reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    SUPER           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    VOID            reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    LITERAL         reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    NUMBER          reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    CLASS           reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    R_CURL_BRACE    reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    CASE            reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)
    DEFAULT         reduce using rule 99 (BlockStatement -> ClassOrInterfaceDeclaration .)


state 116

    (202) Primary -> ParExpression .

    DOT             reduce using rule 202 (Primary -> ParExpression .)
    PLUS_PLUS       reduce using rule 202 (Primary -> ParExpression .)
    MINUS_MINUS     reduce using rule 202 (Primary -> ParExpression .)
    INSTANCEOF      reduce using rule 202 (Primary -> ParExpression .)
    OR              reduce using rule 202 (Primary -> ParExpression .)
    AND             reduce using rule 202 (Primary -> ParExpression .)
    POWER           reduce using rule 202 (Primary -> ParExpression .)
    EQUAL           reduce using rule 202 (Primary -> ParExpression .)
    NOT_EQUAL       reduce using rule 202 (Primary -> ParExpression .)
    LT              reduce using rule 202 (Primary -> ParExpression .)
    GT              reduce using rule 202 (Primary -> ParExpression .)
    LE              reduce using rule 202 (Primary -> ParExpression .)
    GE              reduce using rule 202 (Primary -> ParExpression .)
    L_SHIFT         reduce using rule 202 (Primary -> ParExpression .)
    R_SHIFT         reduce using rule 202 (Primary -> ParExpression .)
    RR_SHIFT        reduce using rule 202 (Primary -> ParExpression .)
    PLUS            reduce using rule 202 (Primary -> ParExpression .)
    MINUS           reduce using rule 202 (Primary -> ParExpression .)
    TIMES           reduce using rule 202 (Primary -> ParExpression .)
    DIVIDE          reduce using rule 202 (Primary -> ParExpression .)
    MOD             reduce using rule 202 (Primary -> ParExpression .)
    EXPLAMETARY     reduce using rule 202 (Primary -> ParExpression .)
    ASSIGNMENT      reduce using rule 202 (Primary -> ParExpression .)
    PLUS_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    MINUS_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    TIMES_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    DIVIDE_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    AND_ASSIGNMENT  reduce using rule 202 (Primary -> ParExpression .)
    OR_ASSIGNMENT   reduce using rule 202 (Primary -> ParExpression .)
    POWER_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    MOD_ASSIGNMENT  reduce using rule 202 (Primary -> ParExpression .)
    L_SHIFT_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    R_SHIFT_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    RR_SHIFT_ASSIGNMENT reduce using rule 202 (Primary -> ParExpression .)
    SEMICOLON       reduce using rule 202 (Primary -> ParExpression .)
    COMMA           reduce using rule 202 (Primary -> ParExpression .)
    R_BRACE         reduce using rule 202 (Primary -> ParExpression .)
    L_BRACE         reduce using rule 202 (Primary -> ParExpression .)
    COLON           reduce using rule 202 (Primary -> ParExpression .)
    R_SQUARE_BRACE  reduce using rule 202 (Primary -> ParExpression .)


state 117

    (112) Statement -> WHILE . ParExpression Statement
    (212) ParExpression -> . L_BRACE Expression R_BRACE

    L_BRACE         shift and go to state 142

    ParExpression                  shift and go to state 204

state 118

    (121) Statement -> THROW . Expression SEMICOLON
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 205

state 119

    (115) Statement -> BREAK . SEMICOLON
    (116) Statement -> BREAK . IDENTIFIER SEMICOLON

    SEMICOLON       shift and go to state 207
    IDENTIFIER      shift and go to state 206


state 120

    (203) Primary -> THIS .
    (204) Primary -> THIS . Arguments
    (215) Arguments -> . L_BRACE ExpressionList L_BRACE

  ! shift/reduce conflict for L_BRACE resolved as shift
    DOT             reduce using rule 203 (Primary -> THIS .)
    PLUS_PLUS       reduce using rule 203 (Primary -> THIS .)
    MINUS_MINUS     reduce using rule 203 (Primary -> THIS .)
    INSTANCEOF      reduce using rule 203 (Primary -> THIS .)
    OR              reduce using rule 203 (Primary -> THIS .)
    AND             reduce using rule 203 (Primary -> THIS .)
    POWER           reduce using rule 203 (Primary -> THIS .)
    EQUAL           reduce using rule 203 (Primary -> THIS .)
    NOT_EQUAL       reduce using rule 203 (Primary -> THIS .)
    LT              reduce using rule 203 (Primary -> THIS .)
    GT              reduce using rule 203 (Primary -> THIS .)
    LE              reduce using rule 203 (Primary -> THIS .)
    GE              reduce using rule 203 (Primary -> THIS .)
    L_SHIFT         reduce using rule 203 (Primary -> THIS .)
    R_SHIFT         reduce using rule 203 (Primary -> THIS .)
    RR_SHIFT        reduce using rule 203 (Primary -> THIS .)
    PLUS            reduce using rule 203 (Primary -> THIS .)
    MINUS           reduce using rule 203 (Primary -> THIS .)
    TIMES           reduce using rule 203 (Primary -> THIS .)
    DIVIDE          reduce using rule 203 (Primary -> THIS .)
    MOD             reduce using rule 203 (Primary -> THIS .)
    EXPLAMETARY     reduce using rule 203 (Primary -> THIS .)
    ASSIGNMENT      reduce using rule 203 (Primary -> THIS .)
    PLUS_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    MINUS_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    TIMES_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    DIVIDE_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    AND_ASSIGNMENT  reduce using rule 203 (Primary -> THIS .)
    OR_ASSIGNMENT   reduce using rule 203 (Primary -> THIS .)
    POWER_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    MOD_ASSIGNMENT  reduce using rule 203 (Primary -> THIS .)
    L_SHIFT_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    R_SHIFT_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    RR_SHIFT_ASSIGNMENT reduce using rule 203 (Primary -> THIS .)
    SEMICOLON       reduce using rule 203 (Primary -> THIS .)
    COMMA           reduce using rule 203 (Primary -> THIS .)
    R_BRACE         reduce using rule 203 (Primary -> THIS .)
    COLON           reduce using rule 203 (Primary -> THIS .)
    R_SQUARE_BRACE  reduce using rule 203 (Primary -> THIS .)
    L_BRACE         shift and go to state 208

  ! L_BRACE         [ reduce using rule 203 (Primary -> THIS .) ]

    Arguments                      shift and go to state 209

state 121

    (117) Statement -> CONTINUE . SEMICOLON
    (118) Statement -> CONTINUE . IDENTIFIER SEMICOLON

    SEMICOLON       shift and go to state 211
    IDENTIFIER      shift and go to state 210


state 122

    (193) PrefixOp -> PLUS_PLUS .

    L_BRACE         reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    NOT             reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    CURL_DASH       reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    PLUS            reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    MINUS           reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    THIS            reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    SUPER           reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    VOID            reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    LITERAL         reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    NUMBER          reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    IDENTIFIER      reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    BYTE            reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    SHORT           reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    CHAR            reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    INT             reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    LONG            reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    FLOAT           reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    DOUBLE          reduce using rule 193 (PrefixOp -> PLUS_PLUS .)
    BOOLEAN         reduce using rule 193 (PrefixOp -> PLUS_PLUS .)


state 123

    (195) PrefixOp -> NOT .

    L_BRACE         reduce using rule 195 (PrefixOp -> NOT .)
    PLUS_PLUS       reduce using rule 195 (PrefixOp -> NOT .)
    MINUS_MINUS     reduce using rule 195 (PrefixOp -> NOT .)
    NOT             reduce using rule 195 (PrefixOp -> NOT .)
    CURL_DASH       reduce using rule 195 (PrefixOp -> NOT .)
    PLUS            reduce using rule 195 (PrefixOp -> NOT .)
    MINUS           reduce using rule 195 (PrefixOp -> NOT .)
    THIS            reduce using rule 195 (PrefixOp -> NOT .)
    SUPER           reduce using rule 195 (PrefixOp -> NOT .)
    VOID            reduce using rule 195 (PrefixOp -> NOT .)
    LITERAL         reduce using rule 195 (PrefixOp -> NOT .)
    NUMBER          reduce using rule 195 (PrefixOp -> NOT .)
    IDENTIFIER      reduce using rule 195 (PrefixOp -> NOT .)
    BYTE            reduce using rule 195 (PrefixOp -> NOT .)
    SHORT           reduce using rule 195 (PrefixOp -> NOT .)
    CHAR            reduce using rule 195 (PrefixOp -> NOT .)
    INT             reduce using rule 195 (PrefixOp -> NOT .)
    LONG            reduce using rule 195 (PrefixOp -> NOT .)
    FLOAT           reduce using rule 195 (PrefixOp -> NOT .)
    DOUBLE          reduce using rule 195 (PrefixOp -> NOT .)
    BOOLEAN         reduce using rule 195 (PrefixOp -> NOT .)


state 124

    (205) Primary -> SUPER . SuperSuffix
    (216) SuperSuffix -> . Arguments
    (217) SuperSuffix -> . DOT IDENTIFIER Arguments
    (215) Arguments -> . L_BRACE ExpressionList L_BRACE

    DOT             shift and go to state 214
    L_BRACE         shift and go to state 208

    SuperSuffix                    shift and go to state 212
    Arguments                      shift and go to state 213

state 125

    (24) square_brace -> L_SQUARE_BRACE . R_SQUARE_BRACE square_brace

    R_SQUARE_BRACE  shift and go to state 215


state 126

    (27) Type -> BasicType square_brace .

    DOT             reduce using rule 27 (Type -> BasicType square_brace .)
    IDENTIFIER      reduce using rule 27 (Type -> BasicType square_brace .)
    EXPLAMETARY     reduce using rule 27 (Type -> BasicType square_brace .)
    ASSIGNMENT      reduce using rule 27 (Type -> BasicType square_brace .)
    PLUS_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    MINUS_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    TIMES_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    DIVIDE_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    AND_ASSIGNMENT  reduce using rule 27 (Type -> BasicType square_brace .)
    OR_ASSIGNMENT   reduce using rule 27 (Type -> BasicType square_brace .)
    POWER_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    MOD_ASSIGNMENT  reduce using rule 27 (Type -> BasicType square_brace .)
    L_SHIFT_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    R_SHIFT_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    RR_SHIFT_ASSIGNMENT reduce using rule 27 (Type -> BasicType square_brace .)
    SEMICOLON       reduce using rule 27 (Type -> BasicType square_brace .)
    R_BRACE         reduce using rule 27 (Type -> BasicType square_brace .)
    COLON           reduce using rule 27 (Type -> BasicType square_brace .)
    COMMA           reduce using rule 27 (Type -> BasicType square_brace .)
    L_BRACE         reduce using rule 27 (Type -> BasicType square_brace .)
    R_SQUARE_BRACE  reduce using rule 27 (Type -> BasicType square_brace .)
    IMPLEMENTS      reduce using rule 27 (Type -> BasicType square_brace .)
    L_CURL_BRACE    reduce using rule 27 (Type -> BasicType square_brace .)


state 127

    (28) Type -> QualifiedIdentifier square_brace .

    DOT             reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    IDENTIFIER      reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    EXPLAMETARY     reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    ASSIGNMENT      reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    PLUS_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    MINUS_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    TIMES_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    DIVIDE_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    AND_ASSIGNMENT  reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    OR_ASSIGNMENT   reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    POWER_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    MOD_ASSIGNMENT  reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    L_SHIFT_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    R_SHIFT_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    RR_SHIFT_ASSIGNMENT reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    SEMICOLON       reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    R_BRACE         reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    COLON           reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    COMMA           reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    L_BRACE         reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    R_SQUARE_BRACE  reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    IMPLEMENTS      reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)
    L_CURL_BRACE    reduce using rule 28 (Type -> QualifiedIdentifier square_brace .)


state 128

    (22) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS . TypeList ClassBody
    (37) TypeList -> . QualifiedIdentifier
    (38) TypeList -> . QualifiedIdentifier COMMA TypeList
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    TypeList                       shift and go to state 216
    QualifiedIdentifier            shift and go to state 51

state 129

    (20) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .

    SEMICOLON       reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    PUBLIC          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    PROTECTED       reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    PRIVATE         reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    STATIC          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    ABSTRACT        reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    FINAL           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    NATIVE          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    SYNCHRONIZED    reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    TRANSIENT       reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    VOLATILE        reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    STRICTFP        reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    CLASS           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    $end            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    IDENTIFIER      reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    IF              reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    ASSERT          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    SWITCH          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    WHILE           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    DO              reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    FOR             reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    BREAK           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    CONTINUE        reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    RETURN          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    THROW           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    L_CURL_BRACE    reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    BYTE            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    SHORT           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    CHAR            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    INT             reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    LONG            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    FLOAT           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    DOUBLE          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    BOOLEAN         reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    L_BRACE         reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    PLUS_PLUS       reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    MINUS_MINUS     reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    NOT             reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    CURL_DASH       reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    PLUS            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    MINUS           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    THIS            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    SUPER           reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    VOID            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    LITERAL         reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    NUMBER          reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    R_CURL_BRACE    reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    CASE            reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)
    DEFAULT         reduce using rule 20 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type ClassBody .)


state 130

    (38) TypeList -> QualifiedIdentifier COMMA TypeList .

    L_CURL_BRACE    reduce using rule 38 (TypeList -> QualifiedIdentifier COMMA TypeList .)


state 131

    (58) MemberDecl -> VOID IDENTIFIER . VoidMethodDeclaratorRest
    (70) VoidMethodDeclaratorRest -> . FormalParameters Block
    (71) VoidMethodDeclaratorRest -> . FormalParameters SEMICOLON
    (72) VoidMethodDeclaratorRest -> . FormalParameters THROWS QualifiedIdentifierList Block
    (73) VoidMethodDeclaratorRest -> . FormalParameters THROWS QualifiedIdentifierList SEMICOLON
    (74) FormalParameters -> . L_BRACE R_BRACE
    (75) FormalParameters -> . L_BRACE FormalParameterDecls R_BRACE

    L_BRACE         shift and go to state 217

    FormalParameters               shift and go to state 218
    VoidMethodDeclaratorRest       shift and go to state 219

state 132

    (60) MethodOrFieldDecl -> Type IDENTIFIER . MethodOrFieldRest
    (61) MethodOrFieldRest -> . FieldDeclaratorsRest SEMICOLON
    (62) MethodOrFieldRest -> . MethodDeclaratorRest
    (65) FieldDeclaratorsRest -> . VariableDeclaratorRest variableDeclarator
    (66) MethodDeclaratorRest -> . FormalParameters Block
    (67) MethodDeclaratorRest -> . FormalParameters SEMICOLON
    (68) MethodDeclaratorRest -> . FormalParameters THROWS QualifiedIdentifierList Block
    (69) MethodDeclaratorRest -> . FormalParameters THROWS QualifiedIdentifierList SEMICOLON
    (87) VariableDeclaratorRest -> . square_brace
    (88) VariableDeclaratorRest -> . square_brace ASSIGNMENT VariableInitializer
    (74) FormalParameters -> . L_BRACE R_BRACE
    (75) FormalParameters -> . L_BRACE FormalParameterDecls R_BRACE
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    L_BRACE         shift and go to state 217
    ASSIGNMENT      reduce using rule 23 (square_brace -> .)
    COMMA           reduce using rule 23 (square_brace -> .)
    SEMICOLON       reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    square_brace                   shift and go to state 221
    FieldDeclaratorsRest           shift and go to state 220
    FormalParameters               shift and go to state 222
    MethodDeclaratorRest           shift and go to state 223
    VariableDeclaratorRest         shift and go to state 224
    MethodOrFieldRest              shift and go to state 225

state 133

    (208) Primary -> BasicType . square_brace DOT CLASS
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    DOT             reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    square_brace                   shift and go to state 226

state 134

    (122) Statement -> SYNCHRONIZED . ParExpression Block
    (212) ParExpression -> . L_BRACE Expression R_BRACE

    L_BRACE         shift and go to state 142

    ParExpression                  shift and go to state 141

state 135

    (113) Statement -> DO Statement . WHILE ParExpression SEMICOLON

    WHILE           shift and go to state 227


state 136

    (206) Primary -> QualifiedIdentifier .
    (207) Primary -> QualifiedIdentifier . IdentifierSuffix
    (218) IdentifierSuffix -> . L_BRACE square_brace DOT CLASS R_BRACE
    (219) IdentifierSuffix -> . L_BRACE square_brace DOT Expression R_BRACE
    (220) IdentifierSuffix -> . Arguments
    (221) IdentifierSuffix -> . DOT CLASS
    (222) IdentifierSuffix -> . DOT THIS
    (223) IdentifierSuffix -> . DOT SUPER Arguments
    (215) Arguments -> . L_BRACE ExpressionList L_BRACE

  ! shift/reduce conflict for L_BRACE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    PLUS_PLUS       reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MINUS_MINUS     reduce using rule 206 (Primary -> QualifiedIdentifier .)
    INSTANCEOF      reduce using rule 206 (Primary -> QualifiedIdentifier .)
    OR              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    AND             reduce using rule 206 (Primary -> QualifiedIdentifier .)
    POWER           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    EQUAL           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    NOT_EQUAL       reduce using rule 206 (Primary -> QualifiedIdentifier .)
    LT              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    GT              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    LE              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    GE              reduce using rule 206 (Primary -> QualifiedIdentifier .)
    L_SHIFT         reduce using rule 206 (Primary -> QualifiedIdentifier .)
    R_SHIFT         reduce using rule 206 (Primary -> QualifiedIdentifier .)
    RR_SHIFT        reduce using rule 206 (Primary -> QualifiedIdentifier .)
    PLUS            reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MINUS           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    TIMES           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    DIVIDE          reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MOD             reduce using rule 206 (Primary -> QualifiedIdentifier .)
    EXPLAMETARY     reduce using rule 206 (Primary -> QualifiedIdentifier .)
    ASSIGNMENT      reduce using rule 206 (Primary -> QualifiedIdentifier .)
    PLUS_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MINUS_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    TIMES_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    DIVIDE_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    AND_ASSIGNMENT  reduce using rule 206 (Primary -> QualifiedIdentifier .)
    OR_ASSIGNMENT   reduce using rule 206 (Primary -> QualifiedIdentifier .)
    POWER_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    MOD_ASSIGNMENT  reduce using rule 206 (Primary -> QualifiedIdentifier .)
    L_SHIFT_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    R_SHIFT_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    RR_SHIFT_ASSIGNMENT reduce using rule 206 (Primary -> QualifiedIdentifier .)
    SEMICOLON       reduce using rule 206 (Primary -> QualifiedIdentifier .)
    COMMA           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    R_BRACE         reduce using rule 206 (Primary -> QualifiedIdentifier .)
    COLON           reduce using rule 206 (Primary -> QualifiedIdentifier .)
    R_SQUARE_BRACE  reduce using rule 206 (Primary -> QualifiedIdentifier .)
    L_BRACE         shift and go to state 183
    DOT             shift and go to state 184

  ! DOT             [ reduce using rule 206 (Primary -> QualifiedIdentifier .) ]
  ! L_BRACE         [ reduce using rule 206 (Primary -> QualifiedIdentifier .) ]

    IdentifierSuffix               shift and go to state 182
    Arguments                      shift and go to state 185

state 137

    (190) Expression3 -> L_BRACE Type . R_BRACE Expression3

    R_BRACE         shift and go to state 228


state 138

    (189) Expression3 -> L_BRACE Expression . R_BRACE Expression3
    (212) ParExpression -> L_BRACE Expression . R_BRACE

    R_BRACE         shift and go to state 229


state 139

    (119) Statement -> RETURN SEMICOLON .

    ELSE            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    IF              reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    ASSERT          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    DO              reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    THROW           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    FINAL           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    L_CURL_BRACE    reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    BYTE            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    INT             reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    BOOLEAN         reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    PUBLIC          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    PROTECTED       reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    PRIVATE         reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    ABSTRACT        reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    NATIVE          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    TRANSIENT       reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    VOLATILE        reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    STRICTFP        reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    L_BRACE         reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    PLUS_PLUS       reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    MINUS_MINUS     reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    CURL_DASH       reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    SUPER           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    LITERAL         reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    R_CURL_BRACE    reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 119 (Statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 119 (Statement -> RETURN SEMICOLON .)


state 140

    (120) Statement -> RETURN Expression . SEMICOLON

    SEMICOLON       shift and go to state 230


state 141

    (122) Statement -> SYNCHRONIZED ParExpression . Block
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE

    L_CURL_BRACE    shift and go to state 57

    Block                          shift and go to state 231

state 142

    (212) ParExpression -> L_BRACE . Expression R_BRACE
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 232

state 143

    (188) Expression3 -> PrefixOp Expression3 .

    INSTANCEOF      reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    OR              reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    AND             reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    POWER           reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    EQUAL           reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    NOT_EQUAL       reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    LT              reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    GT              reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    LE              reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    GE              reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    L_SHIFT         reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    R_SHIFT         reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    RR_SHIFT        reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    PLUS            reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    MINUS           reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    TIMES           reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    DIVIDE          reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    MOD             reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    EXPLAMETARY     reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    ASSIGNMENT      reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    PLUS_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    MINUS_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    TIMES_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    DIVIDE_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    AND_ASSIGNMENT  reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    OR_ASSIGNMENT   reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    POWER_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    MOD_ASSIGNMENT  reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    L_SHIFT_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    R_SHIFT_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    COMMA           reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    L_BRACE         reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    R_BRACE         reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    R_SQUARE_BRACE  reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    SEMICOLON       reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)
    COLON           reduce using rule 188 (Expression3 -> PrefixOp Expression3 .)


state 144

    (200) PostfixOp -> MINUS_MINUS .

    PLUS_PLUS       reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    INSTANCEOF      reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    OR              reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    AND             reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    POWER           reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    EQUAL           reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    NOT_EQUAL       reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    LT              reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    GT              reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    LE              reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    GE              reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    L_SHIFT         reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    R_SHIFT         reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    RR_SHIFT        reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    PLUS            reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    MINUS           reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    TIMES           reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    DIVIDE          reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    MOD             reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    EXPLAMETARY     reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    ASSIGNMENT      reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    PLUS_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    MINUS_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    TIMES_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    DIVIDE_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    AND_ASSIGNMENT  reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    OR_ASSIGNMENT   reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    POWER_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    MOD_ASSIGNMENT  reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    L_SHIFT_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    R_SHIFT_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    RR_SHIFT_ASSIGNMENT reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    SEMICOLON       reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    R_BRACE         reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    COLON           reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    COMMA           reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    L_BRACE         reduce using rule 200 (PostfixOp -> MINUS_MINUS .)
    R_SQUARE_BRACE  reduce using rule 200 (PostfixOp -> MINUS_MINUS .)


state 145

    (199) PostfixOp -> PLUS_PLUS .

    PLUS_PLUS       reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    INSTANCEOF      reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    OR              reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    AND             reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    POWER           reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    EQUAL           reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    NOT_EQUAL       reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    LT              reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    GT              reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    LE              reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    GE              reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    L_SHIFT         reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    R_SHIFT         reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    RR_SHIFT        reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    PLUS            reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    MINUS           reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    TIMES           reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    DIVIDE          reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    MOD             reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    EXPLAMETARY     reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    ASSIGNMENT      reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    PLUS_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    MINUS_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    TIMES_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    DIVIDE_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    AND_ASSIGNMENT  reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    OR_ASSIGNMENT   reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    POWER_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    MOD_ASSIGNMENT  reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    L_SHIFT_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    R_SHIFT_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    RR_SHIFT_ASSIGNMENT reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    SEMICOLON       reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    R_BRACE         reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    COLON           reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    COMMA           reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    L_BRACE         reduce using rule 199 (PostfixOp -> PLUS_PLUS .)
    R_SQUARE_BRACE  reduce using rule 199 (PostfixOp -> PLUS_PLUS .)


state 146

    (192) Expression3 -> Primary postfixOp .

    INSTANCEOF      reduce using rule 192 (Expression3 -> Primary postfixOp .)
    OR              reduce using rule 192 (Expression3 -> Primary postfixOp .)
    AND             reduce using rule 192 (Expression3 -> Primary postfixOp .)
    POWER           reduce using rule 192 (Expression3 -> Primary postfixOp .)
    EQUAL           reduce using rule 192 (Expression3 -> Primary postfixOp .)
    NOT_EQUAL       reduce using rule 192 (Expression3 -> Primary postfixOp .)
    LT              reduce using rule 192 (Expression3 -> Primary postfixOp .)
    GT              reduce using rule 192 (Expression3 -> Primary postfixOp .)
    LE              reduce using rule 192 (Expression3 -> Primary postfixOp .)
    GE              reduce using rule 192 (Expression3 -> Primary postfixOp .)
    L_SHIFT         reduce using rule 192 (Expression3 -> Primary postfixOp .)
    R_SHIFT         reduce using rule 192 (Expression3 -> Primary postfixOp .)
    RR_SHIFT        reduce using rule 192 (Expression3 -> Primary postfixOp .)
    PLUS            reduce using rule 192 (Expression3 -> Primary postfixOp .)
    MINUS           reduce using rule 192 (Expression3 -> Primary postfixOp .)
    TIMES           reduce using rule 192 (Expression3 -> Primary postfixOp .)
    DIVIDE          reduce using rule 192 (Expression3 -> Primary postfixOp .)
    MOD             reduce using rule 192 (Expression3 -> Primary postfixOp .)
    EXPLAMETARY     reduce using rule 192 (Expression3 -> Primary postfixOp .)
    ASSIGNMENT      reduce using rule 192 (Expression3 -> Primary postfixOp .)
    PLUS_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    MINUS_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    TIMES_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    DIVIDE_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    AND_ASSIGNMENT  reduce using rule 192 (Expression3 -> Primary postfixOp .)
    OR_ASSIGNMENT   reduce using rule 192 (Expression3 -> Primary postfixOp .)
    POWER_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    MOD_ASSIGNMENT  reduce using rule 192 (Expression3 -> Primary postfixOp .)
    L_SHIFT_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    R_SHIFT_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    RR_SHIFT_ASSIGNMENT reduce using rule 192 (Expression3 -> Primary postfixOp .)
    COMMA           reduce using rule 192 (Expression3 -> Primary postfixOp .)
    L_BRACE         reduce using rule 192 (Expression3 -> Primary postfixOp .)
    R_BRACE         reduce using rule 192 (Expression3 -> Primary postfixOp .)
    R_SQUARE_BRACE  reduce using rule 192 (Expression3 -> Primary postfixOp .)
    SEMICOLON       reduce using rule 192 (Expression3 -> Primary postfixOp .)
    COLON           reduce using rule 192 (Expression3 -> Primary postfixOp .)


state 147

    (191) Expression3 -> Primary DOT . QualifiedIdentifier postfixOp
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 233

state 148

    (186) postfixOp -> PostfixOp . postfixOp
    (186) postfixOp -> . PostfixOp postfixOp
    (187) postfixOp -> .
    (199) PostfixOp -> . PLUS_PLUS
    (200) PostfixOp -> . MINUS_MINUS

    INSTANCEOF      reduce using rule 187 (postfixOp -> .)
    OR              reduce using rule 187 (postfixOp -> .)
    AND             reduce using rule 187 (postfixOp -> .)
    POWER           reduce using rule 187 (postfixOp -> .)
    EQUAL           reduce using rule 187 (postfixOp -> .)
    NOT_EQUAL       reduce using rule 187 (postfixOp -> .)
    LT              reduce using rule 187 (postfixOp -> .)
    GT              reduce using rule 187 (postfixOp -> .)
    LE              reduce using rule 187 (postfixOp -> .)
    GE              reduce using rule 187 (postfixOp -> .)
    L_SHIFT         reduce using rule 187 (postfixOp -> .)
    R_SHIFT         reduce using rule 187 (postfixOp -> .)
    RR_SHIFT        reduce using rule 187 (postfixOp -> .)
    PLUS            reduce using rule 187 (postfixOp -> .)
    MINUS           reduce using rule 187 (postfixOp -> .)
    TIMES           reduce using rule 187 (postfixOp -> .)
    DIVIDE          reduce using rule 187 (postfixOp -> .)
    MOD             reduce using rule 187 (postfixOp -> .)
    EXPLAMETARY     reduce using rule 187 (postfixOp -> .)
    ASSIGNMENT      reduce using rule 187 (postfixOp -> .)
    PLUS_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    MINUS_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    TIMES_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    DIVIDE_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    AND_ASSIGNMENT  reduce using rule 187 (postfixOp -> .)
    OR_ASSIGNMENT   reduce using rule 187 (postfixOp -> .)
    POWER_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    MOD_ASSIGNMENT  reduce using rule 187 (postfixOp -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    SEMICOLON       reduce using rule 187 (postfixOp -> .)
    R_BRACE         reduce using rule 187 (postfixOp -> .)
    COLON           reduce using rule 187 (postfixOp -> .)
    COMMA           reduce using rule 187 (postfixOp -> .)
    L_BRACE         reduce using rule 187 (postfixOp -> .)
    R_SQUARE_BRACE  reduce using rule 187 (postfixOp -> .)
    PLUS_PLUS       shift and go to state 145
    MINUS_MINUS     shift and go to state 144

    postfixOp                      shift and go to state 234
    PostfixOp                      shift and go to state 148

state 149

    (109) Statement -> ASSERT Expression . SEMICOLON
    (110) Statement -> ASSERT Expression . COLON Expression SEMICOLON

    SEMICOLON       shift and go to state 236
    COLON           shift and go to state 235


state 150

    (106) Statement -> StatementExpression SEMICOLON .

    ELSE            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    IDENTIFIER      reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    SEMICOLON       reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    IF              reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    ASSERT          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    SWITCH          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    WHILE           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    DO              reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    FOR             reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    BREAK           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    CONTINUE        reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    RETURN          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    THROW           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    FINAL           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    L_CURL_BRACE    reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    BYTE            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    SHORT           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    CHAR            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    INT             reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    LONG            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    FLOAT           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    DOUBLE          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    BOOLEAN         reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    PUBLIC          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    PROTECTED       reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    PRIVATE         reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    STATIC          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    ABSTRACT        reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    NATIVE          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    TRANSIENT       reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    VOLATILE        reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    STRICTFP        reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    L_BRACE         reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    PLUS_PLUS       reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    MINUS_MINUS     reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    NOT             reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    CURL_DASH       reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    PLUS            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    MINUS           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    THIS            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    SUPER           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    VOID            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    LITERAL         reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    NUMBER          reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    CLASS           reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    R_CURL_BRACE    reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    CASE            reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)
    DEFAULT         reduce using rule 106 (Statement -> StatementExpression SEMICOLON .)


state 151

    (102) LocalVariableDeclarationStatement -> Type VariableDeclarators . SEMICOLON

    SEMICOLON       shift and go to state 237


state 152

    (86) VariableDeclarator -> IDENTIFIER . VariableDeclaratorRest
    (87) VariableDeclaratorRest -> . square_brace
    (88) VariableDeclaratorRest -> . square_brace ASSIGNMENT VariableInitializer
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    ASSIGNMENT      reduce using rule 23 (square_brace -> .)
    COMMA           reduce using rule 23 (square_brace -> .)
    SEMICOLON       reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    VariableDeclaratorRest         shift and go to state 238
    square_brace                   shift and go to state 221

state 153

    (84) VariableDeclarators -> VariableDeclarator .
    (85) VariableDeclarators -> VariableDeclarator . COMMA VariableDeclarators

    SEMICOLON       reduce using rule 84 (VariableDeclarators -> VariableDeclarator .)
    COMMA           shift and go to state 239


state 154

    (77) variableModifier -> FINAL variableModifier .

    BYTE            reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    SHORT           reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    CHAR            reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    INT             reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    LONG            reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    FLOAT           reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    DOUBLE          reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    BOOLEAN         reduce using rule 77 (variableModifier -> FINAL variableModifier .)
    IDENTIFIER      reduce using rule 77 (variableModifier -> FINAL variableModifier .)


state 155

    (77) variableModifier -> FINAL . variableModifier
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier

    BYTE            reduce using rule 76 (variableModifier -> .)
    SHORT           reduce using rule 76 (variableModifier -> .)
    CHAR            reduce using rule 76 (variableModifier -> .)
    INT             reduce using rule 76 (variableModifier -> .)
    LONG            reduce using rule 76 (variableModifier -> .)
    FLOAT           reduce using rule 76 (variableModifier -> .)
    DOUBLE          reduce using rule 76 (variableModifier -> .)
    BOOLEAN         reduce using rule 76 (variableModifier -> .)
    IDENTIFIER      reduce using rule 76 (variableModifier -> .)
    FINAL           shift and go to state 155

    variableModifier               shift and go to state 154

state 156

    (27) Type -> BasicType square_brace .
    (208) Primary -> BasicType square_brace . DOT CLASS

    IDENTIFIER      reduce using rule 27 (Type -> BasicType square_brace .)
    R_BRACE         reduce using rule 27 (Type -> BasicType square_brace .)
    DOT             shift and go to state 240


state 157

    (111) Statement -> SWITCH ParExpression . L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE

    L_CURL_BRACE    shift and go to state 241


state 158

    (95) Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .

    IDENTIFIER      reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    SEMICOLON       reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    IF              reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    ASSERT          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    SWITCH          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    WHILE           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    DO              reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    FOR             reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    BREAK           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    CONTINUE        reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    RETURN          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    THROW           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    SYNCHRONIZED    reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    FINAL           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    L_CURL_BRACE    reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    BYTE            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    SHORT           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    CHAR            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    INT             reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    LONG            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    FLOAT           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    DOUBLE          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    BOOLEAN         reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    PUBLIC          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    PROTECTED       reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    PRIVATE         reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    STATIC          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    ABSTRACT        reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    NATIVE          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    TRANSIENT       reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    VOLATILE        reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    STRICTFP        reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    L_BRACE         reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    PLUS_PLUS       reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    MINUS_MINUS     reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    NOT             reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    CURL_DASH       reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    PLUS            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    MINUS           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    THIS            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    SUPER           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    VOID            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    LITERAL         reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    NUMBER          reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    CLASS           reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    R_CURL_BRACE    reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    CASE            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    DEFAULT         reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)
    ELSE            reduce using rule 95 (Block -> L_CURL_BRACE BlockStatements R_CURL_BRACE .)


state 159

    (96) BlockStatements -> BlockStatement BlockStatements .

    R_CURL_BRACE    reduce using rule 96 (BlockStatements -> BlockStatement BlockStatements .)
    CASE            reduce using rule 96 (BlockStatements -> BlockStatement BlockStatements .)
    DEFAULT         reduce using rule 96 (BlockStatements -> BlockStatement BlockStatements .)


state 160

    (172) InfixOp -> EQUAL .

    L_BRACE         reduce using rule 172 (InfixOp -> EQUAL .)
    PLUS_PLUS       reduce using rule 172 (InfixOp -> EQUAL .)
    MINUS_MINUS     reduce using rule 172 (InfixOp -> EQUAL .)
    NOT             reduce using rule 172 (InfixOp -> EQUAL .)
    CURL_DASH       reduce using rule 172 (InfixOp -> EQUAL .)
    PLUS            reduce using rule 172 (InfixOp -> EQUAL .)
    MINUS           reduce using rule 172 (InfixOp -> EQUAL .)
    THIS            reduce using rule 172 (InfixOp -> EQUAL .)
    SUPER           reduce using rule 172 (InfixOp -> EQUAL .)
    VOID            reduce using rule 172 (InfixOp -> EQUAL .)
    LITERAL         reduce using rule 172 (InfixOp -> EQUAL .)
    NUMBER          reduce using rule 172 (InfixOp -> EQUAL .)
    IDENTIFIER      reduce using rule 172 (InfixOp -> EQUAL .)
    BYTE            reduce using rule 172 (InfixOp -> EQUAL .)
    SHORT           reduce using rule 172 (InfixOp -> EQUAL .)
    CHAR            reduce using rule 172 (InfixOp -> EQUAL .)
    INT             reduce using rule 172 (InfixOp -> EQUAL .)
    LONG            reduce using rule 172 (InfixOp -> EQUAL .)
    FLOAT           reduce using rule 172 (InfixOp -> EQUAL .)
    DOUBLE          reduce using rule 172 (InfixOp -> EQUAL .)
    BOOLEAN         reduce using rule 172 (InfixOp -> EQUAL .)


state 161

    (182) InfixOp -> MINUS .

    L_BRACE         reduce using rule 182 (InfixOp -> MINUS .)
    PLUS_PLUS       reduce using rule 182 (InfixOp -> MINUS .)
    MINUS_MINUS     reduce using rule 182 (InfixOp -> MINUS .)
    NOT             reduce using rule 182 (InfixOp -> MINUS .)
    CURL_DASH       reduce using rule 182 (InfixOp -> MINUS .)
    PLUS            reduce using rule 182 (InfixOp -> MINUS .)
    MINUS           reduce using rule 182 (InfixOp -> MINUS .)
    THIS            reduce using rule 182 (InfixOp -> MINUS .)
    SUPER           reduce using rule 182 (InfixOp -> MINUS .)
    VOID            reduce using rule 182 (InfixOp -> MINUS .)
    LITERAL         reduce using rule 182 (InfixOp -> MINUS .)
    NUMBER          reduce using rule 182 (InfixOp -> MINUS .)
    IDENTIFIER      reduce using rule 182 (InfixOp -> MINUS .)
    BYTE            reduce using rule 182 (InfixOp -> MINUS .)
    SHORT           reduce using rule 182 (InfixOp -> MINUS .)
    CHAR            reduce using rule 182 (InfixOp -> MINUS .)
    INT             reduce using rule 182 (InfixOp -> MINUS .)
    LONG            reduce using rule 182 (InfixOp -> MINUS .)
    FLOAT           reduce using rule 182 (InfixOp -> MINUS .)
    DOUBLE          reduce using rule 182 (InfixOp -> MINUS .)
    BOOLEAN         reduce using rule 182 (InfixOp -> MINUS .)


state 162

    (176) InfixOp -> LE .

    L_BRACE         reduce using rule 176 (InfixOp -> LE .)
    PLUS_PLUS       reduce using rule 176 (InfixOp -> LE .)
    MINUS_MINUS     reduce using rule 176 (InfixOp -> LE .)
    NOT             reduce using rule 176 (InfixOp -> LE .)
    CURL_DASH       reduce using rule 176 (InfixOp -> LE .)
    PLUS            reduce using rule 176 (InfixOp -> LE .)
    MINUS           reduce using rule 176 (InfixOp -> LE .)
    THIS            reduce using rule 176 (InfixOp -> LE .)
    SUPER           reduce using rule 176 (InfixOp -> LE .)
    VOID            reduce using rule 176 (InfixOp -> LE .)
    LITERAL         reduce using rule 176 (InfixOp -> LE .)
    NUMBER          reduce using rule 176 (InfixOp -> LE .)
    IDENTIFIER      reduce using rule 176 (InfixOp -> LE .)
    BYTE            reduce using rule 176 (InfixOp -> LE .)
    SHORT           reduce using rule 176 (InfixOp -> LE .)
    CHAR            reduce using rule 176 (InfixOp -> LE .)
    INT             reduce using rule 176 (InfixOp -> LE .)
    LONG            reduce using rule 176 (InfixOp -> LE .)
    FLOAT           reduce using rule 176 (InfixOp -> LE .)
    DOUBLE          reduce using rule 176 (InfixOp -> LE .)
    BOOLEAN         reduce using rule 176 (InfixOp -> LE .)


state 163

    (171) InfixOp -> POWER .

    L_BRACE         reduce using rule 171 (InfixOp -> POWER .)
    PLUS_PLUS       reduce using rule 171 (InfixOp -> POWER .)
    MINUS_MINUS     reduce using rule 171 (InfixOp -> POWER .)
    NOT             reduce using rule 171 (InfixOp -> POWER .)
    CURL_DASH       reduce using rule 171 (InfixOp -> POWER .)
    PLUS            reduce using rule 171 (InfixOp -> POWER .)
    MINUS           reduce using rule 171 (InfixOp -> POWER .)
    THIS            reduce using rule 171 (InfixOp -> POWER .)
    SUPER           reduce using rule 171 (InfixOp -> POWER .)
    VOID            reduce using rule 171 (InfixOp -> POWER .)
    LITERAL         reduce using rule 171 (InfixOp -> POWER .)
    NUMBER          reduce using rule 171 (InfixOp -> POWER .)
    IDENTIFIER      reduce using rule 171 (InfixOp -> POWER .)
    BYTE            reduce using rule 171 (InfixOp -> POWER .)
    SHORT           reduce using rule 171 (InfixOp -> POWER .)
    CHAR            reduce using rule 171 (InfixOp -> POWER .)
    INT             reduce using rule 171 (InfixOp -> POWER .)
    LONG            reduce using rule 171 (InfixOp -> POWER .)
    FLOAT           reduce using rule 171 (InfixOp -> POWER .)
    DOUBLE          reduce using rule 171 (InfixOp -> POWER .)
    BOOLEAN         reduce using rule 171 (InfixOp -> POWER .)


state 164

    (180) InfixOp -> RR_SHIFT .

    L_BRACE         reduce using rule 180 (InfixOp -> RR_SHIFT .)
    PLUS_PLUS       reduce using rule 180 (InfixOp -> RR_SHIFT .)
    MINUS_MINUS     reduce using rule 180 (InfixOp -> RR_SHIFT .)
    NOT             reduce using rule 180 (InfixOp -> RR_SHIFT .)
    CURL_DASH       reduce using rule 180 (InfixOp -> RR_SHIFT .)
    PLUS            reduce using rule 180 (InfixOp -> RR_SHIFT .)
    MINUS           reduce using rule 180 (InfixOp -> RR_SHIFT .)
    THIS            reduce using rule 180 (InfixOp -> RR_SHIFT .)
    SUPER           reduce using rule 180 (InfixOp -> RR_SHIFT .)
    VOID            reduce using rule 180 (InfixOp -> RR_SHIFT .)
    LITERAL         reduce using rule 180 (InfixOp -> RR_SHIFT .)
    NUMBER          reduce using rule 180 (InfixOp -> RR_SHIFT .)
    IDENTIFIER      reduce using rule 180 (InfixOp -> RR_SHIFT .)
    BYTE            reduce using rule 180 (InfixOp -> RR_SHIFT .)
    SHORT           reduce using rule 180 (InfixOp -> RR_SHIFT .)
    CHAR            reduce using rule 180 (InfixOp -> RR_SHIFT .)
    INT             reduce using rule 180 (InfixOp -> RR_SHIFT .)
    LONG            reduce using rule 180 (InfixOp -> RR_SHIFT .)
    FLOAT           reduce using rule 180 (InfixOp -> RR_SHIFT .)
    DOUBLE          reduce using rule 180 (InfixOp -> RR_SHIFT .)
    BOOLEAN         reduce using rule 180 (InfixOp -> RR_SHIFT .)


state 165

    (174) InfixOp -> LT .

    L_BRACE         reduce using rule 174 (InfixOp -> LT .)
    PLUS_PLUS       reduce using rule 174 (InfixOp -> LT .)
    MINUS_MINUS     reduce using rule 174 (InfixOp -> LT .)
    NOT             reduce using rule 174 (InfixOp -> LT .)
    CURL_DASH       reduce using rule 174 (InfixOp -> LT .)
    PLUS            reduce using rule 174 (InfixOp -> LT .)
    MINUS           reduce using rule 174 (InfixOp -> LT .)
    THIS            reduce using rule 174 (InfixOp -> LT .)
    SUPER           reduce using rule 174 (InfixOp -> LT .)
    VOID            reduce using rule 174 (InfixOp -> LT .)
    LITERAL         reduce using rule 174 (InfixOp -> LT .)
    NUMBER          reduce using rule 174 (InfixOp -> LT .)
    IDENTIFIER      reduce using rule 174 (InfixOp -> LT .)
    BYTE            reduce using rule 174 (InfixOp -> LT .)
    SHORT           reduce using rule 174 (InfixOp -> LT .)
    CHAR            reduce using rule 174 (InfixOp -> LT .)
    INT             reduce using rule 174 (InfixOp -> LT .)
    LONG            reduce using rule 174 (InfixOp -> LT .)
    FLOAT           reduce using rule 174 (InfixOp -> LT .)
    DOUBLE          reduce using rule 174 (InfixOp -> LT .)
    BOOLEAN         reduce using rule 174 (InfixOp -> LT .)


state 166

    (181) InfixOp -> PLUS .

    L_BRACE         reduce using rule 181 (InfixOp -> PLUS .)
    PLUS_PLUS       reduce using rule 181 (InfixOp -> PLUS .)
    MINUS_MINUS     reduce using rule 181 (InfixOp -> PLUS .)
    NOT             reduce using rule 181 (InfixOp -> PLUS .)
    CURL_DASH       reduce using rule 181 (InfixOp -> PLUS .)
    PLUS            reduce using rule 181 (InfixOp -> PLUS .)
    MINUS           reduce using rule 181 (InfixOp -> PLUS .)
    THIS            reduce using rule 181 (InfixOp -> PLUS .)
    SUPER           reduce using rule 181 (InfixOp -> PLUS .)
    VOID            reduce using rule 181 (InfixOp -> PLUS .)
    LITERAL         reduce using rule 181 (InfixOp -> PLUS .)
    NUMBER          reduce using rule 181 (InfixOp -> PLUS .)
    IDENTIFIER      reduce using rule 181 (InfixOp -> PLUS .)
    BYTE            reduce using rule 181 (InfixOp -> PLUS .)
    SHORT           reduce using rule 181 (InfixOp -> PLUS .)
    CHAR            reduce using rule 181 (InfixOp -> PLUS .)
    INT             reduce using rule 181 (InfixOp -> PLUS .)
    LONG            reduce using rule 181 (InfixOp -> PLUS .)
    FLOAT           reduce using rule 181 (InfixOp -> PLUS .)
    DOUBLE          reduce using rule 181 (InfixOp -> PLUS .)
    BOOLEAN         reduce using rule 181 (InfixOp -> PLUS .)


state 167

    (170) InfixOp -> AND .

    L_BRACE         reduce using rule 170 (InfixOp -> AND .)
    PLUS_PLUS       reduce using rule 170 (InfixOp -> AND .)
    MINUS_MINUS     reduce using rule 170 (InfixOp -> AND .)
    NOT             reduce using rule 170 (InfixOp -> AND .)
    CURL_DASH       reduce using rule 170 (InfixOp -> AND .)
    PLUS            reduce using rule 170 (InfixOp -> AND .)
    MINUS           reduce using rule 170 (InfixOp -> AND .)
    THIS            reduce using rule 170 (InfixOp -> AND .)
    SUPER           reduce using rule 170 (InfixOp -> AND .)
    VOID            reduce using rule 170 (InfixOp -> AND .)
    LITERAL         reduce using rule 170 (InfixOp -> AND .)
    NUMBER          reduce using rule 170 (InfixOp -> AND .)
    IDENTIFIER      reduce using rule 170 (InfixOp -> AND .)
    BYTE            reduce using rule 170 (InfixOp -> AND .)
    SHORT           reduce using rule 170 (InfixOp -> AND .)
    CHAR            reduce using rule 170 (InfixOp -> AND .)
    INT             reduce using rule 170 (InfixOp -> AND .)
    LONG            reduce using rule 170 (InfixOp -> AND .)
    FLOAT           reduce using rule 170 (InfixOp -> AND .)
    DOUBLE          reduce using rule 170 (InfixOp -> AND .)
    BOOLEAN         reduce using rule 170 (InfixOp -> AND .)


state 168

    (175) InfixOp -> GT .

    L_BRACE         reduce using rule 175 (InfixOp -> GT .)
    PLUS_PLUS       reduce using rule 175 (InfixOp -> GT .)
    MINUS_MINUS     reduce using rule 175 (InfixOp -> GT .)
    NOT             reduce using rule 175 (InfixOp -> GT .)
    CURL_DASH       reduce using rule 175 (InfixOp -> GT .)
    PLUS            reduce using rule 175 (InfixOp -> GT .)
    MINUS           reduce using rule 175 (InfixOp -> GT .)
    THIS            reduce using rule 175 (InfixOp -> GT .)
    SUPER           reduce using rule 175 (InfixOp -> GT .)
    VOID            reduce using rule 175 (InfixOp -> GT .)
    LITERAL         reduce using rule 175 (InfixOp -> GT .)
    NUMBER          reduce using rule 175 (InfixOp -> GT .)
    IDENTIFIER      reduce using rule 175 (InfixOp -> GT .)
    BYTE            reduce using rule 175 (InfixOp -> GT .)
    SHORT           reduce using rule 175 (InfixOp -> GT .)
    CHAR            reduce using rule 175 (InfixOp -> GT .)
    INT             reduce using rule 175 (InfixOp -> GT .)
    LONG            reduce using rule 175 (InfixOp -> GT .)
    FLOAT           reduce using rule 175 (InfixOp -> GT .)
    DOUBLE          reduce using rule 175 (InfixOp -> GT .)
    BOOLEAN         reduce using rule 175 (InfixOp -> GT .)


state 169

    (184) InfixOp -> DIVIDE .

    L_BRACE         reduce using rule 184 (InfixOp -> DIVIDE .)
    PLUS_PLUS       reduce using rule 184 (InfixOp -> DIVIDE .)
    MINUS_MINUS     reduce using rule 184 (InfixOp -> DIVIDE .)
    NOT             reduce using rule 184 (InfixOp -> DIVIDE .)
    CURL_DASH       reduce using rule 184 (InfixOp -> DIVIDE .)
    PLUS            reduce using rule 184 (InfixOp -> DIVIDE .)
    MINUS           reduce using rule 184 (InfixOp -> DIVIDE .)
    THIS            reduce using rule 184 (InfixOp -> DIVIDE .)
    SUPER           reduce using rule 184 (InfixOp -> DIVIDE .)
    VOID            reduce using rule 184 (InfixOp -> DIVIDE .)
    LITERAL         reduce using rule 184 (InfixOp -> DIVIDE .)
    NUMBER          reduce using rule 184 (InfixOp -> DIVIDE .)
    IDENTIFIER      reduce using rule 184 (InfixOp -> DIVIDE .)
    BYTE            reduce using rule 184 (InfixOp -> DIVIDE .)
    SHORT           reduce using rule 184 (InfixOp -> DIVIDE .)
    CHAR            reduce using rule 184 (InfixOp -> DIVIDE .)
    INT             reduce using rule 184 (InfixOp -> DIVIDE .)
    LONG            reduce using rule 184 (InfixOp -> DIVIDE .)
    FLOAT           reduce using rule 184 (InfixOp -> DIVIDE .)
    DOUBLE          reduce using rule 184 (InfixOp -> DIVIDE .)
    BOOLEAN         reduce using rule 184 (InfixOp -> DIVIDE .)


state 170

    (183) InfixOp -> TIMES .

    L_BRACE         reduce using rule 183 (InfixOp -> TIMES .)
    PLUS_PLUS       reduce using rule 183 (InfixOp -> TIMES .)
    MINUS_MINUS     reduce using rule 183 (InfixOp -> TIMES .)
    NOT             reduce using rule 183 (InfixOp -> TIMES .)
    CURL_DASH       reduce using rule 183 (InfixOp -> TIMES .)
    PLUS            reduce using rule 183 (InfixOp -> TIMES .)
    MINUS           reduce using rule 183 (InfixOp -> TIMES .)
    THIS            reduce using rule 183 (InfixOp -> TIMES .)
    SUPER           reduce using rule 183 (InfixOp -> TIMES .)
    VOID            reduce using rule 183 (InfixOp -> TIMES .)
    LITERAL         reduce using rule 183 (InfixOp -> TIMES .)
    NUMBER          reduce using rule 183 (InfixOp -> TIMES .)
    IDENTIFIER      reduce using rule 183 (InfixOp -> TIMES .)
    BYTE            reduce using rule 183 (InfixOp -> TIMES .)
    SHORT           reduce using rule 183 (InfixOp -> TIMES .)
    CHAR            reduce using rule 183 (InfixOp -> TIMES .)
    INT             reduce using rule 183 (InfixOp -> TIMES .)
    LONG            reduce using rule 183 (InfixOp -> TIMES .)
    FLOAT           reduce using rule 183 (InfixOp -> TIMES .)
    DOUBLE          reduce using rule 183 (InfixOp -> TIMES .)
    BOOLEAN         reduce using rule 183 (InfixOp -> TIMES .)


state 171

    (177) InfixOp -> GE .

    L_BRACE         reduce using rule 177 (InfixOp -> GE .)
    PLUS_PLUS       reduce using rule 177 (InfixOp -> GE .)
    MINUS_MINUS     reduce using rule 177 (InfixOp -> GE .)
    NOT             reduce using rule 177 (InfixOp -> GE .)
    CURL_DASH       reduce using rule 177 (InfixOp -> GE .)
    PLUS            reduce using rule 177 (InfixOp -> GE .)
    MINUS           reduce using rule 177 (InfixOp -> GE .)
    THIS            reduce using rule 177 (InfixOp -> GE .)
    SUPER           reduce using rule 177 (InfixOp -> GE .)
    VOID            reduce using rule 177 (InfixOp -> GE .)
    LITERAL         reduce using rule 177 (InfixOp -> GE .)
    NUMBER          reduce using rule 177 (InfixOp -> GE .)
    IDENTIFIER      reduce using rule 177 (InfixOp -> GE .)
    BYTE            reduce using rule 177 (InfixOp -> GE .)
    SHORT           reduce using rule 177 (InfixOp -> GE .)
    CHAR            reduce using rule 177 (InfixOp -> GE .)
    INT             reduce using rule 177 (InfixOp -> GE .)
    LONG            reduce using rule 177 (InfixOp -> GE .)
    FLOAT           reduce using rule 177 (InfixOp -> GE .)
    DOUBLE          reduce using rule 177 (InfixOp -> GE .)
    BOOLEAN         reduce using rule 177 (InfixOp -> GE .)


state 172

    (173) InfixOp -> NOT_EQUAL .

    L_BRACE         reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    PLUS_PLUS       reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    MINUS_MINUS     reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    NOT             reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    CURL_DASH       reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    PLUS            reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    MINUS           reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    THIS            reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    SUPER           reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    VOID            reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    LITERAL         reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    NUMBER          reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    IDENTIFIER      reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    BYTE            reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    SHORT           reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    CHAR            reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    INT             reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    LONG            reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    FLOAT           reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    DOUBLE          reduce using rule 173 (InfixOp -> NOT_EQUAL .)
    BOOLEAN         reduce using rule 173 (InfixOp -> NOT_EQUAL .)


state 173

    (168) Expression2Rest -> INSTANCEOF . Type
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 62
    BasicType                      shift and go to state 61
    Type                           shift and go to state 242

state 174

    (167) Expression2Rest -> InfixOp . Expression3 infixOp_expression3
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression3                    shift and go to state 243

state 175

    (179) InfixOp -> R_SHIFT .

    L_BRACE         reduce using rule 179 (InfixOp -> R_SHIFT .)
    PLUS_PLUS       reduce using rule 179 (InfixOp -> R_SHIFT .)
    MINUS_MINUS     reduce using rule 179 (InfixOp -> R_SHIFT .)
    NOT             reduce using rule 179 (InfixOp -> R_SHIFT .)
    CURL_DASH       reduce using rule 179 (InfixOp -> R_SHIFT .)
    PLUS            reduce using rule 179 (InfixOp -> R_SHIFT .)
    MINUS           reduce using rule 179 (InfixOp -> R_SHIFT .)
    THIS            reduce using rule 179 (InfixOp -> R_SHIFT .)
    SUPER           reduce using rule 179 (InfixOp -> R_SHIFT .)
    VOID            reduce using rule 179 (InfixOp -> R_SHIFT .)
    LITERAL         reduce using rule 179 (InfixOp -> R_SHIFT .)
    NUMBER          reduce using rule 179 (InfixOp -> R_SHIFT .)
    IDENTIFIER      reduce using rule 179 (InfixOp -> R_SHIFT .)
    BYTE            reduce using rule 179 (InfixOp -> R_SHIFT .)
    SHORT           reduce using rule 179 (InfixOp -> R_SHIFT .)
    CHAR            reduce using rule 179 (InfixOp -> R_SHIFT .)
    INT             reduce using rule 179 (InfixOp -> R_SHIFT .)
    LONG            reduce using rule 179 (InfixOp -> R_SHIFT .)
    FLOAT           reduce using rule 179 (InfixOp -> R_SHIFT .)
    DOUBLE          reduce using rule 179 (InfixOp -> R_SHIFT .)
    BOOLEAN         reduce using rule 179 (InfixOp -> R_SHIFT .)


state 176

    (164) Expression2 -> Expression3 Expression2Rest .

    EXPLAMETARY     reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    ASSIGNMENT      reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    PLUS_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    MINUS_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    TIMES_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    DIVIDE_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    AND_ASSIGNMENT  reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    OR_ASSIGNMENT   reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    POWER_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    MOD_ASSIGNMENT  reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    L_SHIFT_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    R_SHIFT_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    RR_SHIFT_ASSIGNMENT reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    COLON           reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    COMMA           reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    R_SQUARE_BRACE  reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    SEMICOLON       reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    R_BRACE         reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)
    L_BRACE         reduce using rule 164 (Expression2 -> Expression3 Expression2Rest .)


state 177

    (169) InfixOp -> OR .

    L_BRACE         reduce using rule 169 (InfixOp -> OR .)
    PLUS_PLUS       reduce using rule 169 (InfixOp -> OR .)
    MINUS_MINUS     reduce using rule 169 (InfixOp -> OR .)
    NOT             reduce using rule 169 (InfixOp -> OR .)
    CURL_DASH       reduce using rule 169 (InfixOp -> OR .)
    PLUS            reduce using rule 169 (InfixOp -> OR .)
    MINUS           reduce using rule 169 (InfixOp -> OR .)
    THIS            reduce using rule 169 (InfixOp -> OR .)
    SUPER           reduce using rule 169 (InfixOp -> OR .)
    VOID            reduce using rule 169 (InfixOp -> OR .)
    LITERAL         reduce using rule 169 (InfixOp -> OR .)
    NUMBER          reduce using rule 169 (InfixOp -> OR .)
    IDENTIFIER      reduce using rule 169 (InfixOp -> OR .)
    BYTE            reduce using rule 169 (InfixOp -> OR .)
    SHORT           reduce using rule 169 (InfixOp -> OR .)
    CHAR            reduce using rule 169 (InfixOp -> OR .)
    INT             reduce using rule 169 (InfixOp -> OR .)
    LONG            reduce using rule 169 (InfixOp -> OR .)
    FLOAT           reduce using rule 169 (InfixOp -> OR .)
    DOUBLE          reduce using rule 169 (InfixOp -> OR .)
    BOOLEAN         reduce using rule 169 (InfixOp -> OR .)


state 178

    (178) InfixOp -> L_SHIFT .

    L_BRACE         reduce using rule 178 (InfixOp -> L_SHIFT .)
    PLUS_PLUS       reduce using rule 178 (InfixOp -> L_SHIFT .)
    MINUS_MINUS     reduce using rule 178 (InfixOp -> L_SHIFT .)
    NOT             reduce using rule 178 (InfixOp -> L_SHIFT .)
    CURL_DASH       reduce using rule 178 (InfixOp -> L_SHIFT .)
    PLUS            reduce using rule 178 (InfixOp -> L_SHIFT .)
    MINUS           reduce using rule 178 (InfixOp -> L_SHIFT .)
    THIS            reduce using rule 178 (InfixOp -> L_SHIFT .)
    SUPER           reduce using rule 178 (InfixOp -> L_SHIFT .)
    VOID            reduce using rule 178 (InfixOp -> L_SHIFT .)
    LITERAL         reduce using rule 178 (InfixOp -> L_SHIFT .)
    NUMBER          reduce using rule 178 (InfixOp -> L_SHIFT .)
    IDENTIFIER      reduce using rule 178 (InfixOp -> L_SHIFT .)
    BYTE            reduce using rule 178 (InfixOp -> L_SHIFT .)
    SHORT           reduce using rule 178 (InfixOp -> L_SHIFT .)
    CHAR            reduce using rule 178 (InfixOp -> L_SHIFT .)
    INT             reduce using rule 178 (InfixOp -> L_SHIFT .)
    LONG            reduce using rule 178 (InfixOp -> L_SHIFT .)
    FLOAT           reduce using rule 178 (InfixOp -> L_SHIFT .)
    DOUBLE          reduce using rule 178 (InfixOp -> L_SHIFT .)
    BOOLEAN         reduce using rule 178 (InfixOp -> L_SHIFT .)


state 179

    (185) InfixOp -> MOD .

    L_BRACE         reduce using rule 185 (InfixOp -> MOD .)
    PLUS_PLUS       reduce using rule 185 (InfixOp -> MOD .)
    MINUS_MINUS     reduce using rule 185 (InfixOp -> MOD .)
    NOT             reduce using rule 185 (InfixOp -> MOD .)
    CURL_DASH       reduce using rule 185 (InfixOp -> MOD .)
    PLUS            reduce using rule 185 (InfixOp -> MOD .)
    MINUS           reduce using rule 185 (InfixOp -> MOD .)
    THIS            reduce using rule 185 (InfixOp -> MOD .)
    SUPER           reduce using rule 185 (InfixOp -> MOD .)
    VOID            reduce using rule 185 (InfixOp -> MOD .)
    LITERAL         reduce using rule 185 (InfixOp -> MOD .)
    NUMBER          reduce using rule 185 (InfixOp -> MOD .)
    IDENTIFIER      reduce using rule 185 (InfixOp -> MOD .)
    BYTE            reduce using rule 185 (InfixOp -> MOD .)
    SHORT           reduce using rule 185 (InfixOp -> MOD .)
    CHAR            reduce using rule 185 (InfixOp -> MOD .)
    INT             reduce using rule 185 (InfixOp -> MOD .)
    LONG            reduce using rule 185 (InfixOp -> MOD .)
    FLOAT           reduce using rule 185 (InfixOp -> MOD .)
    DOUBLE          reduce using rule 185 (InfixOp -> MOD .)
    BOOLEAN         reduce using rule 185 (InfixOp -> MOD .)


state 180

    (101) BlockStatement -> IDENTIFIER COLON . Statement
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 134
    L_CURL_BRACE    shift and go to state 57
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    Statement                      shift and go to state 244
    BasicType                      shift and go to state 133
    Block                          shift and go to state 112
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 88
    Expression                     shift and go to state 111
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 181

    (114) Statement -> FOR L_BRACE . ForControl R_BRACE Statement
    (131) ForControl -> . ForVarControl
    (132) ForControl -> . ForUpdate SEMICOLON SEMICOLON
    (133) ForControl -> . ForUpdate SEMICOLON Expression SEMICOLON
    (134) ForControl -> . ForUpdate SEMICOLON SEMICOLON ForUpdate
    (135) ForControl -> . ForUpdate SEMICOLON Expression SEMICOLON ForUpdate
    (136) ForVarControl -> . Type VariableDeclaratorId ForVarControlRest
    (137) ForVarControl -> . variableModifier Type VariableDeclaratorId ForVarControlRest
    (144) ForUpdate -> . StatementExpression
    (145) ForUpdate -> . StatementExpression COMMA ForUpdate
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier
    (123) StatementExpression -> . Expression
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE

  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    FINAL           shift and go to state 155
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85

  ! BYTE            [ reduce using rule 76 (variableModifier -> .) ]
  ! SHORT           [ reduce using rule 76 (variableModifier -> .) ]
  ! CHAR            [ reduce using rule 76 (variableModifier -> .) ]
  ! INT             [ reduce using rule 76 (variableModifier -> .) ]
  ! LONG            [ reduce using rule 76 (variableModifier -> .) ]
  ! FLOAT           [ reduce using rule 76 (variableModifier -> .) ]
  ! DOUBLE          [ reduce using rule 76 (variableModifier -> .) ]
  ! BOOLEAN         [ reduce using rule 76 (variableModifier -> .) ]
  ! IDENTIFIER      [ reduce using rule 76 (variableModifier -> .) ]

    PrefixOp                       shift and go to state 84
    StatementExpression            shift and go to state 245
    Type                           shift and go to state 246
    BasicType                      shift and go to state 96
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 106
    variableModifier               shift and go to state 247
    Literal                        shift and go to state 94
    Expression                     shift and go to state 111
    ForUpdate                      shift and go to state 248
    ForControl                     shift and go to state 249
    Primary                        shift and go to state 86
    ForVarControl                  shift and go to state 250
    ParExpression                  shift and go to state 116

state 182

    (207) Primary -> QualifiedIdentifier IdentifierSuffix .

    DOT             reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    PLUS_PLUS       reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    MINUS_MINUS     reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    INSTANCEOF      reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    OR              reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    AND             reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    POWER           reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    EQUAL           reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    NOT_EQUAL       reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    LT              reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    GT              reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    LE              reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    GE              reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    L_SHIFT         reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    R_SHIFT         reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    RR_SHIFT        reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    PLUS            reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    MINUS           reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    TIMES           reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    DIVIDE          reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    MOD             reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    EXPLAMETARY     reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    ASSIGNMENT      reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    PLUS_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    MINUS_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    TIMES_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    DIVIDE_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    AND_ASSIGNMENT  reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    OR_ASSIGNMENT   reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    POWER_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    MOD_ASSIGNMENT  reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    L_SHIFT_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    R_SHIFT_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    RR_SHIFT_ASSIGNMENT reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    SEMICOLON       reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    COMMA           reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    R_BRACE         reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    L_BRACE         reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    COLON           reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)
    R_SQUARE_BRACE  reduce using rule 207 (Primary -> QualifiedIdentifier IdentifierSuffix .)


state 183

    (218) IdentifierSuffix -> L_BRACE . square_brace DOT CLASS R_BRACE
    (219) IdentifierSuffix -> L_BRACE . square_brace DOT Expression R_BRACE
    (215) Arguments -> L_BRACE . ExpressionList L_BRACE
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace
    (213) ExpressionList -> . Expression
    (214) ExpressionList -> . Expression COMMA ExpressionList
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    DOT             reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    square_brace                   shift and go to state 251
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    ExpressionList                 shift and go to state 252
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 253

state 184

    (221) IdentifierSuffix -> DOT . CLASS
    (222) IdentifierSuffix -> DOT . THIS
    (223) IdentifierSuffix -> DOT . SUPER Arguments

    CLASS           shift and go to state 256
    THIS            shift and go to state 254
    SUPER           shift and go to state 255


state 185

    (220) IdentifierSuffix -> Arguments .

    DOT             reduce using rule 220 (IdentifierSuffix -> Arguments .)
    PLUS_PLUS       reduce using rule 220 (IdentifierSuffix -> Arguments .)
    MINUS_MINUS     reduce using rule 220 (IdentifierSuffix -> Arguments .)
    INSTANCEOF      reduce using rule 220 (IdentifierSuffix -> Arguments .)
    OR              reduce using rule 220 (IdentifierSuffix -> Arguments .)
    AND             reduce using rule 220 (IdentifierSuffix -> Arguments .)
    POWER           reduce using rule 220 (IdentifierSuffix -> Arguments .)
    EQUAL           reduce using rule 220 (IdentifierSuffix -> Arguments .)
    NOT_EQUAL       reduce using rule 220 (IdentifierSuffix -> Arguments .)
    LT              reduce using rule 220 (IdentifierSuffix -> Arguments .)
    GT              reduce using rule 220 (IdentifierSuffix -> Arguments .)
    LE              reduce using rule 220 (IdentifierSuffix -> Arguments .)
    GE              reduce using rule 220 (IdentifierSuffix -> Arguments .)
    L_SHIFT         reduce using rule 220 (IdentifierSuffix -> Arguments .)
    R_SHIFT         reduce using rule 220 (IdentifierSuffix -> Arguments .)
    RR_SHIFT        reduce using rule 220 (IdentifierSuffix -> Arguments .)
    PLUS            reduce using rule 220 (IdentifierSuffix -> Arguments .)
    MINUS           reduce using rule 220 (IdentifierSuffix -> Arguments .)
    TIMES           reduce using rule 220 (IdentifierSuffix -> Arguments .)
    DIVIDE          reduce using rule 220 (IdentifierSuffix -> Arguments .)
    MOD             reduce using rule 220 (IdentifierSuffix -> Arguments .)
    EXPLAMETARY     reduce using rule 220 (IdentifierSuffix -> Arguments .)
    ASSIGNMENT      reduce using rule 220 (IdentifierSuffix -> Arguments .)
    PLUS_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    MINUS_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    TIMES_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    DIVIDE_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    AND_ASSIGNMENT  reduce using rule 220 (IdentifierSuffix -> Arguments .)
    OR_ASSIGNMENT   reduce using rule 220 (IdentifierSuffix -> Arguments .)
    POWER_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    MOD_ASSIGNMENT  reduce using rule 220 (IdentifierSuffix -> Arguments .)
    L_SHIFT_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    R_SHIFT_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    RR_SHIFT_ASSIGNMENT reduce using rule 220 (IdentifierSuffix -> Arguments .)
    SEMICOLON       reduce using rule 220 (IdentifierSuffix -> Arguments .)
    R_BRACE         reduce using rule 220 (IdentifierSuffix -> Arguments .)
    COMMA           reduce using rule 220 (IdentifierSuffix -> Arguments .)
    COLON           reduce using rule 220 (IdentifierSuffix -> Arguments .)
    L_BRACE         reduce using rule 220 (IdentifierSuffix -> Arguments .)
    R_SQUARE_BRACE  reduce using rule 220 (IdentifierSuffix -> Arguments .)


state 186

    (152) AssignmentOperator -> DIVIDE_ASSIGNMENT .

    L_BRACE         reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    NOT             reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    CURL_DASH       reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    PLUS            reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    MINUS           reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    THIS            reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    SUPER           reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    VOID            reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    LITERAL         reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    NUMBER          reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    BYTE            reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    SHORT           reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    CHAR            reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    INT             reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    LONG            reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    FLOAT           reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    DOUBLE          reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)
    BOOLEAN         reduce using rule 152 (AssignmentOperator -> DIVIDE_ASSIGNMENT .)


state 187

    (155) AssignmentOperator -> POWER_ASSIGNMENT .

    L_BRACE         reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    NOT             reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    CURL_DASH       reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    PLUS            reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    MINUS           reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    THIS            reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    SUPER           reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    VOID            reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    LITERAL         reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    NUMBER          reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    BYTE            reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    SHORT           reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    CHAR            reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    INT             reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    LONG            reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    FLOAT           reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    DOUBLE          reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)
    BOOLEAN         reduce using rule 155 (AssignmentOperator -> POWER_ASSIGNMENT .)


state 188

    (148) AssignmentOperator -> ASSIGNMENT .

    L_BRACE         reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    NOT             reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    CURL_DASH       reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    PLUS            reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    MINUS           reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    THIS            reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    SUPER           reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    VOID            reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    LITERAL         reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    NUMBER          reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    IDENTIFIER      reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    BYTE            reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    SHORT           reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    CHAR            reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    INT             reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    LONG            reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    FLOAT           reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    DOUBLE          reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)
    BOOLEAN         reduce using rule 148 (AssignmentOperator -> ASSIGNMENT .)


state 189

    (147) Expression -> Expression1 AssignmentOperator . Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 257
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114

state 190

    (158) AssignmentOperator -> R_SHIFT_ASSIGNMENT .

    L_BRACE         reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    NOT             reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    CURL_DASH       reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    PLUS            reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    MINUS           reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    THIS            reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    SUPER           reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    VOID            reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    LITERAL         reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    NUMBER          reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    BYTE            reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    SHORT           reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    CHAR            reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    INT             reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    LONG            reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    FLOAT           reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    DOUBLE          reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)
    BOOLEAN         reduce using rule 158 (AssignmentOperator -> R_SHIFT_ASSIGNMENT .)


state 191

    (154) AssignmentOperator -> OR_ASSIGNMENT .

    L_BRACE         reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    NOT             reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    CURL_DASH       reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    PLUS            reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    MINUS           reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    THIS            reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    SUPER           reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    VOID            reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    LITERAL         reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    NUMBER          reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    BYTE            reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    SHORT           reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    CHAR            reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    INT             reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    LONG            reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    FLOAT           reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    DOUBLE          reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)
    BOOLEAN         reduce using rule 154 (AssignmentOperator -> OR_ASSIGNMENT .)


state 192

    (150) AssignmentOperator -> MINUS_ASSIGNMENT .

    L_BRACE         reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    NOT             reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    CURL_DASH       reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    PLUS            reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    MINUS           reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    THIS            reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    SUPER           reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    VOID            reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    LITERAL         reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    NUMBER          reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    BYTE            reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    SHORT           reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    CHAR            reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    INT             reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    LONG            reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    FLOAT           reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    DOUBLE          reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)
    BOOLEAN         reduce using rule 150 (AssignmentOperator -> MINUS_ASSIGNMENT .)


state 193

    (157) AssignmentOperator -> L_SHIFT_ASSIGNMENT .

    L_BRACE         reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    NOT             reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    CURL_DASH       reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    PLUS            reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    MINUS           reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    THIS            reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    SUPER           reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    VOID            reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    LITERAL         reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    NUMBER          reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    BYTE            reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    SHORT           reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    CHAR            reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    INT             reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    LONG            reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    FLOAT           reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    DOUBLE          reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)
    BOOLEAN         reduce using rule 157 (AssignmentOperator -> L_SHIFT_ASSIGNMENT .)


state 194

    (149) AssignmentOperator -> PLUS_ASSIGNMENT .

    L_BRACE         reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    NOT             reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    CURL_DASH       reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    PLUS            reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    MINUS           reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    THIS            reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    SUPER           reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    VOID            reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    LITERAL         reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    NUMBER          reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    BYTE            reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    SHORT           reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    CHAR            reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    INT             reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    LONG            reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    FLOAT           reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    DOUBLE          reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)
    BOOLEAN         reduce using rule 149 (AssignmentOperator -> PLUS_ASSIGNMENT .)


state 195

    (156) AssignmentOperator -> MOD_ASSIGNMENT .

    L_BRACE         reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    NOT             reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    CURL_DASH       reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    PLUS            reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    MINUS           reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    THIS            reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    SUPER           reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    VOID            reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    LITERAL         reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    NUMBER          reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    BYTE            reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    SHORT           reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    CHAR            reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    INT             reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    LONG            reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    FLOAT           reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    DOUBLE          reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)
    BOOLEAN         reduce using rule 156 (AssignmentOperator -> MOD_ASSIGNMENT .)


state 196

    (153) AssignmentOperator -> AND_ASSIGNMENT .

    L_BRACE         reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    NOT             reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    CURL_DASH       reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    PLUS            reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    MINUS           reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    THIS            reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    SUPER           reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    VOID            reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    LITERAL         reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    NUMBER          reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    BYTE            reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    SHORT           reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    CHAR            reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    INT             reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    LONG            reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    FLOAT           reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    DOUBLE          reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)
    BOOLEAN         reduce using rule 153 (AssignmentOperator -> AND_ASSIGNMENT .)


state 197

    (159) AssignmentOperator -> RR_SHIFT_ASSIGNMENT .

    L_BRACE         reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    NOT             reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    CURL_DASH       reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    PLUS            reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    MINUS           reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    THIS            reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    SUPER           reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    VOID            reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    LITERAL         reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    NUMBER          reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    BYTE            reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    SHORT           reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    CHAR            reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    INT             reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    LONG            reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    FLOAT           reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    DOUBLE          reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)
    BOOLEAN         reduce using rule 159 (AssignmentOperator -> RR_SHIFT_ASSIGNMENT .)


state 198

    (151) AssignmentOperator -> TIMES_ASSIGNMENT .

    L_BRACE         reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    PLUS_PLUS       reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    MINUS_MINUS     reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    NOT             reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    CURL_DASH       reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    PLUS            reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    MINUS           reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    THIS            reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    SUPER           reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    VOID            reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    LITERAL         reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    NUMBER          reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    BYTE            reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    SHORT           reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    CHAR            reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    INT             reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    LONG            reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    FLOAT           reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    DOUBLE          reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)
    BOOLEAN         reduce using rule 151 (AssignmentOperator -> TIMES_ASSIGNMENT .)


state 199

    (209) Primary -> VOID DOT . CLASS

    CLASS           shift and go to state 258


state 200

    (103) LocalVariableDeclarationStatement -> variableModifier Type . VariableDeclarators SEMICOLON
    (84) VariableDeclarators -> . VariableDeclarator
    (85) VariableDeclarators -> . VariableDeclarator COMMA VariableDeclarators
    (86) VariableDeclarator -> . IDENTIFIER VariableDeclaratorRest

    IDENTIFIER      shift and go to state 152

    VariableDeclarator             shift and go to state 153
    VariableDeclarators            shift and go to state 259

state 201

    (107) Statement -> IF ParExpression . Statement
    (108) Statement -> IF ParExpression . Statement ELSE Statement
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 134
    L_CURL_BRACE    shift and go to state 57
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    Statement                      shift and go to state 260
    BasicType                      shift and go to state 133
    Block                          shift and go to state 112
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 88
    Expression                     shift and go to state 111
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 202

    (161) Expression1 -> Expression2 Expression1Rest .

    ASSIGNMENT      reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    PLUS_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    MINUS_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    TIMES_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    DIVIDE_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    AND_ASSIGNMENT  reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    OR_ASSIGNMENT   reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    POWER_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    MOD_ASSIGNMENT  reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    L_SHIFT_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    R_SHIFT_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    RR_SHIFT_ASSIGNMENT reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    SEMICOLON       reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    COMMA           reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    R_BRACE         reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    L_BRACE         reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    R_SQUARE_BRACE  reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)
    COLON           reduce using rule 161 (Expression1 -> Expression2 Expression1Rest .)


state 203

    (162) Expression1Rest -> EXPLAMETARY . Expression COLON Expression1
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 261

state 204

    (112) Statement -> WHILE ParExpression . Statement
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 134
    L_CURL_BRACE    shift and go to state 57
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    Statement                      shift and go to state 262
    BasicType                      shift and go to state 133
    Block                          shift and go to state 112
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 88
    Expression                     shift and go to state 111
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 205

    (121) Statement -> THROW Expression . SEMICOLON

    SEMICOLON       shift and go to state 263


state 206

    (116) Statement -> BREAK IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 264


state 207

    (115) Statement -> BREAK SEMICOLON .

    ELSE            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    IF              reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    ASSERT          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    DO              reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    SYNCHRONIZED    reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    FINAL           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    L_CURL_BRACE    reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    BYTE            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    INT             reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    PUBLIC          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    PROTECTED       reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    PRIVATE         reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    ABSTRACT        reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    NATIVE          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    TRANSIENT       reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    VOLATILE        reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    STRICTFP        reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    L_BRACE         reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    PLUS_PLUS       reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    MINUS_MINUS     reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    CURL_DASH       reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    SUPER           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    LITERAL         reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    R_CURL_BRACE    reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 115 (Statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 115 (Statement -> BREAK SEMICOLON .)


state 208

    (215) Arguments -> L_BRACE . ExpressionList L_BRACE
    (213) ExpressionList -> . Expression
    (214) ExpressionList -> . Expression COMMA ExpressionList
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    ExpressionList                 shift and go to state 252
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 253

state 209

    (204) Primary -> THIS Arguments .

    DOT             reduce using rule 204 (Primary -> THIS Arguments .)
    PLUS_PLUS       reduce using rule 204 (Primary -> THIS Arguments .)
    MINUS_MINUS     reduce using rule 204 (Primary -> THIS Arguments .)
    INSTANCEOF      reduce using rule 204 (Primary -> THIS Arguments .)
    OR              reduce using rule 204 (Primary -> THIS Arguments .)
    AND             reduce using rule 204 (Primary -> THIS Arguments .)
    POWER           reduce using rule 204 (Primary -> THIS Arguments .)
    EQUAL           reduce using rule 204 (Primary -> THIS Arguments .)
    NOT_EQUAL       reduce using rule 204 (Primary -> THIS Arguments .)
    LT              reduce using rule 204 (Primary -> THIS Arguments .)
    GT              reduce using rule 204 (Primary -> THIS Arguments .)
    LE              reduce using rule 204 (Primary -> THIS Arguments .)
    GE              reduce using rule 204 (Primary -> THIS Arguments .)
    L_SHIFT         reduce using rule 204 (Primary -> THIS Arguments .)
    R_SHIFT         reduce using rule 204 (Primary -> THIS Arguments .)
    RR_SHIFT        reduce using rule 204 (Primary -> THIS Arguments .)
    PLUS            reduce using rule 204 (Primary -> THIS Arguments .)
    MINUS           reduce using rule 204 (Primary -> THIS Arguments .)
    TIMES           reduce using rule 204 (Primary -> THIS Arguments .)
    DIVIDE          reduce using rule 204 (Primary -> THIS Arguments .)
    MOD             reduce using rule 204 (Primary -> THIS Arguments .)
    EXPLAMETARY     reduce using rule 204 (Primary -> THIS Arguments .)
    ASSIGNMENT      reduce using rule 204 (Primary -> THIS Arguments .)
    PLUS_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    MINUS_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    TIMES_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    DIVIDE_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    AND_ASSIGNMENT  reduce using rule 204 (Primary -> THIS Arguments .)
    OR_ASSIGNMENT   reduce using rule 204 (Primary -> THIS Arguments .)
    POWER_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    MOD_ASSIGNMENT  reduce using rule 204 (Primary -> THIS Arguments .)
    L_SHIFT_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    R_SHIFT_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    RR_SHIFT_ASSIGNMENT reduce using rule 204 (Primary -> THIS Arguments .)
    SEMICOLON       reduce using rule 204 (Primary -> THIS Arguments .)
    COMMA           reduce using rule 204 (Primary -> THIS Arguments .)
    R_BRACE         reduce using rule 204 (Primary -> THIS Arguments .)
    L_BRACE         reduce using rule 204 (Primary -> THIS Arguments .)
    COLON           reduce using rule 204 (Primary -> THIS Arguments .)
    R_SQUARE_BRACE  reduce using rule 204 (Primary -> THIS Arguments .)


state 210

    (118) Statement -> CONTINUE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 265


state 211

    (117) Statement -> CONTINUE SEMICOLON .

    ELSE            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    ASSERT          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    SYNCHRONIZED    reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    L_CURL_BRACE    reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    BYTE            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    BOOLEAN         reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    PUBLIC          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    PROTECTED       reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    PRIVATE         reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    ABSTRACT        reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    NATIVE          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    TRANSIENT       reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    VOLATILE        reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    STRICTFP        reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    L_BRACE         reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    PLUS_PLUS       reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    MINUS_MINUS     reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    CURL_DASH       reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    SUPER           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    LITERAL         reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    R_CURL_BRACE    reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 117 (Statement -> CONTINUE SEMICOLON .)


state 212

    (205) Primary -> SUPER SuperSuffix .

    DOT             reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    PLUS_PLUS       reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    MINUS_MINUS     reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    INSTANCEOF      reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    OR              reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    AND             reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    POWER           reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    EQUAL           reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    NOT_EQUAL       reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    LT              reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    GT              reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    LE              reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    GE              reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    L_SHIFT         reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    R_SHIFT         reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    RR_SHIFT        reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    PLUS            reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    MINUS           reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    TIMES           reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    DIVIDE          reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    MOD             reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    EXPLAMETARY     reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    ASSIGNMENT      reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    PLUS_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    MINUS_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    TIMES_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    DIVIDE_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    AND_ASSIGNMENT  reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    OR_ASSIGNMENT   reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    POWER_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    MOD_ASSIGNMENT  reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    L_SHIFT_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    R_SHIFT_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    RR_SHIFT_ASSIGNMENT reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    SEMICOLON       reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    COMMA           reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    R_BRACE         reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    L_BRACE         reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    COLON           reduce using rule 205 (Primary -> SUPER SuperSuffix .)
    R_SQUARE_BRACE  reduce using rule 205 (Primary -> SUPER SuperSuffix .)


state 213

    (216) SuperSuffix -> Arguments .

    DOT             reduce using rule 216 (SuperSuffix -> Arguments .)
    PLUS_PLUS       reduce using rule 216 (SuperSuffix -> Arguments .)
    MINUS_MINUS     reduce using rule 216 (SuperSuffix -> Arguments .)
    INSTANCEOF      reduce using rule 216 (SuperSuffix -> Arguments .)
    OR              reduce using rule 216 (SuperSuffix -> Arguments .)
    AND             reduce using rule 216 (SuperSuffix -> Arguments .)
    POWER           reduce using rule 216 (SuperSuffix -> Arguments .)
    EQUAL           reduce using rule 216 (SuperSuffix -> Arguments .)
    NOT_EQUAL       reduce using rule 216 (SuperSuffix -> Arguments .)
    LT              reduce using rule 216 (SuperSuffix -> Arguments .)
    GT              reduce using rule 216 (SuperSuffix -> Arguments .)
    LE              reduce using rule 216 (SuperSuffix -> Arguments .)
    GE              reduce using rule 216 (SuperSuffix -> Arguments .)
    L_SHIFT         reduce using rule 216 (SuperSuffix -> Arguments .)
    R_SHIFT         reduce using rule 216 (SuperSuffix -> Arguments .)
    RR_SHIFT        reduce using rule 216 (SuperSuffix -> Arguments .)
    PLUS            reduce using rule 216 (SuperSuffix -> Arguments .)
    MINUS           reduce using rule 216 (SuperSuffix -> Arguments .)
    TIMES           reduce using rule 216 (SuperSuffix -> Arguments .)
    DIVIDE          reduce using rule 216 (SuperSuffix -> Arguments .)
    MOD             reduce using rule 216 (SuperSuffix -> Arguments .)
    EXPLAMETARY     reduce using rule 216 (SuperSuffix -> Arguments .)
    ASSIGNMENT      reduce using rule 216 (SuperSuffix -> Arguments .)
    PLUS_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    MINUS_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    TIMES_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    DIVIDE_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    AND_ASSIGNMENT  reduce using rule 216 (SuperSuffix -> Arguments .)
    OR_ASSIGNMENT   reduce using rule 216 (SuperSuffix -> Arguments .)
    POWER_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    MOD_ASSIGNMENT  reduce using rule 216 (SuperSuffix -> Arguments .)
    L_SHIFT_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    R_SHIFT_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    RR_SHIFT_ASSIGNMENT reduce using rule 216 (SuperSuffix -> Arguments .)
    SEMICOLON       reduce using rule 216 (SuperSuffix -> Arguments .)
    R_BRACE         reduce using rule 216 (SuperSuffix -> Arguments .)
    COLON           reduce using rule 216 (SuperSuffix -> Arguments .)
    COMMA           reduce using rule 216 (SuperSuffix -> Arguments .)
    L_BRACE         reduce using rule 216 (SuperSuffix -> Arguments .)
    R_SQUARE_BRACE  reduce using rule 216 (SuperSuffix -> Arguments .)


state 214

    (217) SuperSuffix -> DOT . IDENTIFIER Arguments

    IDENTIFIER      shift and go to state 266


state 215

    (24) square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE . square_brace
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    IMPLEMENTS      reduce using rule 23 (square_brace -> .)
    L_CURL_BRACE    reduce using rule 23 (square_brace -> .)
    IDENTIFIER      reduce using rule 23 (square_brace -> .)
    EXPLAMETARY     reduce using rule 23 (square_brace -> .)
    ASSIGNMENT      reduce using rule 23 (square_brace -> .)
    PLUS_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    MINUS_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    TIMES_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    DIVIDE_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    AND_ASSIGNMENT  reduce using rule 23 (square_brace -> .)
    OR_ASSIGNMENT   reduce using rule 23 (square_brace -> .)
    POWER_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    MOD_ASSIGNMENT  reduce using rule 23 (square_brace -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 23 (square_brace -> .)
    SEMICOLON       reduce using rule 23 (square_brace -> .)
    R_BRACE         reduce using rule 23 (square_brace -> .)
    COLON           reduce using rule 23 (square_brace -> .)
    COMMA           reduce using rule 23 (square_brace -> .)
    L_BRACE         reduce using rule 23 (square_brace -> .)
    R_SQUARE_BRACE  reduce using rule 23 (square_brace -> .)
    DOT             reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    square_brace                   shift and go to state 267

state 216

    (22) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList . ClassBody
    (50) ClassBody -> . L_CURL_BRACE classBodyDeclaration R_CURL_BRACE

    L_CURL_BRACE    shift and go to state 46

    ClassBody                      shift and go to state 268

state 217

    (74) FormalParameters -> L_BRACE . R_BRACE
    (75) FormalParameters -> L_BRACE . FormalParameterDecls R_BRACE
    (78) FormalParameterDecls -> . Type FormalParameterDeclsRest
    (79) FormalParameterDecls -> . variableModifier Type FormalParameterDeclsRest
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    R_BRACE         shift and go to state 271
    FINAL           shift and go to state 155
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

  ! BYTE            [ reduce using rule 76 (variableModifier -> .) ]
  ! SHORT           [ reduce using rule 76 (variableModifier -> .) ]
  ! CHAR            [ reduce using rule 76 (variableModifier -> .) ]
  ! INT             [ reduce using rule 76 (variableModifier -> .) ]
  ! LONG            [ reduce using rule 76 (variableModifier -> .) ]
  ! FLOAT           [ reduce using rule 76 (variableModifier -> .) ]
  ! DOUBLE          [ reduce using rule 76 (variableModifier -> .) ]
  ! BOOLEAN         [ reduce using rule 76 (variableModifier -> .) ]
  ! IDENTIFIER      [ reduce using rule 76 (variableModifier -> .) ]

    BasicType                      shift and go to state 61
    QualifiedIdentifier            shift and go to state 62
    FormalParameterDecls           shift and go to state 269
    variableModifier               shift and go to state 270
    Type                           shift and go to state 272

state 218

    (70) VoidMethodDeclaratorRest -> FormalParameters . Block
    (71) VoidMethodDeclaratorRest -> FormalParameters . SEMICOLON
    (72) VoidMethodDeclaratorRest -> FormalParameters . THROWS QualifiedIdentifierList Block
    (73) VoidMethodDeclaratorRest -> FormalParameters . THROWS QualifiedIdentifierList SEMICOLON
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE

    SEMICOLON       shift and go to state 273
    THROWS          shift and go to state 274
    L_CURL_BRACE    shift and go to state 57

    Block                          shift and go to state 275

state 219

    (58) MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .

    SEMICOLON       reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    STATIC          reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    L_CURL_BRACE    reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    PUBLIC          reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    PROTECTED       reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    PRIVATE         reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    FINAL           reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    NATIVE          reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    VOLATILE        reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    STRICTFP        reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    VOID            reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    CLASS           reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    BYTE            reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    SHORT           reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    CHAR            reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    INT             reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    LONG            reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    FLOAT           reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    DOUBLE          reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    IDENTIFIER      reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)
    R_CURL_BRACE    reduce using rule 58 (MemberDecl -> VOID IDENTIFIER VoidMethodDeclaratorRest .)


state 220

    (61) MethodOrFieldRest -> FieldDeclaratorsRest . SEMICOLON

    SEMICOLON       shift and go to state 276


state 221

    (87) VariableDeclaratorRest -> square_brace .
    (88) VariableDeclaratorRest -> square_brace . ASSIGNMENT VariableInitializer

    COMMA           reduce using rule 87 (VariableDeclaratorRest -> square_brace .)
    SEMICOLON       reduce using rule 87 (VariableDeclaratorRest -> square_brace .)
    ASSIGNMENT      shift and go to state 277


state 222

    (66) MethodDeclaratorRest -> FormalParameters . Block
    (67) MethodDeclaratorRest -> FormalParameters . SEMICOLON
    (68) MethodDeclaratorRest -> FormalParameters . THROWS QualifiedIdentifierList Block
    (69) MethodDeclaratorRest -> FormalParameters . THROWS QualifiedIdentifierList SEMICOLON
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE

    SEMICOLON       shift and go to state 278
    THROWS          shift and go to state 279
    L_CURL_BRACE    shift and go to state 57

    Block                          shift and go to state 280

state 223

    (62) MethodOrFieldRest -> MethodDeclaratorRest .

    SEMICOLON       reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    STATIC          reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    L_CURL_BRACE    reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    PUBLIC          reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    PROTECTED       reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    PRIVATE         reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    ABSTRACT        reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    FINAL           reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    NATIVE          reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    TRANSIENT       reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    VOLATILE        reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    STRICTFP        reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    VOID            reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    CLASS           reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    BYTE            reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    SHORT           reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    CHAR            reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    INT             reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    LONG            reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    FLOAT           reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    DOUBLE          reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    BOOLEAN         reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    IDENTIFIER      reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)
    R_CURL_BRACE    reduce using rule 62 (MethodOrFieldRest -> MethodDeclaratorRest .)


state 224

    (65) FieldDeclaratorsRest -> VariableDeclaratorRest . variableDeclarator
    (63) variableDeclarator -> . COMMA VariableDeclarator variableDeclarator
    (64) variableDeclarator -> .

    COMMA           shift and go to state 281
    SEMICOLON       reduce using rule 64 (variableDeclarator -> .)

    variableDeclarator             shift and go to state 282

state 225

    (60) MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .

    SEMICOLON       reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    STATIC          reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    L_CURL_BRACE    reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    PUBLIC          reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    PROTECTED       reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    PRIVATE         reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    ABSTRACT        reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    FINAL           reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    NATIVE          reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    SYNCHRONIZED    reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    TRANSIENT       reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    VOLATILE        reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    STRICTFP        reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    VOID            reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    CLASS           reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    BYTE            reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    SHORT           reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    CHAR            reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    INT             reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    LONG            reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    FLOAT           reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    DOUBLE          reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    BOOLEAN         reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    IDENTIFIER      reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)
    R_CURL_BRACE    reduce using rule 60 (MethodOrFieldDecl -> Type IDENTIFIER MethodOrFieldRest .)


state 226

    (208) Primary -> BasicType square_brace . DOT CLASS

    DOT             shift and go to state 240


state 227

    (113) Statement -> DO Statement WHILE . ParExpression SEMICOLON
    (212) ParExpression -> . L_BRACE Expression R_BRACE

    L_BRACE         shift and go to state 142

    ParExpression                  shift and go to state 283

state 228

    (190) Expression3 -> L_BRACE Type R_BRACE . Expression3
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression3                    shift and go to state 284

state 229

    (189) Expression3 -> L_BRACE Expression R_BRACE . Expression3
    (212) ParExpression -> L_BRACE Expression R_BRACE .
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

  ! shift/reduce conflict for L_BRACE resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    DOT             reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    INSTANCEOF      reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    OR              reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    AND             reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    POWER           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    EQUAL           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    NOT_EQUAL       reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    LT              reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    GT              reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    LE              reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    GE              reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    L_SHIFT         reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    R_SHIFT         reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    RR_SHIFT        reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    TIMES           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    DIVIDE          reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    MOD             reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    EXPLAMETARY     reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    ASSIGNMENT      reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    PLUS_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    MINUS_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    TIMES_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    DIVIDE_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    AND_ASSIGNMENT  reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    OR_ASSIGNMENT   reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    POWER_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    MOD_ASSIGNMENT  reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    L_SHIFT_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    R_SHIFT_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    RR_SHIFT_ASSIGNMENT reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    R_BRACE         reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    COMMA           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    SEMICOLON       reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    COLON           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    R_SQUARE_BRACE  reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

  ! PLUS_PLUS       [ reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .) ]
  ! MINUS_MINUS     [ reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .) ]
  ! PLUS            [ reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .) ]
  ! MINUS           [ reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .) ]
  ! L_BRACE         [ reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .) ]

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression3                    shift and go to state 285

state 230

    (120) Statement -> RETURN Expression SEMICOLON .

    ELSE            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    SEMICOLON       reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    IF              reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    ASSERT          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    SWITCH          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    DO              reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    CONTINUE        reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    THROW           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    FINAL           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    L_CURL_BRACE    reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    BYTE            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    SHORT           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    CHAR            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    INT             reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    LONG            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    FLOAT           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    DOUBLE          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    BOOLEAN         reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    PUBLIC          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    PROTECTED       reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    PRIVATE         reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    STATIC          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    ABSTRACT        reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    NATIVE          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    TRANSIENT       reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    VOLATILE        reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    STRICTFP        reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    L_BRACE         reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    NOT             reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    CURL_DASH       reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    PLUS            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    MINUS           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    THIS            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    SUPER           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    VOID            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    LITERAL         reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    NUMBER          reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    CLASS           reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    R_CURL_BRACE    reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    CASE            reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)
    DEFAULT         reduce using rule 120 (Statement -> RETURN Expression SEMICOLON .)


state 231

    (122) Statement -> SYNCHRONIZED ParExpression Block .

    ELSE            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    IDENTIFIER      reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    SEMICOLON       reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    IF              reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    ASSERT          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    SWITCH          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    WHILE           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    DO              reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    FOR             reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    BREAK           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    CONTINUE        reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    RETURN          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    THROW           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    SYNCHRONIZED    reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    FINAL           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    L_CURL_BRACE    reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    BYTE            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    SHORT           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    CHAR            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    INT             reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    LONG            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    FLOAT           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    DOUBLE          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    BOOLEAN         reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    PUBLIC          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    PROTECTED       reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    PRIVATE         reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    STATIC          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    ABSTRACT        reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    NATIVE          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    TRANSIENT       reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    VOLATILE        reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    STRICTFP        reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    L_BRACE         reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    PLUS_PLUS       reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    MINUS_MINUS     reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    NOT             reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    CURL_DASH       reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    PLUS            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    MINUS           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    THIS            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    SUPER           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    VOID            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    LITERAL         reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    NUMBER          reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    CLASS           reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    R_CURL_BRACE    reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    CASE            reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)
    DEFAULT         reduce using rule 122 (Statement -> SYNCHRONIZED ParExpression Block .)


state 232

    (212) ParExpression -> L_BRACE Expression . R_BRACE

    R_BRACE         shift and go to state 286


state 233

    (191) Expression3 -> Primary DOT QualifiedIdentifier . postfixOp
    (186) postfixOp -> . PostfixOp postfixOp
    (187) postfixOp -> .
    (199) PostfixOp -> . PLUS_PLUS
    (200) PostfixOp -> . MINUS_MINUS

    INSTANCEOF      reduce using rule 187 (postfixOp -> .)
    OR              reduce using rule 187 (postfixOp -> .)
    AND             reduce using rule 187 (postfixOp -> .)
    POWER           reduce using rule 187 (postfixOp -> .)
    EQUAL           reduce using rule 187 (postfixOp -> .)
    NOT_EQUAL       reduce using rule 187 (postfixOp -> .)
    LT              reduce using rule 187 (postfixOp -> .)
    GT              reduce using rule 187 (postfixOp -> .)
    LE              reduce using rule 187 (postfixOp -> .)
    GE              reduce using rule 187 (postfixOp -> .)
    L_SHIFT         reduce using rule 187 (postfixOp -> .)
    R_SHIFT         reduce using rule 187 (postfixOp -> .)
    RR_SHIFT        reduce using rule 187 (postfixOp -> .)
    PLUS            reduce using rule 187 (postfixOp -> .)
    MINUS           reduce using rule 187 (postfixOp -> .)
    TIMES           reduce using rule 187 (postfixOp -> .)
    DIVIDE          reduce using rule 187 (postfixOp -> .)
    MOD             reduce using rule 187 (postfixOp -> .)
    EXPLAMETARY     reduce using rule 187 (postfixOp -> .)
    ASSIGNMENT      reduce using rule 187 (postfixOp -> .)
    PLUS_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    MINUS_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    TIMES_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    DIVIDE_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    AND_ASSIGNMENT  reduce using rule 187 (postfixOp -> .)
    OR_ASSIGNMENT   reduce using rule 187 (postfixOp -> .)
    POWER_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    MOD_ASSIGNMENT  reduce using rule 187 (postfixOp -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 187 (postfixOp -> .)
    SEMICOLON       reduce using rule 187 (postfixOp -> .)
    R_BRACE         reduce using rule 187 (postfixOp -> .)
    COLON           reduce using rule 187 (postfixOp -> .)
    COMMA           reduce using rule 187 (postfixOp -> .)
    L_BRACE         reduce using rule 187 (postfixOp -> .)
    R_SQUARE_BRACE  reduce using rule 187 (postfixOp -> .)
    PLUS_PLUS       shift and go to state 145
    MINUS_MINUS     shift and go to state 144

    PostfixOp                      shift and go to state 148
    postfixOp                      shift and go to state 287

state 234

    (186) postfixOp -> PostfixOp postfixOp .

    INSTANCEOF      reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    OR              reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    AND             reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    POWER           reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    EQUAL           reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    NOT_EQUAL       reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    LT              reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    GT              reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    LE              reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    GE              reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    L_SHIFT         reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    R_SHIFT         reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    RR_SHIFT        reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    PLUS            reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    MINUS           reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    TIMES           reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    DIVIDE          reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    MOD             reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    EXPLAMETARY     reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    ASSIGNMENT      reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    PLUS_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    MINUS_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    TIMES_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    DIVIDE_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    AND_ASSIGNMENT  reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    OR_ASSIGNMENT   reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    POWER_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    MOD_ASSIGNMENT  reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    L_SHIFT_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    R_SHIFT_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    RR_SHIFT_ASSIGNMENT reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    SEMICOLON       reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    R_BRACE         reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    COLON           reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    COMMA           reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    L_BRACE         reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)
    R_SQUARE_BRACE  reduce using rule 186 (postfixOp -> PostfixOp postfixOp .)


state 235

    (110) Statement -> ASSERT Expression COLON . Expression SEMICOLON
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 288

state 236

    (109) Statement -> ASSERT Expression SEMICOLON .

    ELSE            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    SEMICOLON       reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    IF              reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    ASSERT          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    SWITCH          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    WHILE           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    DO              reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    FOR             reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    BREAK           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    CONTINUE        reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    RETURN          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    THROW           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    FINAL           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    L_CURL_BRACE    reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    BYTE            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    SHORT           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    CHAR            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    INT             reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    LONG            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    FLOAT           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    DOUBLE          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    BOOLEAN         reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    PUBLIC          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    PROTECTED       reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    PRIVATE         reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    STATIC          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    ABSTRACT        reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    NATIVE          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    TRANSIENT       reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    VOLATILE        reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    STRICTFP        reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    L_BRACE         reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    NOT             reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    CURL_DASH       reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    PLUS            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    MINUS           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    THIS            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    SUPER           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    VOID            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    LITERAL         reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    NUMBER          reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    CLASS           reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    R_CURL_BRACE    reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    CASE            reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)
    DEFAULT         reduce using rule 109 (Statement -> ASSERT Expression SEMICOLON .)


state 237

    (102) LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .

    IDENTIFIER      reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    SEMICOLON       reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    IF              reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    ASSERT          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    SWITCH          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    WHILE           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    DO              reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    FOR             reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    BREAK           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    CONTINUE        reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    RETURN          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    THROW           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    SYNCHRONIZED    reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    FINAL           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    L_CURL_BRACE    reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    BYTE            reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    SHORT           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    CHAR            reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    INT             reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    LONG            reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    FLOAT           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    DOUBLE          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    BOOLEAN         reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    PUBLIC          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    PROTECTED       reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    PRIVATE         reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    STATIC          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    ABSTRACT        reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    NATIVE          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    TRANSIENT       reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    VOLATILE        reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    STRICTFP        reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    L_BRACE         reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    PLUS_PLUS       reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    MINUS_MINUS     reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    NOT             reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    CURL_DASH       reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    PLUS            reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    MINUS           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    THIS            reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    SUPER           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    VOID            reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    LITERAL         reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    NUMBER          reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    CLASS           reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    R_CURL_BRACE    reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    CASE            reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)
    DEFAULT         reduce using rule 102 (LocalVariableDeclarationStatement -> Type VariableDeclarators SEMICOLON .)


state 238

    (86) VariableDeclarator -> IDENTIFIER VariableDeclaratorRest .

    COMMA           reduce using rule 86 (VariableDeclarator -> IDENTIFIER VariableDeclaratorRest .)
    SEMICOLON       reduce using rule 86 (VariableDeclarator -> IDENTIFIER VariableDeclaratorRest .)


state 239

    (85) VariableDeclarators -> VariableDeclarator COMMA . VariableDeclarators
    (84) VariableDeclarators -> . VariableDeclarator
    (85) VariableDeclarators -> . VariableDeclarator COMMA VariableDeclarators
    (86) VariableDeclarator -> . IDENTIFIER VariableDeclaratorRest

    IDENTIFIER      shift and go to state 152

    VariableDeclarators            shift and go to state 289
    VariableDeclarator             shift and go to state 153

state 240

    (208) Primary -> BasicType square_brace DOT . CLASS

    CLASS           shift and go to state 290


state 241

    (111) Statement -> SWITCH ParExpression L_CURL_BRACE . SwitchBlockStatementGroups R_CURL_BRACE
    (124) SwitchBlockStatementGroups -> . SwitchBlockStatementGroup SwitchBlockStatementGroups
    (125) SwitchBlockStatementGroups -> .
    (126) SwitchBlockStatementGroup -> . SwitchLabels BlockStatements
    (127) SwitchLabels -> . SwitchLabel
    (128) SwitchLabels -> . SwitchLabel SwitchLabels
    (129) SwitchLabel -> . CASE Expression COLON
    (130) SwitchLabel -> . DEFAULT COLON

    R_CURL_BRACE    reduce using rule 125 (SwitchBlockStatementGroups -> .)
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 294

    SwitchBlockStatementGroups     shift and go to state 291
    SwitchLabel                    shift and go to state 293
    SwitchLabels                   shift and go to state 295
    SwitchBlockStatementGroup      shift and go to state 296

state 242

    (168) Expression2Rest -> INSTANCEOF Type .

    EXPLAMETARY     reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    ASSIGNMENT      reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    PLUS_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    MINUS_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    TIMES_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    DIVIDE_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    AND_ASSIGNMENT  reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    OR_ASSIGNMENT   reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    POWER_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    MOD_ASSIGNMENT  reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    L_SHIFT_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    R_SHIFT_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    RR_SHIFT_ASSIGNMENT reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    SEMICOLON       reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    R_BRACE         reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    COLON           reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    COMMA           reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    L_BRACE         reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)
    R_SQUARE_BRACE  reduce using rule 168 (Expression2Rest -> INSTANCEOF Type .)


state 243

    (167) Expression2Rest -> InfixOp Expression3 . infixOp_expression3
    (165) infixOp_expression3 -> . InfixOp Expression3 infixOp_expression3
    (166) infixOp_expression3 -> .
    (169) InfixOp -> . OR
    (170) InfixOp -> . AND
    (171) InfixOp -> . POWER
    (172) InfixOp -> . EQUAL
    (173) InfixOp -> . NOT_EQUAL
    (174) InfixOp -> . LT
    (175) InfixOp -> . GT
    (176) InfixOp -> . LE
    (177) InfixOp -> . GE
    (178) InfixOp -> . L_SHIFT
    (179) InfixOp -> . R_SHIFT
    (180) InfixOp -> . RR_SHIFT
    (181) InfixOp -> . PLUS
    (182) InfixOp -> . MINUS
    (183) InfixOp -> . TIMES
    (184) InfixOp -> . DIVIDE
    (185) InfixOp -> . MOD

    EXPLAMETARY     reduce using rule 166 (infixOp_expression3 -> .)
    ASSIGNMENT      reduce using rule 166 (infixOp_expression3 -> .)
    PLUS_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    MINUS_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    TIMES_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    DIVIDE_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    AND_ASSIGNMENT  reduce using rule 166 (infixOp_expression3 -> .)
    OR_ASSIGNMENT   reduce using rule 166 (infixOp_expression3 -> .)
    POWER_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    MOD_ASSIGNMENT  reduce using rule 166 (infixOp_expression3 -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    SEMICOLON       reduce using rule 166 (infixOp_expression3 -> .)
    R_BRACE         reduce using rule 166 (infixOp_expression3 -> .)
    COLON           reduce using rule 166 (infixOp_expression3 -> .)
    COMMA           reduce using rule 166 (infixOp_expression3 -> .)
    L_BRACE         reduce using rule 166 (infixOp_expression3 -> .)
    R_SQUARE_BRACE  reduce using rule 166 (infixOp_expression3 -> .)
    OR              shift and go to state 177
    AND             shift and go to state 167
    POWER           shift and go to state 163
    EQUAL           shift and go to state 160
    NOT_EQUAL       shift and go to state 172
    LT              shift and go to state 165
    GT              shift and go to state 168
    LE              shift and go to state 162
    GE              shift and go to state 171
    L_SHIFT         shift and go to state 178
    R_SHIFT         shift and go to state 175
    RR_SHIFT        shift and go to state 164
    PLUS            shift and go to state 166
    MINUS           shift and go to state 161
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 169
    MOD             shift and go to state 179

    InfixOp                        shift and go to state 297
    infixOp_expression3            shift and go to state 298

state 244

    (101) BlockStatement -> IDENTIFIER COLON Statement .

    IDENTIFIER      reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    SEMICOLON       reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    IF              reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    ASSERT          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    SWITCH          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    WHILE           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    DO              reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    FOR             reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    BREAK           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    CONTINUE        reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    RETURN          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    THROW           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    SYNCHRONIZED    reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    FINAL           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    L_CURL_BRACE    reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    BYTE            reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    SHORT           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    CHAR            reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    INT             reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    LONG            reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    FLOAT           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    DOUBLE          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    BOOLEAN         reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    PUBLIC          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    PROTECTED       reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    PRIVATE         reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    STATIC          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    ABSTRACT        reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    NATIVE          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    TRANSIENT       reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    VOLATILE        reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    STRICTFP        reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    L_BRACE         reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    PLUS_PLUS       reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    MINUS_MINUS     reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    NOT             reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    CURL_DASH       reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    PLUS            reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    MINUS           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    THIS            reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    SUPER           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    VOID            reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    LITERAL         reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    NUMBER          reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    CLASS           reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    R_CURL_BRACE    reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    CASE            reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)
    DEFAULT         reduce using rule 101 (BlockStatement -> IDENTIFIER COLON Statement .)


state 245

    (144) ForUpdate -> StatementExpression .
    (145) ForUpdate -> StatementExpression . COMMA ForUpdate

    R_BRACE         reduce using rule 144 (ForUpdate -> StatementExpression .)
    SEMICOLON       reduce using rule 144 (ForUpdate -> StatementExpression .)
    COMMA           shift and go to state 299


state 246

    (136) ForVarControl -> Type . VariableDeclaratorId ForVarControlRest
    (83) VariableDeclaratorId -> . IDENTIFIER square_brace

    IDENTIFIER      shift and go to state 301

    VariableDeclaratorId           shift and go to state 300

state 247

    (137) ForVarControl -> variableModifier . Type VariableDeclaratorId ForVarControlRest
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

    BasicType                      shift and go to state 61
    QualifiedIdentifier            shift and go to state 62
    Type                           shift and go to state 302

state 248

    (132) ForControl -> ForUpdate . SEMICOLON SEMICOLON
    (133) ForControl -> ForUpdate . SEMICOLON Expression SEMICOLON
    (134) ForControl -> ForUpdate . SEMICOLON SEMICOLON ForUpdate
    (135) ForControl -> ForUpdate . SEMICOLON Expression SEMICOLON ForUpdate

    SEMICOLON       shift and go to state 303


state 249

    (114) Statement -> FOR L_BRACE ForControl . R_BRACE Statement

    R_BRACE         shift and go to state 304


state 250

    (131) ForControl -> ForVarControl .

    R_BRACE         reduce using rule 131 (ForControl -> ForVarControl .)


state 251

    (218) IdentifierSuffix -> L_BRACE square_brace . DOT CLASS R_BRACE
    (219) IdentifierSuffix -> L_BRACE square_brace . DOT Expression R_BRACE

    DOT             shift and go to state 305


state 252

    (215) Arguments -> L_BRACE ExpressionList . L_BRACE

    L_BRACE         shift and go to state 306


state 253

    (213) ExpressionList -> Expression .
    (214) ExpressionList -> Expression . COMMA ExpressionList

    L_BRACE         reduce using rule 213 (ExpressionList -> Expression .)
    COMMA           shift and go to state 307


state 254

    (222) IdentifierSuffix -> DOT THIS .

    DOT             reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    PLUS_PLUS       reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    MINUS_MINUS     reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    INSTANCEOF      reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    OR              reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    AND             reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    POWER           reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    EQUAL           reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    NOT_EQUAL       reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    LT              reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    GT              reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    LE              reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    GE              reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    L_SHIFT         reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    R_SHIFT         reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    RR_SHIFT        reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    PLUS            reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    MINUS           reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    TIMES           reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    DIVIDE          reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    MOD             reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    EXPLAMETARY     reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    ASSIGNMENT      reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    PLUS_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    MINUS_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    TIMES_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    DIVIDE_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    AND_ASSIGNMENT  reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    OR_ASSIGNMENT   reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    POWER_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    MOD_ASSIGNMENT  reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    L_SHIFT_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    R_SHIFT_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    RR_SHIFT_ASSIGNMENT reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    SEMICOLON       reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    R_BRACE         reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    COMMA           reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    COLON           reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    L_BRACE         reduce using rule 222 (IdentifierSuffix -> DOT THIS .)
    R_SQUARE_BRACE  reduce using rule 222 (IdentifierSuffix -> DOT THIS .)


state 255

    (223) IdentifierSuffix -> DOT SUPER . Arguments
    (215) Arguments -> . L_BRACE ExpressionList L_BRACE

    L_BRACE         shift and go to state 208

    Arguments                      shift and go to state 308

state 256

    (221) IdentifierSuffix -> DOT CLASS .

    DOT             reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    PLUS_PLUS       reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    MINUS_MINUS     reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    INSTANCEOF      reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    OR              reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    AND             reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    POWER           reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    EQUAL           reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    NOT_EQUAL       reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    LT              reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    GT              reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    LE              reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    GE              reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    L_SHIFT         reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    R_SHIFT         reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    RR_SHIFT        reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    PLUS            reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    MINUS           reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    TIMES           reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    DIVIDE          reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    MOD             reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    EXPLAMETARY     reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    ASSIGNMENT      reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    PLUS_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    MINUS_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    TIMES_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    DIVIDE_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    AND_ASSIGNMENT  reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    OR_ASSIGNMENT   reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    POWER_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    MOD_ASSIGNMENT  reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    L_SHIFT_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    R_SHIFT_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    RR_SHIFT_ASSIGNMENT reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    SEMICOLON       reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    R_BRACE         reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    COMMA           reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    COLON           reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    L_BRACE         reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)
    R_SQUARE_BRACE  reduce using rule 221 (IdentifierSuffix -> DOT CLASS .)


state 257

    (147) Expression -> Expression1 AssignmentOperator Expression1 .

    SEMICOLON       reduce using rule 147 (Expression -> Expression1 AssignmentOperator Expression1 .)
    COMMA           reduce using rule 147 (Expression -> Expression1 AssignmentOperator Expression1 .)
    L_BRACE         reduce using rule 147 (Expression -> Expression1 AssignmentOperator Expression1 .)
    R_BRACE         reduce using rule 147 (Expression -> Expression1 AssignmentOperator Expression1 .)
    R_SQUARE_BRACE  reduce using rule 147 (Expression -> Expression1 AssignmentOperator Expression1 .)
    COLON           reduce using rule 147 (Expression -> Expression1 AssignmentOperator Expression1 .)


state 258

    (209) Primary -> VOID DOT CLASS .

    DOT             reduce using rule 209 (Primary -> VOID DOT CLASS .)
    PLUS_PLUS       reduce using rule 209 (Primary -> VOID DOT CLASS .)
    MINUS_MINUS     reduce using rule 209 (Primary -> VOID DOT CLASS .)
    INSTANCEOF      reduce using rule 209 (Primary -> VOID DOT CLASS .)
    OR              reduce using rule 209 (Primary -> VOID DOT CLASS .)
    AND             reduce using rule 209 (Primary -> VOID DOT CLASS .)
    POWER           reduce using rule 209 (Primary -> VOID DOT CLASS .)
    EQUAL           reduce using rule 209 (Primary -> VOID DOT CLASS .)
    NOT_EQUAL       reduce using rule 209 (Primary -> VOID DOT CLASS .)
    LT              reduce using rule 209 (Primary -> VOID DOT CLASS .)
    GT              reduce using rule 209 (Primary -> VOID DOT CLASS .)
    LE              reduce using rule 209 (Primary -> VOID DOT CLASS .)
    GE              reduce using rule 209 (Primary -> VOID DOT CLASS .)
    L_SHIFT         reduce using rule 209 (Primary -> VOID DOT CLASS .)
    R_SHIFT         reduce using rule 209 (Primary -> VOID DOT CLASS .)
    RR_SHIFT        reduce using rule 209 (Primary -> VOID DOT CLASS .)
    PLUS            reduce using rule 209 (Primary -> VOID DOT CLASS .)
    MINUS           reduce using rule 209 (Primary -> VOID DOT CLASS .)
    TIMES           reduce using rule 209 (Primary -> VOID DOT CLASS .)
    DIVIDE          reduce using rule 209 (Primary -> VOID DOT CLASS .)
    MOD             reduce using rule 209 (Primary -> VOID DOT CLASS .)
    EXPLAMETARY     reduce using rule 209 (Primary -> VOID DOT CLASS .)
    ASSIGNMENT      reduce using rule 209 (Primary -> VOID DOT CLASS .)
    PLUS_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    MINUS_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    TIMES_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    DIVIDE_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    AND_ASSIGNMENT  reduce using rule 209 (Primary -> VOID DOT CLASS .)
    OR_ASSIGNMENT   reduce using rule 209 (Primary -> VOID DOT CLASS .)
    POWER_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    MOD_ASSIGNMENT  reduce using rule 209 (Primary -> VOID DOT CLASS .)
    L_SHIFT_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    R_SHIFT_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    RR_SHIFT_ASSIGNMENT reduce using rule 209 (Primary -> VOID DOT CLASS .)
    SEMICOLON       reduce using rule 209 (Primary -> VOID DOT CLASS .)
    COMMA           reduce using rule 209 (Primary -> VOID DOT CLASS .)
    R_BRACE         reduce using rule 209 (Primary -> VOID DOT CLASS .)
    L_BRACE         reduce using rule 209 (Primary -> VOID DOT CLASS .)
    COLON           reduce using rule 209 (Primary -> VOID DOT CLASS .)
    R_SQUARE_BRACE  reduce using rule 209 (Primary -> VOID DOT CLASS .)


state 259

    (103) LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators . SEMICOLON

    SEMICOLON       shift and go to state 309


state 260

    (107) Statement -> IF ParExpression Statement .
    (108) Statement -> IF ParExpression Statement . ELSE Statement

  ! shift/reduce conflict for ELSE resolved as shift
    IDENTIFIER      reduce using rule 107 (Statement -> IF ParExpression Statement .)
    SEMICOLON       reduce using rule 107 (Statement -> IF ParExpression Statement .)
    IF              reduce using rule 107 (Statement -> IF ParExpression Statement .)
    ASSERT          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    SWITCH          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    WHILE           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    DO              reduce using rule 107 (Statement -> IF ParExpression Statement .)
    FOR             reduce using rule 107 (Statement -> IF ParExpression Statement .)
    BREAK           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    CONTINUE        reduce using rule 107 (Statement -> IF ParExpression Statement .)
    RETURN          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    THROW           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    SYNCHRONIZED    reduce using rule 107 (Statement -> IF ParExpression Statement .)
    FINAL           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    L_CURL_BRACE    reduce using rule 107 (Statement -> IF ParExpression Statement .)
    BYTE            reduce using rule 107 (Statement -> IF ParExpression Statement .)
    SHORT           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    CHAR            reduce using rule 107 (Statement -> IF ParExpression Statement .)
    INT             reduce using rule 107 (Statement -> IF ParExpression Statement .)
    LONG            reduce using rule 107 (Statement -> IF ParExpression Statement .)
    FLOAT           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    DOUBLE          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    BOOLEAN         reduce using rule 107 (Statement -> IF ParExpression Statement .)
    PUBLIC          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    PROTECTED       reduce using rule 107 (Statement -> IF ParExpression Statement .)
    PRIVATE         reduce using rule 107 (Statement -> IF ParExpression Statement .)
    STATIC          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    ABSTRACT        reduce using rule 107 (Statement -> IF ParExpression Statement .)
    NATIVE          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    TRANSIENT       reduce using rule 107 (Statement -> IF ParExpression Statement .)
    VOLATILE        reduce using rule 107 (Statement -> IF ParExpression Statement .)
    STRICTFP        reduce using rule 107 (Statement -> IF ParExpression Statement .)
    L_BRACE         reduce using rule 107 (Statement -> IF ParExpression Statement .)
    PLUS_PLUS       reduce using rule 107 (Statement -> IF ParExpression Statement .)
    MINUS_MINUS     reduce using rule 107 (Statement -> IF ParExpression Statement .)
    NOT             reduce using rule 107 (Statement -> IF ParExpression Statement .)
    CURL_DASH       reduce using rule 107 (Statement -> IF ParExpression Statement .)
    PLUS            reduce using rule 107 (Statement -> IF ParExpression Statement .)
    MINUS           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    THIS            reduce using rule 107 (Statement -> IF ParExpression Statement .)
    SUPER           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    VOID            reduce using rule 107 (Statement -> IF ParExpression Statement .)
    LITERAL         reduce using rule 107 (Statement -> IF ParExpression Statement .)
    NUMBER          reduce using rule 107 (Statement -> IF ParExpression Statement .)
    CLASS           reduce using rule 107 (Statement -> IF ParExpression Statement .)
    R_CURL_BRACE    reduce using rule 107 (Statement -> IF ParExpression Statement .)
    CASE            reduce using rule 107 (Statement -> IF ParExpression Statement .)
    DEFAULT         reduce using rule 107 (Statement -> IF ParExpression Statement .)
    ELSE            shift and go to state 310

  ! ELSE            [ reduce using rule 107 (Statement -> IF ParExpression Statement .) ]


state 261

    (162) Expression1Rest -> EXPLAMETARY Expression . COLON Expression1

    COLON           shift and go to state 311


state 262

    (112) Statement -> WHILE ParExpression Statement .

    ELSE            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    IDENTIFIER      reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    SEMICOLON       reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    IF              reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    ASSERT          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    SWITCH          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    WHILE           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    DO              reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    FOR             reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    BREAK           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    CONTINUE        reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    RETURN          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    THROW           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    SYNCHRONIZED    reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    FINAL           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    L_CURL_BRACE    reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    BYTE            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    SHORT           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    CHAR            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    INT             reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    LONG            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    FLOAT           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    DOUBLE          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    BOOLEAN         reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    PUBLIC          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    PROTECTED       reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    PRIVATE         reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    STATIC          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    ABSTRACT        reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    NATIVE          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    TRANSIENT       reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    VOLATILE        reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    STRICTFP        reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    L_BRACE         reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    PLUS_PLUS       reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    MINUS_MINUS     reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    NOT             reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    CURL_DASH       reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    PLUS            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    MINUS           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    THIS            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    SUPER           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    VOID            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    LITERAL         reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    NUMBER          reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    CLASS           reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    R_CURL_BRACE    reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    CASE            reduce using rule 112 (Statement -> WHILE ParExpression Statement .)
    DEFAULT         reduce using rule 112 (Statement -> WHILE ParExpression Statement .)


state 263

    (121) Statement -> THROW Expression SEMICOLON .

    ELSE            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    SEMICOLON       reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    IF              reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    ASSERT          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    SWITCH          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    WHILE           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    DO              reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    FOR             reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    BREAK           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    CONTINUE        reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    RETURN          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    THROW           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    FINAL           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    L_CURL_BRACE    reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    BYTE            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    SHORT           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    CHAR            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    INT             reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    LONG            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    FLOAT           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    DOUBLE          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    BOOLEAN         reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    PUBLIC          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    PROTECTED       reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    PRIVATE         reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    STATIC          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    ABSTRACT        reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    NATIVE          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    TRANSIENT       reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    VOLATILE        reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    STRICTFP        reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    L_BRACE         reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    NOT             reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    CURL_DASH       reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    PLUS            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    MINUS           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    THIS            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    SUPER           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    VOID            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    LITERAL         reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    NUMBER          reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    CLASS           reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    R_CURL_BRACE    reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    CASE            reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)
    DEFAULT         reduce using rule 121 (Statement -> THROW Expression SEMICOLON .)


state 264

    (116) Statement -> BREAK IDENTIFIER SEMICOLON .

    ELSE            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    IF              reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    ASSERT          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    DO              reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    SYNCHRONIZED    reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    L_CURL_BRACE    reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    BYTE            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    INT             reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    ABSTRACT        reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    NATIVE          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    TRANSIENT       reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    VOLATILE        reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    STRICTFP        reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    L_BRACE         reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    CURL_DASH       reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    SUPER           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    LITERAL         reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    R_CURL_BRACE    reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 116 (Statement -> BREAK IDENTIFIER SEMICOLON .)


state 265

    (118) Statement -> CONTINUE IDENTIFIER SEMICOLON .

    ELSE            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    ASSERT          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    DO              reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    SYNCHRONIZED    reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    L_CURL_BRACE    reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    BYTE            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    INT             reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    ABSTRACT        reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    NATIVE          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    TRANSIENT       reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    VOLATILE        reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    STRICTFP        reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    L_BRACE         reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    CURL_DASH       reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    SUPER           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    LITERAL         reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    R_CURL_BRACE    reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 118 (Statement -> CONTINUE IDENTIFIER SEMICOLON .)


state 266

    (217) SuperSuffix -> DOT IDENTIFIER . Arguments
    (215) Arguments -> . L_BRACE ExpressionList L_BRACE

    L_BRACE         shift and go to state 208

    Arguments                      shift and go to state 312

state 267

    (24) square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .

    IMPLEMENTS      reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    L_CURL_BRACE    reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    IDENTIFIER      reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    EXPLAMETARY     reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    ASSIGNMENT      reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    PLUS_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    MINUS_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    TIMES_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    DIVIDE_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    AND_ASSIGNMENT  reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    OR_ASSIGNMENT   reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    POWER_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    MOD_ASSIGNMENT  reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    L_SHIFT_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    R_SHIFT_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    RR_SHIFT_ASSIGNMENT reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    SEMICOLON       reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    R_BRACE         reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    COLON           reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    COMMA           reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    L_BRACE         reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    R_SQUARE_BRACE  reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)
    DOT             reduce using rule 24 (square_brace -> L_SQUARE_BRACE R_SQUARE_BRACE square_brace .)


state 268

    (22) NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .

    SEMICOLON       reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    PUBLIC          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    PROTECTED       reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    PRIVATE         reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    STATIC          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    ABSTRACT        reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    FINAL           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    NATIVE          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    SYNCHRONIZED    reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    TRANSIENT       reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    VOLATILE        reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    STRICTFP        reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    CLASS           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    $end            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    IDENTIFIER      reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    IF              reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    ASSERT          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    SWITCH          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    WHILE           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    DO              reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    FOR             reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    BREAK           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    CONTINUE        reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    RETURN          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    THROW           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    L_CURL_BRACE    reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    BYTE            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    SHORT           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    CHAR            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    INT             reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    LONG            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    FLOAT           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    DOUBLE          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    BOOLEAN         reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    L_BRACE         reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    PLUS_PLUS       reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    MINUS_MINUS     reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    NOT             reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    CURL_DASH       reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    PLUS            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    MINUS           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    THIS            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    SUPER           reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    VOID            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    LITERAL         reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    NUMBER          reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    R_CURL_BRACE    reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    CASE            reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)
    DEFAULT         reduce using rule 22 (NormalClassDeclaration -> CLASS IDENTIFIER EXTENDS Type IMPLEMENTS TypeList ClassBody .)


state 269

    (75) FormalParameters -> L_BRACE FormalParameterDecls . R_BRACE

    R_BRACE         shift and go to state 313


state 270

    (79) FormalParameterDecls -> variableModifier . Type FormalParameterDeclsRest
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

    BasicType                      shift and go to state 61
    QualifiedIdentifier            shift and go to state 62
    Type                           shift and go to state 314

state 271

    (74) FormalParameters -> L_BRACE R_BRACE .

    SEMICOLON       reduce using rule 74 (FormalParameters -> L_BRACE R_BRACE .)
    THROWS          reduce using rule 74 (FormalParameters -> L_BRACE R_BRACE .)
    L_CURL_BRACE    reduce using rule 74 (FormalParameters -> L_BRACE R_BRACE .)


state 272

    (78) FormalParameterDecls -> Type . FormalParameterDeclsRest
    (80) FormalParameterDeclsRest -> . VariableDeclaratorId
    (81) FormalParameterDeclsRest -> . VariableDeclaratorId COMMA FormalParameterDecls
    (82) FormalParameterDeclsRest -> . DOT DOT DOT VariableDeclaratorId
    (83) VariableDeclaratorId -> . IDENTIFIER square_brace

    DOT             shift and go to state 317
    IDENTIFIER      shift and go to state 301

    VariableDeclaratorId           shift and go to state 316
    FormalParameterDeclsRest       shift and go to state 315

state 273

    (71) VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .

    SEMICOLON       reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    STATIC          reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    L_CURL_BRACE    reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    PUBLIC          reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    PROTECTED       reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    PRIVATE         reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    ABSTRACT        reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    FINAL           reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    NATIVE          reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    SYNCHRONIZED    reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    TRANSIENT       reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    VOLATILE        reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    STRICTFP        reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    VOID            reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    CLASS           reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    BYTE            reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    SHORT           reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    CHAR            reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    INT             reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    LONG            reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    FLOAT           reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    DOUBLE          reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    BOOLEAN         reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    IDENTIFIER      reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)
    R_CURL_BRACE    reduce using rule 71 (VoidMethodDeclaratorRest -> FormalParameters SEMICOLON .)


state 274

    (72) VoidMethodDeclaratorRest -> FormalParameters THROWS . QualifiedIdentifierList Block
    (73) VoidMethodDeclaratorRest -> FormalParameters THROWS . QualifiedIdentifierList SEMICOLON
    (9) QualifiedIdentifierList -> . QualifiedIdentifier
    (10) QualifiedIdentifierList -> . QualifiedIdentifier COMMA QualifiedIdentifierList
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 318
    QualifiedIdentifierList        shift and go to state 319

state 275

    (70) VoidMethodDeclaratorRest -> FormalParameters Block .

    SEMICOLON       reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    STATIC          reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    L_CURL_BRACE    reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    PUBLIC          reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    PROTECTED       reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    PRIVATE         reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    ABSTRACT        reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    FINAL           reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    NATIVE          reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    SYNCHRONIZED    reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    TRANSIENT       reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    VOLATILE        reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    STRICTFP        reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    VOID            reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    CLASS           reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    BYTE            reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    SHORT           reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    CHAR            reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    INT             reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    LONG            reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    FLOAT           reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    DOUBLE          reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    BOOLEAN         reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    IDENTIFIER      reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)
    R_CURL_BRACE    reduce using rule 70 (VoidMethodDeclaratorRest -> FormalParameters Block .)


state 276

    (61) MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .

    SEMICOLON       reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    STATIC          reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    L_CURL_BRACE    reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    PUBLIC          reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    PROTECTED       reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    PRIVATE         reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    ABSTRACT        reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    FINAL           reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    NATIVE          reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    SYNCHRONIZED    reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    TRANSIENT       reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    VOLATILE        reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    STRICTFP        reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    VOID            reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    CLASS           reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    BYTE            reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    SHORT           reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    CHAR            reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    INT             reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    LONG            reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    FLOAT           reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    DOUBLE          reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    BOOLEAN         reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    IDENTIFIER      reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)
    R_CURL_BRACE    reduce using rule 61 (MethodOrFieldRest -> FieldDeclaratorsRest SEMICOLON .)


state 277

    (88) VariableDeclaratorRest -> square_brace ASSIGNMENT . VariableInitializer
    (89) VariableInitializer -> . ArrayInitializer
    (90) VariableInitializer -> . Expression
    (93) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE
    (94) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_SQUARE_BRACE  shift and go to state 322
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    VariableInitializer            shift and go to state 320
    Literal                        shift and go to state 94
    BasicType                      shift and go to state 133
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    ArrayInitializer               shift and go to state 321
    QualifiedIdentifier            shift and go to state 136
    Expression                     shift and go to state 323
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 278

    (67) MethodDeclaratorRest -> FormalParameters SEMICOLON .

    SEMICOLON       reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    STATIC          reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    L_CURL_BRACE    reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    PUBLIC          reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    PROTECTED       reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    PRIVATE         reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    ABSTRACT        reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    FINAL           reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    NATIVE          reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    SYNCHRONIZED    reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    TRANSIENT       reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    VOLATILE        reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    STRICTFP        reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    VOID            reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    CLASS           reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    BYTE            reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    SHORT           reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    CHAR            reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    INT             reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    LONG            reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    FLOAT           reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    DOUBLE          reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    BOOLEAN         reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)
    R_CURL_BRACE    reduce using rule 67 (MethodDeclaratorRest -> FormalParameters SEMICOLON .)


state 279

    (68) MethodDeclaratorRest -> FormalParameters THROWS . QualifiedIdentifierList Block
    (69) MethodDeclaratorRest -> FormalParameters THROWS . QualifiedIdentifierList SEMICOLON
    (9) QualifiedIdentifierList -> . QualifiedIdentifier
    (10) QualifiedIdentifierList -> . QualifiedIdentifier COMMA QualifiedIdentifierList
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    QualifiedIdentifier            shift and go to state 318
    QualifiedIdentifierList        shift and go to state 324

state 280

    (66) MethodDeclaratorRest -> FormalParameters Block .

    SEMICOLON       reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    STATIC          reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    L_CURL_BRACE    reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    PUBLIC          reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    PROTECTED       reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    PRIVATE         reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    ABSTRACT        reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    FINAL           reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    NATIVE          reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    SYNCHRONIZED    reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    TRANSIENT       reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    VOLATILE        reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    STRICTFP        reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    VOID            reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    CLASS           reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    BYTE            reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    SHORT           reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    CHAR            reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    INT             reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    LONG            reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    FLOAT           reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    DOUBLE          reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    BOOLEAN         reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    IDENTIFIER      reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)
    R_CURL_BRACE    reduce using rule 66 (MethodDeclaratorRest -> FormalParameters Block .)


state 281

    (63) variableDeclarator -> COMMA . VariableDeclarator variableDeclarator
    (86) VariableDeclarator -> . IDENTIFIER VariableDeclaratorRest

    IDENTIFIER      shift and go to state 152

    VariableDeclarator             shift and go to state 325

state 282

    (65) FieldDeclaratorsRest -> VariableDeclaratorRest variableDeclarator .

    SEMICOLON       reduce using rule 65 (FieldDeclaratorsRest -> VariableDeclaratorRest variableDeclarator .)


state 283

    (113) Statement -> DO Statement WHILE ParExpression . SEMICOLON

    SEMICOLON       shift and go to state 326


state 284

    (190) Expression3 -> L_BRACE Type R_BRACE Expression3 .

    INSTANCEOF      reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    OR              reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    AND             reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    POWER           reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    EQUAL           reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    NOT_EQUAL       reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    LT              reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    GT              reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    LE              reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    GE              reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    L_SHIFT         reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    R_SHIFT         reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    RR_SHIFT        reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    PLUS            reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    MINUS           reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    TIMES           reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    DIVIDE          reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    MOD             reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    EXPLAMETARY     reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    ASSIGNMENT      reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    PLUS_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    MINUS_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    TIMES_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    DIVIDE_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    AND_ASSIGNMENT  reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    OR_ASSIGNMENT   reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    POWER_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    MOD_ASSIGNMENT  reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    L_SHIFT_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    R_SHIFT_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    COMMA           reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    L_BRACE         reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    R_BRACE         reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    R_SQUARE_BRACE  reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    SEMICOLON       reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)
    COLON           reduce using rule 190 (Expression3 -> L_BRACE Type R_BRACE Expression3 .)


state 285

    (189) Expression3 -> L_BRACE Expression R_BRACE Expression3 .

    INSTANCEOF      reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    OR              reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    AND             reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    POWER           reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    EQUAL           reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    NOT_EQUAL       reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    LT              reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    GT              reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    LE              reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    GE              reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    L_SHIFT         reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    R_SHIFT         reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    RR_SHIFT        reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    PLUS            reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    MINUS           reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    TIMES           reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    DIVIDE          reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    MOD             reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    EXPLAMETARY     reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    ASSIGNMENT      reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    PLUS_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    MINUS_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    TIMES_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    DIVIDE_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    AND_ASSIGNMENT  reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    OR_ASSIGNMENT   reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    POWER_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    MOD_ASSIGNMENT  reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    L_SHIFT_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    R_SHIFT_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    COMMA           reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    L_BRACE         reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    R_BRACE         reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    R_SQUARE_BRACE  reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    SEMICOLON       reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)
    COLON           reduce using rule 189 (Expression3 -> L_BRACE Expression R_BRACE Expression3 .)


state 286

    (212) ParExpression -> L_BRACE Expression R_BRACE .

    L_CURL_BRACE    reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    SEMICOLON       reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    IF              reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    ASSERT          reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    SWITCH          reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    WHILE           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    DO              reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    FOR             reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    BREAK           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    CONTINUE        reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    RETURN          reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    THROW           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    SYNCHRONIZED    reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    L_BRACE         reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    PLUS_PLUS       reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    MINUS_MINUS     reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    NOT             reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    CURL_DASH       reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    PLUS            reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    MINUS           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    THIS            reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    SUPER           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    VOID            reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    LITERAL         reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    NUMBER          reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    IDENTIFIER      reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    BYTE            reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    SHORT           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    CHAR            reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    INT             reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    LONG            reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    FLOAT           reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    DOUBLE          reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)
    BOOLEAN         reduce using rule 212 (ParExpression -> L_BRACE Expression R_BRACE .)


state 287

    (191) Expression3 -> Primary DOT QualifiedIdentifier postfixOp .

    INSTANCEOF      reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    OR              reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    AND             reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    POWER           reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    EQUAL           reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    NOT_EQUAL       reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    LT              reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    GT              reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    LE              reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    GE              reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    L_SHIFT         reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    R_SHIFT         reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    RR_SHIFT        reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    PLUS            reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    MINUS           reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    TIMES           reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    DIVIDE          reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    MOD             reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    EXPLAMETARY     reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    ASSIGNMENT      reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    PLUS_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    MINUS_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    TIMES_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    DIVIDE_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    AND_ASSIGNMENT  reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    OR_ASSIGNMENT   reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    POWER_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    MOD_ASSIGNMENT  reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    L_SHIFT_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    R_SHIFT_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    RR_SHIFT_ASSIGNMENT reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    COMMA           reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    L_BRACE         reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    R_BRACE         reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    R_SQUARE_BRACE  reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    SEMICOLON       reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)
    COLON           reduce using rule 191 (Expression3 -> Primary DOT QualifiedIdentifier postfixOp .)


state 288

    (110) Statement -> ASSERT Expression COLON Expression . SEMICOLON

    SEMICOLON       shift and go to state 327


state 289

    (85) VariableDeclarators -> VariableDeclarator COMMA VariableDeclarators .

    SEMICOLON       reduce using rule 85 (VariableDeclarators -> VariableDeclarator COMMA VariableDeclarators .)


state 290

    (208) Primary -> BasicType square_brace DOT CLASS .

    DOT             reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    PLUS_PLUS       reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    MINUS_MINUS     reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    INSTANCEOF      reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    OR              reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    AND             reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    POWER           reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    EQUAL           reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    NOT_EQUAL       reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    LT              reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    GT              reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    LE              reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    GE              reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    L_SHIFT         reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    R_SHIFT         reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    RR_SHIFT        reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    PLUS            reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    MINUS           reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    TIMES           reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    DIVIDE          reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    MOD             reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    EXPLAMETARY     reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    ASSIGNMENT      reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    PLUS_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    MINUS_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    TIMES_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    DIVIDE_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    AND_ASSIGNMENT  reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    OR_ASSIGNMENT   reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    POWER_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    MOD_ASSIGNMENT  reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    L_SHIFT_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    R_SHIFT_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    RR_SHIFT_ASSIGNMENT reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    SEMICOLON       reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    COMMA           reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    R_BRACE         reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    L_BRACE         reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    COLON           reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)
    R_SQUARE_BRACE  reduce using rule 208 (Primary -> BasicType square_brace DOT CLASS .)


state 291

    (111) Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups . R_CURL_BRACE

    R_CURL_BRACE    shift and go to state 328


state 292

    (129) SwitchLabel -> CASE . Expression COLON
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 329

state 293

    (127) SwitchLabels -> SwitchLabel .
    (128) SwitchLabels -> SwitchLabel . SwitchLabels
    (127) SwitchLabels -> . SwitchLabel
    (128) SwitchLabels -> . SwitchLabel SwitchLabels
    (129) SwitchLabel -> . CASE Expression COLON
    (130) SwitchLabel -> . DEFAULT COLON

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    IDENTIFIER      reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    SEMICOLON       reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    IF              reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    ASSERT          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    SWITCH          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    WHILE           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    DO              reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    FOR             reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    BREAK           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    CONTINUE        reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    RETURN          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    THROW           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    SYNCHRONIZED    reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    FINAL           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    L_CURL_BRACE    reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    BYTE            reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    SHORT           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    CHAR            reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    INT             reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    LONG            reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    FLOAT           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    DOUBLE          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    BOOLEAN         reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    PUBLIC          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    PROTECTED       reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    PRIVATE         reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    STATIC          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    ABSTRACT        reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    NATIVE          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    TRANSIENT       reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    VOLATILE        reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    STRICTFP        reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    L_BRACE         reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    PLUS_PLUS       reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    MINUS_MINUS     reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    NOT             reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    CURL_DASH       reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    PLUS            reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    MINUS           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    THIS            reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    SUPER           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    VOID            reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    LITERAL         reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    NUMBER          reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    CLASS           reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    R_CURL_BRACE    reduce using rule 127 (SwitchLabels -> SwitchLabel .)
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 294

  ! CASE            [ reduce using rule 127 (SwitchLabels -> SwitchLabel .) ]
  ! DEFAULT         [ reduce using rule 127 (SwitchLabels -> SwitchLabel .) ]

    SwitchLabel                    shift and go to state 293
    SwitchLabels                   shift and go to state 330

state 294

    (130) SwitchLabel -> DEFAULT . COLON

    COLON           shift and go to state 331


state 295

    (126) SwitchBlockStatementGroup -> SwitchLabels . BlockStatements
    (96) BlockStatements -> . BlockStatement BlockStatements
    (97) BlockStatements -> .
    (98) BlockStatement -> . LocalVariableDeclarationStatement
    (99) BlockStatement -> . ClassOrInterfaceDeclaration
    (100) BlockStatement -> . Statement
    (101) BlockStatement -> . IDENTIFIER COLON Statement
    (102) LocalVariableDeclarationStatement -> . Type VariableDeclarators SEMICOLON
    (103) LocalVariableDeclarationStatement -> . variableModifier Type VariableDeclarators SEMICOLON
    (17) ClassOrInterfaceDeclaration -> . modifier ClassDeclaration
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier
    (25) modifier -> . Modifier modifier
    (26) modifier -> .
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (39) Modifier -> . PUBLIC
    (40) Modifier -> . PROTECTED
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) Modifier -> . ABSTRACT
    (44) Modifier -> . FINAL
    (45) Modifier -> . NATIVE
    (46) Modifier -> . SYNCHRONIZED
    (47) Modifier -> . TRANSIENT
    (48) Modifier -> . VOLATILE
    (49) Modifier -> . STRICTFP
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    CASE            reduce using rule 97 (BlockStatements -> .)
    DEFAULT         reduce using rule 97 (BlockStatements -> .)
    R_CURL_BRACE    reduce using rule 97 (BlockStatements -> .)
    IDENTIFIER      shift and go to state 103
    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 83
    FINAL           shift and go to state 92
    CLASS           reduce using rule 26 (modifier -> .)
    L_CURL_BRACE    shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    PUBLIC          shift and go to state 23
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 21
    ABSTRACT        shift and go to state 19
    NATIVE          shift and go to state 24
    TRANSIENT       shift and go to state 8
    VOLATILE        shift and go to state 13
    STRICTFP        shift and go to state 16
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85

  ! BYTE            [ reduce using rule 76 (variableModifier -> .) ]
  ! SHORT           [ reduce using rule 76 (variableModifier -> .) ]
  ! CHAR            [ reduce using rule 76 (variableModifier -> .) ]
  ! INT             [ reduce using rule 76 (variableModifier -> .) ]
  ! LONG            [ reduce using rule 76 (variableModifier -> .) ]
  ! FLOAT           [ reduce using rule 76 (variableModifier -> .) ]
  ! DOUBLE          [ reduce using rule 76 (variableModifier -> .) ]
  ! BOOLEAN         [ reduce using rule 76 (variableModifier -> .) ]
  ! IDENTIFIER      [ reduce using rule 76 (variableModifier -> .) ]

    PrefixOp                       shift and go to state 84
    StatementExpression            shift and go to state 88
    Statement                      shift and go to state 89
    Type                           shift and go to state 91
    BasicType                      shift and go to state 96
    BlockStatements                shift and go to state 332
    LocalVariableDeclarationStatement shift and go to state 100
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 106
    BlockStatement                 shift and go to state 101
    variableModifier               shift and go to state 109
    Literal                        shift and go to state 94
    Modifier                       shift and go to state 14
    Expression                     shift and go to state 111
    Block                          shift and go to state 112
    ClassOrInterfaceDeclaration    shift and go to state 115
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86
    modifier                       shift and go to state 22

state 296

    (124) SwitchBlockStatementGroups -> SwitchBlockStatementGroup . SwitchBlockStatementGroups
    (124) SwitchBlockStatementGroups -> . SwitchBlockStatementGroup SwitchBlockStatementGroups
    (125) SwitchBlockStatementGroups -> .
    (126) SwitchBlockStatementGroup -> . SwitchLabels BlockStatements
    (127) SwitchLabels -> . SwitchLabel
    (128) SwitchLabels -> . SwitchLabel SwitchLabels
    (129) SwitchLabel -> . CASE Expression COLON
    (130) SwitchLabel -> . DEFAULT COLON

    R_CURL_BRACE    reduce using rule 125 (SwitchBlockStatementGroups -> .)
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 294

    SwitchBlockStatementGroups     shift and go to state 333
    SwitchLabel                    shift and go to state 293
    SwitchLabels                   shift and go to state 295
    SwitchBlockStatementGroup      shift and go to state 296

state 297

    (165) infixOp_expression3 -> InfixOp . Expression3 infixOp_expression3
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression3                    shift and go to state 334

state 298

    (167) Expression2Rest -> InfixOp Expression3 infixOp_expression3 .

    EXPLAMETARY     reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    ASSIGNMENT      reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    PLUS_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    MINUS_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    TIMES_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    DIVIDE_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    AND_ASSIGNMENT  reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    OR_ASSIGNMENT   reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    POWER_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    MOD_ASSIGNMENT  reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    L_SHIFT_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    R_SHIFT_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    SEMICOLON       reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    R_BRACE         reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    COLON           reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    COMMA           reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    L_BRACE         reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)
    R_SQUARE_BRACE  reduce using rule 167 (Expression2Rest -> InfixOp Expression3 infixOp_expression3 .)


state 299

    (145) ForUpdate -> StatementExpression COMMA . ForUpdate
    (144) ForUpdate -> . StatementExpression
    (145) ForUpdate -> . StatementExpression COMMA ForUpdate
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ForUpdate                      shift and go to state 335
    Literal                        shift and go to state 94
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    StatementExpression            shift and go to state 245
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 111

state 300

    (136) ForVarControl -> Type VariableDeclaratorId . ForVarControlRest
    (138) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON SEMICOLON
    (139) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON
    (140) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON SEMICOLON ForUpdate
    (141) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON ForUpdate
    (142) ForVarControlRest -> . COLON Expression
    (143) ForVariableDeclaratorsRest -> . ASSIGNMENT VariableInitializer variableDeclarator

    COLON           shift and go to state 337
    ASSIGNMENT      shift and go to state 338

    ForVarControlRest              shift and go to state 336
    ForVariableDeclaratorsRest     shift and go to state 339

state 301

    (83) VariableDeclaratorId -> IDENTIFIER . square_brace
    (23) square_brace -> .
    (24) square_brace -> . L_SQUARE_BRACE R_SQUARE_BRACE square_brace

    COLON           reduce using rule 23 (square_brace -> .)
    ASSIGNMENT      reduce using rule 23 (square_brace -> .)
    COMMA           reduce using rule 23 (square_brace -> .)
    R_BRACE         reduce using rule 23 (square_brace -> .)
    L_SQUARE_BRACE  shift and go to state 125

    square_brace                   shift and go to state 340

state 302

    (137) ForVarControl -> variableModifier Type . VariableDeclaratorId ForVarControlRest
    (83) VariableDeclaratorId -> . IDENTIFIER square_brace

    IDENTIFIER      shift and go to state 301

    VariableDeclaratorId           shift and go to state 341

state 303

    (132) ForControl -> ForUpdate SEMICOLON . SEMICOLON
    (133) ForControl -> ForUpdate SEMICOLON . Expression SEMICOLON
    (134) ForControl -> ForUpdate SEMICOLON . SEMICOLON ForUpdate
    (135) ForControl -> ForUpdate SEMICOLON . Expression SEMICOLON ForUpdate
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 342
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 343

state 304

    (114) Statement -> FOR L_BRACE ForControl R_BRACE . Statement
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 134
    L_CURL_BRACE    shift and go to state 57
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    Statement                      shift and go to state 344
    BasicType                      shift and go to state 133
    Block                          shift and go to state 112
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 88
    Expression                     shift and go to state 111
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 305

    (218) IdentifierSuffix -> L_BRACE square_brace DOT . CLASS R_BRACE
    (219) IdentifierSuffix -> L_BRACE square_brace DOT . Expression R_BRACE
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    CLASS           shift and go to state 345
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 346

state 306

    (215) Arguments -> L_BRACE ExpressionList L_BRACE .

    DOT             reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    PLUS_PLUS       reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    MINUS_MINUS     reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    INSTANCEOF      reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    OR              reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    AND             reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    POWER           reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    EQUAL           reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    NOT_EQUAL       reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    LT              reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    GT              reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    LE              reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    GE              reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    L_SHIFT         reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    R_SHIFT         reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    RR_SHIFT        reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    PLUS            reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    MINUS           reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    TIMES           reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    DIVIDE          reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    MOD             reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    EXPLAMETARY     reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    ASSIGNMENT      reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    PLUS_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    MINUS_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    TIMES_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    DIVIDE_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    AND_ASSIGNMENT  reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    OR_ASSIGNMENT   reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    POWER_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    MOD_ASSIGNMENT  reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    L_SHIFT_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    R_SHIFT_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    RR_SHIFT_ASSIGNMENT reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    SEMICOLON       reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    R_BRACE         reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    COLON           reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    COMMA           reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    L_BRACE         reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)
    R_SQUARE_BRACE  reduce using rule 215 (Arguments -> L_BRACE ExpressionList L_BRACE .)


state 307

    (214) ExpressionList -> Expression COMMA . ExpressionList
    (213) ExpressionList -> . Expression
    (214) ExpressionList -> . Expression COMMA ExpressionList
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    ExpressionList                 shift and go to state 347
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 253

state 308

    (223) IdentifierSuffix -> DOT SUPER Arguments .

    DOT             reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    PLUS_PLUS       reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    MINUS_MINUS     reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    INSTANCEOF      reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    OR              reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    AND             reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    POWER           reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    EQUAL           reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    NOT_EQUAL       reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    LT              reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    GT              reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    LE              reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    GE              reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    L_SHIFT         reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    R_SHIFT         reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    RR_SHIFT        reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    PLUS            reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    MINUS           reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    TIMES           reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    DIVIDE          reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    MOD             reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    EXPLAMETARY     reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    ASSIGNMENT      reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    PLUS_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    MINUS_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    TIMES_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    DIVIDE_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    AND_ASSIGNMENT  reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    OR_ASSIGNMENT   reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    POWER_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    MOD_ASSIGNMENT  reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    L_SHIFT_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    R_SHIFT_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    RR_SHIFT_ASSIGNMENT reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    SEMICOLON       reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    R_BRACE         reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    COMMA           reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    COLON           reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    L_BRACE         reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)
    R_SQUARE_BRACE  reduce using rule 223 (IdentifierSuffix -> DOT SUPER Arguments .)


state 309

    (103) LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .

    IDENTIFIER      reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    SEMICOLON       reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    IF              reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    ASSERT          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    SWITCH          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    WHILE           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    DO              reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    FOR             reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    BREAK           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    CONTINUE        reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    RETURN          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    THROW           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    SYNCHRONIZED    reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    FINAL           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    L_CURL_BRACE    reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    BYTE            reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    SHORT           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    CHAR            reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    INT             reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    LONG            reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    FLOAT           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    DOUBLE          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    BOOLEAN         reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    PUBLIC          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    PROTECTED       reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    PRIVATE         reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    STATIC          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    ABSTRACT        reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    NATIVE          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    TRANSIENT       reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    VOLATILE        reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    STRICTFP        reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    L_BRACE         reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    PLUS_PLUS       reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    MINUS_MINUS     reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    NOT             reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    CURL_DASH       reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    PLUS            reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    MINUS           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    THIS            reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    SUPER           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    VOID            reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    LITERAL         reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    NUMBER          reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    CLASS           reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    R_CURL_BRACE    reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    CASE            reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)
    DEFAULT         reduce using rule 103 (LocalVariableDeclarationStatement -> variableModifier Type VariableDeclarators SEMICOLON .)


state 310

    (108) Statement -> IF ParExpression Statement ELSE . Statement
    (104) Statement -> . Block
    (105) Statement -> . SEMICOLON
    (106) Statement -> . StatementExpression SEMICOLON
    (107) Statement -> . IF ParExpression Statement
    (108) Statement -> . IF ParExpression Statement ELSE Statement
    (109) Statement -> . ASSERT Expression SEMICOLON
    (110) Statement -> . ASSERT Expression COLON Expression SEMICOLON
    (111) Statement -> . SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE
    (112) Statement -> . WHILE ParExpression Statement
    (113) Statement -> . DO Statement WHILE ParExpression SEMICOLON
    (114) Statement -> . FOR L_BRACE ForControl R_BRACE Statement
    (115) Statement -> . BREAK SEMICOLON
    (116) Statement -> . BREAK IDENTIFIER SEMICOLON
    (117) Statement -> . CONTINUE SEMICOLON
    (118) Statement -> . CONTINUE IDENTIFIER SEMICOLON
    (119) Statement -> . RETURN SEMICOLON
    (120) Statement -> . RETURN Expression SEMICOLON
    (121) Statement -> . THROW Expression SEMICOLON
    (122) Statement -> . SYNCHRONIZED ParExpression Block
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 93
    IF              shift and go to state 113
    ASSERT          shift and go to state 87
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 117
    DO              shift and go to state 80
    FOR             shift and go to state 105
    BREAK           shift and go to state 119
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 82
    THROW           shift and go to state 118
    SYNCHRONIZED    shift and go to state 134
    L_CURL_BRACE    shift and go to state 57
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    Statement                      shift and go to state 348
    BasicType                      shift and go to state 133
    Block                          shift and go to state 112
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 88
    Expression                     shift and go to state 111
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 311

    (162) Expression1Rest -> EXPLAMETARY Expression COLON . Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 349
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114

state 312

    (217) SuperSuffix -> DOT IDENTIFIER Arguments .

    DOT             reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    PLUS_PLUS       reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    MINUS_MINUS     reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    INSTANCEOF      reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    OR              reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    AND             reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    POWER           reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    EQUAL           reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    NOT_EQUAL       reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    LT              reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    GT              reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    LE              reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    GE              reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    L_SHIFT         reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    R_SHIFT         reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    RR_SHIFT        reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    PLUS            reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    MINUS           reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    TIMES           reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    DIVIDE          reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    MOD             reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    EXPLAMETARY     reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    ASSIGNMENT      reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    PLUS_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    MINUS_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    TIMES_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    DIVIDE_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    AND_ASSIGNMENT  reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    OR_ASSIGNMENT   reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    POWER_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    MOD_ASSIGNMENT  reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    L_SHIFT_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    R_SHIFT_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    RR_SHIFT_ASSIGNMENT reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    SEMICOLON       reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    R_BRACE         reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    COLON           reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    COMMA           reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    L_BRACE         reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)
    R_SQUARE_BRACE  reduce using rule 217 (SuperSuffix -> DOT IDENTIFIER Arguments .)


state 313

    (75) FormalParameters -> L_BRACE FormalParameterDecls R_BRACE .

    SEMICOLON       reduce using rule 75 (FormalParameters -> L_BRACE FormalParameterDecls R_BRACE .)
    THROWS          reduce using rule 75 (FormalParameters -> L_BRACE FormalParameterDecls R_BRACE .)
    L_CURL_BRACE    reduce using rule 75 (FormalParameters -> L_BRACE FormalParameterDecls R_BRACE .)


state 314

    (79) FormalParameterDecls -> variableModifier Type . FormalParameterDeclsRest
    (80) FormalParameterDeclsRest -> . VariableDeclaratorId
    (81) FormalParameterDeclsRest -> . VariableDeclaratorId COMMA FormalParameterDecls
    (82) FormalParameterDeclsRest -> . DOT DOT DOT VariableDeclaratorId
    (83) VariableDeclaratorId -> . IDENTIFIER square_brace

    DOT             shift and go to state 317
    IDENTIFIER      shift and go to state 301

    FormalParameterDeclsRest       shift and go to state 350
    VariableDeclaratorId           shift and go to state 316

state 315

    (78) FormalParameterDecls -> Type FormalParameterDeclsRest .

    R_BRACE         reduce using rule 78 (FormalParameterDecls -> Type FormalParameterDeclsRest .)


state 316

    (80) FormalParameterDeclsRest -> VariableDeclaratorId .
    (81) FormalParameterDeclsRest -> VariableDeclaratorId . COMMA FormalParameterDecls

    R_BRACE         reduce using rule 80 (FormalParameterDeclsRest -> VariableDeclaratorId .)
    COMMA           shift and go to state 351


state 317

    (82) FormalParameterDeclsRest -> DOT . DOT DOT VariableDeclaratorId

    DOT             shift and go to state 352


state 318

    (9) QualifiedIdentifierList -> QualifiedIdentifier .
    (10) QualifiedIdentifierList -> QualifiedIdentifier . COMMA QualifiedIdentifierList

    SEMICOLON       reduce using rule 9 (QualifiedIdentifierList -> QualifiedIdentifier .)
    L_CURL_BRACE    reduce using rule 9 (QualifiedIdentifierList -> QualifiedIdentifier .)
    COMMA           shift and go to state 353


state 319

    (72) VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList . Block
    (73) VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList . SEMICOLON
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE

    SEMICOLON       shift and go to state 354
    L_CURL_BRACE    shift and go to state 57

    Block                          shift and go to state 355

state 320

    (88) VariableDeclaratorRest -> square_brace ASSIGNMENT VariableInitializer .

    COMMA           reduce using rule 88 (VariableDeclaratorRest -> square_brace ASSIGNMENT VariableInitializer .)
    SEMICOLON       reduce using rule 88 (VariableDeclaratorRest -> square_brace ASSIGNMENT VariableInitializer .)


state 321

    (89) VariableInitializer -> ArrayInitializer .

    COMMA           reduce using rule 89 (VariableInitializer -> ArrayInitializer .)
    R_SQUARE_BRACE  reduce using rule 89 (VariableInitializer -> ArrayInitializer .)
    SEMICOLON       reduce using rule 89 (VariableInitializer -> ArrayInitializer .)


state 322

    (93) ArrayInitializer -> L_SQUARE_BRACE . variableInitializer R_SQUARE_BRACE
    (94) ArrayInitializer -> L_SQUARE_BRACE . variableInitializer R_SQUARE_BRACE COMMA
    (91) variableInitializer -> . VariableInitializer
    (92) variableInitializer -> . VariableInitializer COMMA variableInitializer
    (89) VariableInitializer -> . ArrayInitializer
    (90) VariableInitializer -> . Expression
    (93) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE
    (94) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_SQUARE_BRACE  shift and go to state 322
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    VariableInitializer            shift and go to state 356
    Literal                        shift and go to state 94
    BasicType                      shift and go to state 133
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    ArrayInitializer               shift and go to state 321
    QualifiedIdentifier            shift and go to state 136
    Expression                     shift and go to state 323
    variableInitializer            shift and go to state 357
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 323

    (90) VariableInitializer -> Expression .

    COMMA           reduce using rule 90 (VariableInitializer -> Expression .)
    R_SQUARE_BRACE  reduce using rule 90 (VariableInitializer -> Expression .)
    SEMICOLON       reduce using rule 90 (VariableInitializer -> Expression .)


state 324

    (68) MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList . Block
    (69) MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList . SEMICOLON
    (95) Block -> . L_CURL_BRACE BlockStatements R_CURL_BRACE

    SEMICOLON       shift and go to state 358
    L_CURL_BRACE    shift and go to state 57

    Block                          shift and go to state 359

state 325

    (63) variableDeclarator -> COMMA VariableDeclarator . variableDeclarator
    (63) variableDeclarator -> . COMMA VariableDeclarator variableDeclarator
    (64) variableDeclarator -> .

    COMMA           shift and go to state 281
    SEMICOLON       reduce using rule 64 (variableDeclarator -> .)

    variableDeclarator             shift and go to state 360

state 326

    (113) Statement -> DO Statement WHILE ParExpression SEMICOLON .

    ELSE            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    IDENTIFIER      reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    SEMICOLON       reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    IF              reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    ASSERT          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    SWITCH          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    WHILE           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    DO              reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    FOR             reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    BREAK           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    CONTINUE        reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    RETURN          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    THROW           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    FINAL           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    L_CURL_BRACE    reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    BYTE            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    SHORT           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    CHAR            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    INT             reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    LONG            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    FLOAT           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    DOUBLE          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    BOOLEAN         reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    PUBLIC          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    PROTECTED       reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    PRIVATE         reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    STATIC          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    ABSTRACT        reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    NATIVE          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    TRANSIENT       reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    VOLATILE        reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    STRICTFP        reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    L_BRACE         reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    PLUS_PLUS       reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    MINUS_MINUS     reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    NOT             reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    CURL_DASH       reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    PLUS            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    MINUS           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    THIS            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    SUPER           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    VOID            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    LITERAL         reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    NUMBER          reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    CLASS           reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    R_CURL_BRACE    reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    CASE            reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)
    DEFAULT         reduce using rule 113 (Statement -> DO Statement WHILE ParExpression SEMICOLON .)


state 327

    (110) Statement -> ASSERT Expression COLON Expression SEMICOLON .

    ELSE            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    SEMICOLON       reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    IF              reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    ASSERT          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    SWITCH          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    WHILE           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    DO              reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    FOR             reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    BREAK           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    CONTINUE        reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    RETURN          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    THROW           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    FINAL           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    L_CURL_BRACE    reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    BYTE            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    SHORT           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    CHAR            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    INT             reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    LONG            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    FLOAT           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    DOUBLE          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    BOOLEAN         reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    PUBLIC          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    PROTECTED       reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    PRIVATE         reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    STATIC          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    ABSTRACT        reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    NATIVE          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    TRANSIENT       reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    VOLATILE        reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    STRICTFP        reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    L_BRACE         reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    NOT             reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    CURL_DASH       reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    PLUS            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    MINUS           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    THIS            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    SUPER           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    VOID            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    LITERAL         reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    NUMBER          reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    CLASS           reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    R_CURL_BRACE    reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    CASE            reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)
    DEFAULT         reduce using rule 110 (Statement -> ASSERT Expression COLON Expression SEMICOLON .)


state 328

    (111) Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .

    ELSE            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    IDENTIFIER      reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    SEMICOLON       reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    IF              reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    ASSERT          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    SWITCH          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    WHILE           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    DO              reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    FOR             reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    BREAK           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    CONTINUE        reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    RETURN          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    THROW           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    SYNCHRONIZED    reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    FINAL           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    L_CURL_BRACE    reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    BYTE            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    SHORT           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    CHAR            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    INT             reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    LONG            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    FLOAT           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    DOUBLE          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    BOOLEAN         reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    PUBLIC          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    PROTECTED       reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    PRIVATE         reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    STATIC          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    ABSTRACT        reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    NATIVE          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    TRANSIENT       reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    VOLATILE        reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    STRICTFP        reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    L_BRACE         reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    PLUS_PLUS       reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    MINUS_MINUS     reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    NOT             reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    CURL_DASH       reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    PLUS            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    MINUS           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    THIS            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    SUPER           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    VOID            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    LITERAL         reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    NUMBER          reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    CLASS           reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    R_CURL_BRACE    reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    CASE            reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)
    DEFAULT         reduce using rule 111 (Statement -> SWITCH ParExpression L_CURL_BRACE SwitchBlockStatementGroups R_CURL_BRACE .)


state 329

    (129) SwitchLabel -> CASE Expression . COLON

    COLON           shift and go to state 361


state 330

    (128) SwitchLabels -> SwitchLabel SwitchLabels .

    IDENTIFIER      reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    SEMICOLON       reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    IF              reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    ASSERT          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    SWITCH          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    WHILE           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    DO              reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    FOR             reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    BREAK           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    CONTINUE        reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    RETURN          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    THROW           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    SYNCHRONIZED    reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    FINAL           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    L_CURL_BRACE    reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    BYTE            reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    SHORT           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    CHAR            reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    INT             reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    LONG            reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    FLOAT           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    DOUBLE          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    BOOLEAN         reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    PUBLIC          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    PROTECTED       reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    PRIVATE         reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    STATIC          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    ABSTRACT        reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    NATIVE          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    TRANSIENT       reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    VOLATILE        reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    STRICTFP        reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    L_BRACE         reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    PLUS_PLUS       reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    MINUS_MINUS     reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    NOT             reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    CURL_DASH       reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    PLUS            reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    MINUS           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    THIS            reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    SUPER           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    VOID            reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    LITERAL         reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    NUMBER          reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    CLASS           reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    CASE            reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    DEFAULT         reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)
    R_CURL_BRACE    reduce using rule 128 (SwitchLabels -> SwitchLabel SwitchLabels .)


state 331

    (130) SwitchLabel -> DEFAULT COLON .

    CASE            reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    DEFAULT         reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    SEMICOLON       reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    IF              reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    ASSERT          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    SWITCH          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    WHILE           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    DO              reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    FOR             reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    BREAK           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    CONTINUE        reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    RETURN          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    THROW           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    SYNCHRONIZED    reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    FINAL           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    L_CURL_BRACE    reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    BYTE            reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    SHORT           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    CHAR            reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    INT             reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    LONG            reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    FLOAT           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    DOUBLE          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    PUBLIC          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    PROTECTED       reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    PRIVATE         reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    STATIC          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    ABSTRACT        reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    NATIVE          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    TRANSIENT       reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    VOLATILE        reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    STRICTFP        reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    L_BRACE         reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    PLUS_PLUS       reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    MINUS_MINUS     reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    NOT             reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    CURL_DASH       reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    PLUS            reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    MINUS           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    THIS            reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    SUPER           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    VOID            reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    LITERAL         reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    NUMBER          reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    CLASS           reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)
    R_CURL_BRACE    reduce using rule 130 (SwitchLabel -> DEFAULT COLON .)


state 332

    (126) SwitchBlockStatementGroup -> SwitchLabels BlockStatements .

    CASE            reduce using rule 126 (SwitchBlockStatementGroup -> SwitchLabels BlockStatements .)
    DEFAULT         reduce using rule 126 (SwitchBlockStatementGroup -> SwitchLabels BlockStatements .)
    R_CURL_BRACE    reduce using rule 126 (SwitchBlockStatementGroup -> SwitchLabels BlockStatements .)


state 333

    (124) SwitchBlockStatementGroups -> SwitchBlockStatementGroup SwitchBlockStatementGroups .

    R_CURL_BRACE    reduce using rule 124 (SwitchBlockStatementGroups -> SwitchBlockStatementGroup SwitchBlockStatementGroups .)


state 334

    (165) infixOp_expression3 -> InfixOp Expression3 . infixOp_expression3
    (165) infixOp_expression3 -> . InfixOp Expression3 infixOp_expression3
    (166) infixOp_expression3 -> .
    (169) InfixOp -> . OR
    (170) InfixOp -> . AND
    (171) InfixOp -> . POWER
    (172) InfixOp -> . EQUAL
    (173) InfixOp -> . NOT_EQUAL
    (174) InfixOp -> . LT
    (175) InfixOp -> . GT
    (176) InfixOp -> . LE
    (177) InfixOp -> . GE
    (178) InfixOp -> . L_SHIFT
    (179) InfixOp -> . R_SHIFT
    (180) InfixOp -> . RR_SHIFT
    (181) InfixOp -> . PLUS
    (182) InfixOp -> . MINUS
    (183) InfixOp -> . TIMES
    (184) InfixOp -> . DIVIDE
    (185) InfixOp -> . MOD

    EXPLAMETARY     reduce using rule 166 (infixOp_expression3 -> .)
    ASSIGNMENT      reduce using rule 166 (infixOp_expression3 -> .)
    PLUS_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    MINUS_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    TIMES_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    DIVIDE_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    AND_ASSIGNMENT  reduce using rule 166 (infixOp_expression3 -> .)
    OR_ASSIGNMENT   reduce using rule 166 (infixOp_expression3 -> .)
    POWER_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    MOD_ASSIGNMENT  reduce using rule 166 (infixOp_expression3 -> .)
    L_SHIFT_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    R_SHIFT_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    RR_SHIFT_ASSIGNMENT reduce using rule 166 (infixOp_expression3 -> .)
    SEMICOLON       reduce using rule 166 (infixOp_expression3 -> .)
    R_BRACE         reduce using rule 166 (infixOp_expression3 -> .)
    COLON           reduce using rule 166 (infixOp_expression3 -> .)
    COMMA           reduce using rule 166 (infixOp_expression3 -> .)
    L_BRACE         reduce using rule 166 (infixOp_expression3 -> .)
    R_SQUARE_BRACE  reduce using rule 166 (infixOp_expression3 -> .)
    OR              shift and go to state 177
    AND             shift and go to state 167
    POWER           shift and go to state 163
    EQUAL           shift and go to state 160
    NOT_EQUAL       shift and go to state 172
    LT              shift and go to state 165
    GT              shift and go to state 168
    LE              shift and go to state 162
    GE              shift and go to state 171
    L_SHIFT         shift and go to state 178
    R_SHIFT         shift and go to state 175
    RR_SHIFT        shift and go to state 164
    PLUS            shift and go to state 166
    MINUS           shift and go to state 161
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 169
    MOD             shift and go to state 179

    InfixOp                        shift and go to state 297
    infixOp_expression3            shift and go to state 362

state 335

    (145) ForUpdate -> StatementExpression COMMA ForUpdate .

    R_BRACE         reduce using rule 145 (ForUpdate -> StatementExpression COMMA ForUpdate .)
    SEMICOLON       reduce using rule 145 (ForUpdate -> StatementExpression COMMA ForUpdate .)


state 336

    (136) ForVarControl -> Type VariableDeclaratorId ForVarControlRest .

    R_BRACE         reduce using rule 136 (ForVarControl -> Type VariableDeclaratorId ForVarControlRest .)


state 337

    (142) ForVarControlRest -> COLON . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 363

state 338

    (143) ForVariableDeclaratorsRest -> ASSIGNMENT . VariableInitializer variableDeclarator
    (89) VariableInitializer -> . ArrayInitializer
    (90) VariableInitializer -> . Expression
    (93) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE
    (94) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_SQUARE_BRACE  shift and go to state 322
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    VariableInitializer            shift and go to state 364
    Literal                        shift and go to state 94
    BasicType                      shift and go to state 133
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    ArrayInitializer               shift and go to state 321
    QualifiedIdentifier            shift and go to state 136
    Expression                     shift and go to state 323
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 339

    (138) ForVarControlRest -> ForVariableDeclaratorsRest . SEMICOLON SEMICOLON
    (139) ForVarControlRest -> ForVariableDeclaratorsRest . SEMICOLON Expression SEMICOLON
    (140) ForVarControlRest -> ForVariableDeclaratorsRest . SEMICOLON SEMICOLON ForUpdate
    (141) ForVarControlRest -> ForVariableDeclaratorsRest . SEMICOLON Expression SEMICOLON ForUpdate

    SEMICOLON       shift and go to state 365


state 340

    (83) VariableDeclaratorId -> IDENTIFIER square_brace .

    COMMA           reduce using rule 83 (VariableDeclaratorId -> IDENTIFIER square_brace .)
    R_BRACE         reduce using rule 83 (VariableDeclaratorId -> IDENTIFIER square_brace .)
    COLON           reduce using rule 83 (VariableDeclaratorId -> IDENTIFIER square_brace .)
    ASSIGNMENT      reduce using rule 83 (VariableDeclaratorId -> IDENTIFIER square_brace .)


state 341

    (137) ForVarControl -> variableModifier Type VariableDeclaratorId . ForVarControlRest
    (138) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON SEMICOLON
    (139) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON
    (140) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON SEMICOLON ForUpdate
    (141) ForVarControlRest -> . ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON ForUpdate
    (142) ForVarControlRest -> . COLON Expression
    (143) ForVariableDeclaratorsRest -> . ASSIGNMENT VariableInitializer variableDeclarator

    COLON           shift and go to state 337
    ASSIGNMENT      shift and go to state 338

    ForVarControlRest              shift and go to state 366
    ForVariableDeclaratorsRest     shift and go to state 339

state 342

    (132) ForControl -> ForUpdate SEMICOLON SEMICOLON .
    (134) ForControl -> ForUpdate SEMICOLON SEMICOLON . ForUpdate
    (144) ForUpdate -> . StatementExpression
    (145) ForUpdate -> . StatementExpression COMMA ForUpdate
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    R_BRACE         reduce using rule 132 (ForControl -> ForUpdate SEMICOLON SEMICOLON .)
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ForUpdate                      shift and go to state 367
    Literal                        shift and go to state 94
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    StatementExpression            shift and go to state 245
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 111

state 343

    (133) ForControl -> ForUpdate SEMICOLON Expression . SEMICOLON
    (135) ForControl -> ForUpdate SEMICOLON Expression . SEMICOLON ForUpdate

    SEMICOLON       shift and go to state 368


state 344

    (114) Statement -> FOR L_BRACE ForControl R_BRACE Statement .

    ELSE            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    IDENTIFIER      reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    SEMICOLON       reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    IF              reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    ASSERT          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    SWITCH          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    WHILE           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    DO              reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    FOR             reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    BREAK           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    CONTINUE        reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    RETURN          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    THROW           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    SYNCHRONIZED    reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    FINAL           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    L_CURL_BRACE    reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    BYTE            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    SHORT           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    CHAR            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    INT             reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    LONG            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    FLOAT           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    DOUBLE          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    BOOLEAN         reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    PUBLIC          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    PROTECTED       reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    PRIVATE         reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    STATIC          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    ABSTRACT        reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    NATIVE          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    TRANSIENT       reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    VOLATILE        reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    STRICTFP        reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    L_BRACE         reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    PLUS_PLUS       reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    MINUS_MINUS     reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    NOT             reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    CURL_DASH       reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    PLUS            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    MINUS           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    THIS            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    SUPER           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    VOID            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    LITERAL         reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    NUMBER          reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    CLASS           reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    R_CURL_BRACE    reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    CASE            reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)
    DEFAULT         reduce using rule 114 (Statement -> FOR L_BRACE ForControl R_BRACE Statement .)


state 345

    (218) IdentifierSuffix -> L_BRACE square_brace DOT CLASS . R_BRACE

    R_BRACE         shift and go to state 369


state 346

    (219) IdentifierSuffix -> L_BRACE square_brace DOT Expression . R_BRACE

    R_BRACE         shift and go to state 370


state 347

    (214) ExpressionList -> Expression COMMA ExpressionList .

    L_BRACE         reduce using rule 214 (ExpressionList -> Expression COMMA ExpressionList .)


state 348

    (108) Statement -> IF ParExpression Statement ELSE Statement .

    ELSE            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    IDENTIFIER      reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    SEMICOLON       reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    IF              reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    ASSERT          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    SWITCH          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    WHILE           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    DO              reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    FOR             reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    BREAK           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    CONTINUE        reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    RETURN          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    THROW           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    SYNCHRONIZED    reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    FINAL           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    L_CURL_BRACE    reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    BYTE            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    SHORT           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    CHAR            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    INT             reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    LONG            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    FLOAT           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    DOUBLE          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    BOOLEAN         reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    PUBLIC          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    PROTECTED       reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    PRIVATE         reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    STATIC          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    ABSTRACT        reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    NATIVE          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    TRANSIENT       reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    VOLATILE        reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    STRICTFP        reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    L_BRACE         reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    PLUS_PLUS       reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    MINUS_MINUS     reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    NOT             reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    CURL_DASH       reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    PLUS            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    MINUS           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    THIS            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    SUPER           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    VOID            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    LITERAL         reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    NUMBER          reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    CLASS           reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    R_CURL_BRACE    reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    CASE            reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)
    DEFAULT         reduce using rule 108 (Statement -> IF ParExpression Statement ELSE Statement .)


state 349

    (162) Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .

    ASSIGNMENT      reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    PLUS_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    MINUS_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    TIMES_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    DIVIDE_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    AND_ASSIGNMENT  reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    OR_ASSIGNMENT   reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    POWER_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    MOD_ASSIGNMENT  reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    L_SHIFT_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    R_SHIFT_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    SEMICOLON       reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    R_BRACE         reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    COLON           reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    COMMA           reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    L_BRACE         reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)
    R_SQUARE_BRACE  reduce using rule 162 (Expression1Rest -> EXPLAMETARY Expression COLON Expression1 .)


state 350

    (79) FormalParameterDecls -> variableModifier Type FormalParameterDeclsRest .

    R_BRACE         reduce using rule 79 (FormalParameterDecls -> variableModifier Type FormalParameterDeclsRest .)


state 351

    (81) FormalParameterDeclsRest -> VariableDeclaratorId COMMA . FormalParameterDecls
    (78) FormalParameterDecls -> . Type FormalParameterDeclsRest
    (79) FormalParameterDecls -> . variableModifier Type FormalParameterDeclsRest
    (27) Type -> . BasicType square_brace
    (28) Type -> . QualifiedIdentifier square_brace
    (76) variableModifier -> .
    (77) variableModifier -> . FINAL variableModifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    FINAL           shift and go to state 155
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67
    IDENTIFIER      shift and go to state 7

  ! BYTE            [ reduce using rule 76 (variableModifier -> .) ]
  ! SHORT           [ reduce using rule 76 (variableModifier -> .) ]
  ! CHAR            [ reduce using rule 76 (variableModifier -> .) ]
  ! INT             [ reduce using rule 76 (variableModifier -> .) ]
  ! LONG            [ reduce using rule 76 (variableModifier -> .) ]
  ! FLOAT           [ reduce using rule 76 (variableModifier -> .) ]
  ! DOUBLE          [ reduce using rule 76 (variableModifier -> .) ]
  ! BOOLEAN         [ reduce using rule 76 (variableModifier -> .) ]
  ! IDENTIFIER      [ reduce using rule 76 (variableModifier -> .) ]

    BasicType                      shift and go to state 61
    QualifiedIdentifier            shift and go to state 62
    FormalParameterDecls           shift and go to state 371
    variableModifier               shift and go to state 270
    Type                           shift and go to state 272

state 352

    (82) FormalParameterDeclsRest -> DOT DOT . DOT VariableDeclaratorId

    DOT             shift and go to state 372


state 353

    (10) QualifiedIdentifierList -> QualifiedIdentifier COMMA . QualifiedIdentifierList
    (9) QualifiedIdentifierList -> . QualifiedIdentifier
    (10) QualifiedIdentifierList -> . QualifiedIdentifier COMMA QualifiedIdentifierList
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier

    IDENTIFIER      shift and go to state 7

    QualifiedIdentifierList        shift and go to state 373
    QualifiedIdentifier            shift and go to state 318

state 354

    (73) VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .

    SEMICOLON       reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    STATIC          reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    L_CURL_BRACE    reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    PUBLIC          reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    PROTECTED       reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    PRIVATE         reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    ABSTRACT        reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    FINAL           reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    NATIVE          reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    SYNCHRONIZED    reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    TRANSIENT       reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    VOLATILE        reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    STRICTFP        reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    VOID            reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    CLASS           reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    BYTE            reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    SHORT           reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    CHAR            reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    INT             reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    LONG            reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    FLOAT           reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    DOUBLE          reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    BOOLEAN         reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    IDENTIFIER      reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    R_CURL_BRACE    reduce using rule 73 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)


state 355

    (72) VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .

    SEMICOLON       reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    STATIC          reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    L_CURL_BRACE    reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    PUBLIC          reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    PROTECTED       reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    PRIVATE         reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    ABSTRACT        reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    FINAL           reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    NATIVE          reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    SYNCHRONIZED    reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    TRANSIENT       reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    VOLATILE        reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    STRICTFP        reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    VOID            reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    CLASS           reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    BYTE            reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    SHORT           reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    CHAR            reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    INT             reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    LONG            reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    FLOAT           reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    DOUBLE          reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    BOOLEAN         reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    IDENTIFIER      reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    R_CURL_BRACE    reduce using rule 72 (VoidMethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)


state 356

    (91) variableInitializer -> VariableInitializer .
    (92) variableInitializer -> VariableInitializer . COMMA variableInitializer

    R_SQUARE_BRACE  reduce using rule 91 (variableInitializer -> VariableInitializer .)
    COMMA           shift and go to state 374


state 357

    (93) ArrayInitializer -> L_SQUARE_BRACE variableInitializer . R_SQUARE_BRACE
    (94) ArrayInitializer -> L_SQUARE_BRACE variableInitializer . R_SQUARE_BRACE COMMA

    R_SQUARE_BRACE  shift and go to state 375


state 358

    (69) MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .

    SEMICOLON       reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    STATIC          reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    L_CURL_BRACE    reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    PUBLIC          reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    PROTECTED       reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    PRIVATE         reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    ABSTRACT        reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    FINAL           reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    NATIVE          reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    SYNCHRONIZED    reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    TRANSIENT       reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    VOLATILE        reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    STRICTFP        reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    VOID            reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    CLASS           reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    BYTE            reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    SHORT           reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    CHAR            reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    INT             reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    LONG            reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    FLOAT           reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    DOUBLE          reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    BOOLEAN         reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    IDENTIFIER      reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)
    R_CURL_BRACE    reduce using rule 69 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList SEMICOLON .)


state 359

    (68) MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .

    SEMICOLON       reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    STATIC          reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    L_CURL_BRACE    reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    PUBLIC          reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    PROTECTED       reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    PRIVATE         reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    ABSTRACT        reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    FINAL           reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    NATIVE          reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    SYNCHRONIZED    reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    TRANSIENT       reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    VOLATILE        reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    STRICTFP        reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    VOID            reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    CLASS           reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    BYTE            reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    SHORT           reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    CHAR            reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    INT             reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    LONG            reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    FLOAT           reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    DOUBLE          reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    BOOLEAN         reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    IDENTIFIER      reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)
    R_CURL_BRACE    reduce using rule 68 (MethodDeclaratorRest -> FormalParameters THROWS QualifiedIdentifierList Block .)


state 360

    (63) variableDeclarator -> COMMA VariableDeclarator variableDeclarator .

    SEMICOLON       reduce using rule 63 (variableDeclarator -> COMMA VariableDeclarator variableDeclarator .)


state 361

    (129) SwitchLabel -> CASE Expression COLON .

    CASE            reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    DEFAULT         reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    IDENTIFIER      reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    SEMICOLON       reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    IF              reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    ASSERT          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    SWITCH          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    WHILE           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    DO              reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    FOR             reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    BREAK           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    CONTINUE        reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    RETURN          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    THROW           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    SYNCHRONIZED    reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    FINAL           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    L_CURL_BRACE    reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    BYTE            reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    SHORT           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    CHAR            reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    INT             reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    LONG            reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    FLOAT           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    DOUBLE          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    BOOLEAN         reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    PUBLIC          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    PROTECTED       reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    PRIVATE         reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    STATIC          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    ABSTRACT        reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    NATIVE          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    TRANSIENT       reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    VOLATILE        reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    STRICTFP        reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    L_BRACE         reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    PLUS_PLUS       reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    MINUS_MINUS     reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    NOT             reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    CURL_DASH       reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    PLUS            reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    MINUS           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    THIS            reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    SUPER           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    VOID            reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    LITERAL         reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    NUMBER          reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    CLASS           reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)
    R_CURL_BRACE    reduce using rule 129 (SwitchLabel -> CASE Expression COLON .)


state 362

    (165) infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .

    EXPLAMETARY     reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    ASSIGNMENT      reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    PLUS_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    MINUS_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    TIMES_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    DIVIDE_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    AND_ASSIGNMENT  reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    OR_ASSIGNMENT   reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    POWER_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    MOD_ASSIGNMENT  reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    L_SHIFT_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    R_SHIFT_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    RR_SHIFT_ASSIGNMENT reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    SEMICOLON       reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    R_BRACE         reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    COLON           reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    COMMA           reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    L_BRACE         reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)
    R_SQUARE_BRACE  reduce using rule 165 (infixOp_expression3 -> InfixOp Expression3 infixOp_expression3 .)


state 363

    (142) ForVarControlRest -> COLON Expression .

    R_BRACE         reduce using rule 142 (ForVarControlRest -> COLON Expression .)


state 364

    (143) ForVariableDeclaratorsRest -> ASSIGNMENT VariableInitializer . variableDeclarator
    (63) variableDeclarator -> . COMMA VariableDeclarator variableDeclarator
    (64) variableDeclarator -> .

    COMMA           shift and go to state 281
    SEMICOLON       reduce using rule 64 (variableDeclarator -> .)

    variableDeclarator             shift and go to state 376

state 365

    (138) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON . SEMICOLON
    (139) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON . Expression SEMICOLON
    (140) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON . SEMICOLON ForUpdate
    (141) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON . Expression SEMICOLON ForUpdate
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    SEMICOLON       shift and go to state 377
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    Literal                        shift and go to state 94
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 378

state 366

    (137) ForVarControl -> variableModifier Type VariableDeclaratorId ForVarControlRest .

    R_BRACE         reduce using rule 137 (ForVarControl -> variableModifier Type VariableDeclaratorId ForVarControlRest .)


state 367

    (134) ForControl -> ForUpdate SEMICOLON SEMICOLON ForUpdate .

    R_BRACE         reduce using rule 134 (ForControl -> ForUpdate SEMICOLON SEMICOLON ForUpdate .)


state 368

    (133) ForControl -> ForUpdate SEMICOLON Expression SEMICOLON .
    (135) ForControl -> ForUpdate SEMICOLON Expression SEMICOLON . ForUpdate
    (144) ForUpdate -> . StatementExpression
    (145) ForUpdate -> . StatementExpression COMMA ForUpdate
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    R_BRACE         reduce using rule 133 (ForControl -> ForUpdate SEMICOLON Expression SEMICOLON .)
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    ForUpdate                      shift and go to state 379
    Literal                        shift and go to state 94
    ParExpression                  shift and go to state 116
    BasicType                      shift and go to state 133
    QualifiedIdentifier            shift and go to state 136
    Primary                        shift and go to state 86
    StatementExpression            shift and go to state 245
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    Expression                     shift and go to state 111

state 369

    (218) IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .

    DOT             reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    PLUS_PLUS       reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    MINUS_MINUS     reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    INSTANCEOF      reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    OR              reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    AND             reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    POWER           reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    EQUAL           reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    NOT_EQUAL       reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    LT              reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    GT              reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    LE              reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    GE              reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    L_SHIFT         reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    R_SHIFT         reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    RR_SHIFT        reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    PLUS            reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    MINUS           reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    TIMES           reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    DIVIDE          reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    MOD             reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    EXPLAMETARY     reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    ASSIGNMENT      reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    PLUS_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    MINUS_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    TIMES_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    DIVIDE_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    AND_ASSIGNMENT  reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    OR_ASSIGNMENT   reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    POWER_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    MOD_ASSIGNMENT  reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    L_SHIFT_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    R_SHIFT_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    RR_SHIFT_ASSIGNMENT reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    SEMICOLON       reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    R_BRACE         reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    COMMA           reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    COLON           reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    L_BRACE         reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)
    R_SQUARE_BRACE  reduce using rule 218 (IdentifierSuffix -> L_BRACE square_brace DOT CLASS R_BRACE .)


state 370

    (219) IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .

    DOT             reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    PLUS_PLUS       reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    MINUS_MINUS     reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    INSTANCEOF      reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    OR              reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    AND             reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    POWER           reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    EQUAL           reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    NOT_EQUAL       reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    LT              reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    GT              reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    LE              reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    GE              reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    L_SHIFT         reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    R_SHIFT         reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    RR_SHIFT        reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    PLUS            reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    MINUS           reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    TIMES           reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    DIVIDE          reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    MOD             reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    EXPLAMETARY     reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    ASSIGNMENT      reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    PLUS_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    MINUS_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    TIMES_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    DIVIDE_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    AND_ASSIGNMENT  reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    OR_ASSIGNMENT   reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    POWER_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    MOD_ASSIGNMENT  reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    L_SHIFT_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    R_SHIFT_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    RR_SHIFT_ASSIGNMENT reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    SEMICOLON       reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    R_BRACE         reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    COMMA           reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    COLON           reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    L_BRACE         reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)
    R_SQUARE_BRACE  reduce using rule 219 (IdentifierSuffix -> L_BRACE square_brace DOT Expression R_BRACE .)


state 371

    (81) FormalParameterDeclsRest -> VariableDeclaratorId COMMA FormalParameterDecls .

    R_BRACE         reduce using rule 81 (FormalParameterDeclsRest -> VariableDeclaratorId COMMA FormalParameterDecls .)


state 372

    (82) FormalParameterDeclsRest -> DOT DOT DOT . VariableDeclaratorId
    (83) VariableDeclaratorId -> . IDENTIFIER square_brace

    IDENTIFIER      shift and go to state 301

    VariableDeclaratorId           shift and go to state 380

state 373

    (10) QualifiedIdentifierList -> QualifiedIdentifier COMMA QualifiedIdentifierList .

    SEMICOLON       reduce using rule 10 (QualifiedIdentifierList -> QualifiedIdentifier COMMA QualifiedIdentifierList .)
    L_CURL_BRACE    reduce using rule 10 (QualifiedIdentifierList -> QualifiedIdentifier COMMA QualifiedIdentifierList .)


state 374

    (92) variableInitializer -> VariableInitializer COMMA . variableInitializer
    (91) variableInitializer -> . VariableInitializer
    (92) variableInitializer -> . VariableInitializer COMMA variableInitializer
    (89) VariableInitializer -> . ArrayInitializer
    (90) VariableInitializer -> . Expression
    (93) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE
    (94) ArrayInitializer -> . L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    L_SQUARE_BRACE  shift and go to state 322
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    VariableInitializer            shift and go to state 356
    Literal                        shift and go to state 94
    BasicType                      shift and go to state 133
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    ArrayInitializer               shift and go to state 321
    QualifiedIdentifier            shift and go to state 136
    Expression                     shift and go to state 323
    variableInitializer            shift and go to state 381
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 375

    (93) ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE .
    (94) ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE . COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 93 (ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE .)
    R_SQUARE_BRACE  reduce using rule 93 (ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE .)
    COMMA           shift and go to state 382

  ! COMMA           [ reduce using rule 93 (ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE .) ]


state 376

    (143) ForVariableDeclaratorsRest -> ASSIGNMENT VariableInitializer variableDeclarator .

    SEMICOLON       reduce using rule 143 (ForVariableDeclaratorsRest -> ASSIGNMENT VariableInitializer variableDeclarator .)


state 377

    (138) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON SEMICOLON .
    (140) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON SEMICOLON . ForUpdate
    (144) ForUpdate -> . StatementExpression
    (145) ForUpdate -> . StatementExpression COMMA ForUpdate
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    R_BRACE         reduce using rule 138 (ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON SEMICOLON .)
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    BasicType                      shift and go to state 133
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 245
    Expression                     shift and go to state 111
    ForUpdate                      shift and go to state 383
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 378

    (139) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression . SEMICOLON
    (141) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression . SEMICOLON ForUpdate

    SEMICOLON       shift and go to state 384


state 379

    (135) ForControl -> ForUpdate SEMICOLON Expression SEMICOLON ForUpdate .

    R_BRACE         reduce using rule 135 (ForControl -> ForUpdate SEMICOLON Expression SEMICOLON ForUpdate .)


state 380

    (82) FormalParameterDeclsRest -> DOT DOT DOT VariableDeclaratorId .

    R_BRACE         reduce using rule 82 (FormalParameterDeclsRest -> DOT DOT DOT VariableDeclaratorId .)


state 381

    (92) variableInitializer -> VariableInitializer COMMA variableInitializer .

    R_SQUARE_BRACE  reduce using rule 92 (variableInitializer -> VariableInitializer COMMA variableInitializer .)


state 382

    (94) ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA .

    COMMA           reduce using rule 94 (ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA .)
    SEMICOLON       reduce using rule 94 (ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA .)
    R_SQUARE_BRACE  reduce using rule 94 (ArrayInitializer -> L_SQUARE_BRACE variableInitializer R_SQUARE_BRACE COMMA .)


state 383

    (140) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON SEMICOLON ForUpdate .

    R_BRACE         reduce using rule 140 (ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON SEMICOLON ForUpdate .)


state 384

    (139) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON .
    (141) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON . ForUpdate
    (144) ForUpdate -> . StatementExpression
    (145) ForUpdate -> . StatementExpression COMMA ForUpdate
    (123) StatementExpression -> . Expression
    (146) Expression -> . Expression1
    (147) Expression -> . Expression1 AssignmentOperator Expression1
    (160) Expression1 -> . Expression2
    (161) Expression1 -> . Expression2 Expression1Rest
    (163) Expression2 -> . Expression3
    (164) Expression2 -> . Expression3 Expression2Rest
    (188) Expression3 -> . PrefixOp Expression3
    (189) Expression3 -> . L_BRACE Expression R_BRACE Expression3
    (190) Expression3 -> . L_BRACE Type R_BRACE Expression3
    (191) Expression3 -> . Primary DOT QualifiedIdentifier postfixOp
    (192) Expression3 -> . Primary postfixOp
    (193) PrefixOp -> . PLUS_PLUS
    (194) PrefixOp -> . MINUS_MINUS
    (195) PrefixOp -> . NOT
    (196) PrefixOp -> . CURL_DASH
    (197) PrefixOp -> . PLUS
    (198) PrefixOp -> . MINUS
    (201) Primary -> . Literal
    (202) Primary -> . ParExpression
    (203) Primary -> . THIS
    (204) Primary -> . THIS Arguments
    (205) Primary -> . SUPER SuperSuffix
    (206) Primary -> . QualifiedIdentifier
    (207) Primary -> . QualifiedIdentifier IdentifierSuffix
    (208) Primary -> . BasicType square_brace DOT CLASS
    (209) Primary -> . VOID DOT CLASS
    (210) Literal -> . LITERAL
    (211) Literal -> . NUMBER
    (212) ParExpression -> . L_BRACE Expression R_BRACE
    (7) QualifiedIdentifier -> . IDENTIFIER
    (8) QualifiedIdentifier -> . IDENTIFIER DOT QualifiedIdentifier
    (29) BasicType -> . BYTE
    (30) BasicType -> . SHORT
    (31) BasicType -> . CHAR
    (32) BasicType -> . INT
    (33) BasicType -> . LONG
    (34) BasicType -> . FLOAT
    (35) BasicType -> . DOUBLE
    (36) BasicType -> . BOOLEAN

    R_BRACE         reduce using rule 139 (ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON .)
    L_BRACE         shift and go to state 81
    PLUS_PLUS       shift and go to state 122
    MINUS_MINUS     shift and go to state 104
    NOT             shift and go to state 123
    CURL_DASH       shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 110
    THIS            shift and go to state 120
    SUPER           shift and go to state 124
    VOID            shift and go to state 108
    LITERAL         shift and go to state 95
    NUMBER          shift and go to state 85
    IDENTIFIER      shift and go to state 7
    BYTE            shift and go to state 68
    SHORT           shift and go to state 59
    CHAR            shift and go to state 65
    INT             shift and go to state 66
    LONG            shift and go to state 63
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 60
    BOOLEAN         shift and go to state 67

    PrefixOp                       shift and go to state 84
    Literal                        shift and go to state 94
    BasicType                      shift and go to state 133
    Expression1                    shift and go to state 107
    Expression3                    shift and go to state 102
    Expression2                    shift and go to state 114
    QualifiedIdentifier            shift and go to state 136
    StatementExpression            shift and go to state 245
    Expression                     shift and go to state 111
    ForUpdate                      shift and go to state 385
    ParExpression                  shift and go to state 116
    Primary                        shift and go to state 86

state 385

    (141) ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON ForUpdate .

    R_BRACE         reduce using rule 141 (ForVarControlRest -> ForVariableDeclaratorsRest SEMICOLON Expression SEMICOLON ForUpdate .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 7 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 57 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 57 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 57 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 57 resolved as shift
WARNING: shift/reduce conflict for INT in state 57 resolved as shift
WARNING: shift/reduce conflict for LONG in state 57 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 57 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 57 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 57 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 92 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 101 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 101 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 101 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 101 resolved as shift
WARNING: shift/reduce conflict for INT in state 101 resolved as shift
WARNING: shift/reduce conflict for LONG in state 101 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 101 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 101 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 101 resolved as shift
WARNING: shift/reduce conflict for DOT in state 103 resolved as shift
WARNING: shift/reduce conflict for DOT in state 106 resolved as shift
WARNING: shift/reduce conflict for L_BRACE in state 120 resolved as shift
WARNING: shift/reduce conflict for L_BRACE in state 136 resolved as shift
WARNING: shift/reduce conflict for DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 181 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 181 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 181 resolved as shift
WARNING: shift/reduce conflict for INT in state 181 resolved as shift
WARNING: shift/reduce conflict for LONG in state 181 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 181 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 181 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 181 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 181 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 217 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 217 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 217 resolved as shift
WARNING: shift/reduce conflict for INT in state 217 resolved as shift
WARNING: shift/reduce conflict for LONG in state 217 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 217 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 217 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 217 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 217 resolved as shift
WARNING: shift/reduce conflict for L_BRACE in state 229 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 260 resolved as shift
WARNING: shift/reduce conflict for CASE in state 293 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 293 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 295 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 295 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 295 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 295 resolved as shift
WARNING: shift/reduce conflict for INT in state 295 resolved as shift
WARNING: shift/reduce conflict for LONG in state 295 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 295 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 295 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 295 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 351 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 351 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 351 resolved as shift
WARNING: shift/reduce conflict for INT in state 351 resolved as shift
WARNING: shift/reduce conflict for LONG in state 351 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 351 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 351 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 351 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 351 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 375 resolved as shift
WARNING: reduce/reduce conflict in state 106 resolved using rule (square_brace -> <empty>)
WARNING: rejected rule (Primary -> QualifiedIdentifier) in state 106
